{"version":3,"sources":["../../src/middlewares/auth.jwt.js"],"names":["verifyToken","req","res","next","requestHeader","token","header","status","json","message","decoded","jwt","verify","index","SECRET","locals","jwtPayload","userId","id","User","findById","password","userFound","console","error","isAdmin","user","Role","find","_id","$in","roles","i","length","name","isVendedor","isAsistente_Marketing","isJefe_Ventas","isAsistente_Callcenter"],"mappings":"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","sourcesContent":["import jwt from 'jsonwebtoken'\r\nimport index from '../config/index'\r\nimport User from '../models/User'\r\nimport Role from '../models/Role'\r\n\r\nexport const verifyToken = async(req, res, next) => {\r\n    try {\r\n        let requestHeader = 'x-access-token'\r\n        const token = req.header(requestHeader)\r\n\r\n        if (!token) return res.status(404).json({ message: 'Falta Token' })\r\n\r\n        const decoded = jwt.verify(token, index.SECRET)\r\n        res.locals.jwtPayload = decoded\r\n        req.userId = decoded.id\r\n        const id = req.userId\r\n\r\n        const userFound = await User.findById(id, { password: 0 })\r\n\r\n        if (!userFound) return res.status(404).json({ message: 'No se encontró usuario' })\r\n\r\n        next()\r\n    } catch (err) {\r\n        console.error(err.message)\r\n        if (err.message == \"jwt expired\") {\r\n            return res.status(401).json({ message: 'Token ha expirado' });\r\n        } else if (err.message == \"invalid token\") {\r\n            return res.status(401).json({ message: 'Token inválido' })\r\n        } else {\r\n            return res.status(403).json({ message: 'No Autorizado' });\r\n        }\r\n    }\r\n}\r\n\r\nexport const isAdmin = async(req, res, next) => {\r\n\r\n    const user = await User.findById(req.userId);\r\n    const roles = await Role.find({ _id: { $in: user.roles } });\r\n\r\n    for (let i = 0; i < roles.length; i++) {\r\n        if (roles[i].name === 'Administrador') {\r\n            next()\r\n            return;\r\n        }\r\n    }\r\n    return res.status(403).json({ message: 'Requiere permiso de Administrador' });\r\n}\r\n\r\nexport const isVendedor = async(req, res, next) => {\r\n\r\n    const user = await User.findById(req.userId);\r\n    const roles = await Role.find({ _id: { $in: user.roles } });\r\n\r\n    for (let i = 0; i < roles.length; i++) {\r\n        if (roles[i].name === 'Vendedor') {\r\n            next()\r\n            return;\r\n        }\r\n    }\r\n    return res.status(403).json({ message: 'Requiere permiso de Vendedor' });\r\n}\r\n\r\nexport const isAsistente_Marketing = async(req, res, next) => {\r\n\r\n    const user = await User.findById(req.userId);\r\n    const roles = await Role.find({ _id: { $in: user.roles } });\r\n\r\n    for (let i = 0; i < roles.length; i++) {\r\n        if (roles[i].name === 'Asistente-Marketing') {\r\n            next()\r\n            return;\r\n        }\r\n    }\r\n    return res.status(403).json({ message: 'Requiere permiso de Asistente-Marketing' });\r\n}\r\n\r\nexport const isJefe_Ventas = async(req, res, next) => {\r\n\r\n    const user = await User.findById(req.userId);\r\n    const roles = await Role.find({ _id: { $in: user.roles } });\r\n\r\n    for (let i = 0; i < roles.length; i++) {\r\n        if (roles[i].name === 'Jefe-Ventas') {\r\n            next()\r\n            return;\r\n        }\r\n    }\r\n    return res.status(403).json({ message: 'Requiere permiso de Jefe-Ventas' });\r\n}\r\n\r\nexport const isAsistente_Callcenter = async(req, res, next) => {\r\n\r\n    const user = await User.findById(req.userId);\r\n    const roles = await Role.find({ _id: { $in: user.roles } });\r\n\r\n    for (let i = 0; i < roles.length; i++) {\r\n        if (roles[i].name === 'Asistente-Callcenter') {\r\n            next()\r\n            return;\r\n        }\r\n    }\r\n    return res.status(403).json({ message: 'Requiere permiso de Asistente-Callcenter' });\r\n}"],"file":"auth.jwt.js"}