{"version":3,"sources":["../../src/controllers/marca.controller.js"],"names":["marcaController","getAll","req","res","Marca","find","sort","name","populate","path","select","query","length","json","total_brands","all_brands","status","message","console","log","getMarcaById","marcaId","params","findById","brand","getMarcaByActivo","total_actives","active_brands","createMarca","body","createdBy","avatar","file","obj","User","findOne","username","userFound","undefined","_id","location","save","updateMarca","findByIdAndUpdate","deleteMarca","findByIdAndDelete"],"mappings":"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","sourcesContent":["import Marca from \"../models/Marca\";\r\nimport User from \"../models/User\";\r\n\r\nconst marcaController = {};\r\n\r\nmarcaController.getAll = async(req, res) => {\r\n    try {\r\n        const query = await Marca.find()\r\n        .sort({ name: 'asc' })\r\n        .populate({\r\n            path: 'createdBy',\r\n            select: 'name username',\r\n        });\r\n        if (query.length > 0) {\r\n            res.json({total_brands: query.length, all_brands: query});\r\n        } else {\r\n            return res.status(404).json({ message: 'No existen Marcas' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nmarcaController.getMarcaById = async(req, res) => {\r\n    const { marcaId } = req.params;\r\n    try {\r\n        const query = await Marca.findById(marcaId)\r\n        .populate({\r\n            path: 'createdBy',\r\n            select: 'name username',\r\n        });\r\n        if (query) {\r\n            res.json({brand: query});\r\n        } else {\r\n            return res.status(404).json({ message: 'No existe Marca' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err)\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nmarcaController.getMarcaByActivo = async(req, res) => {\r\n    try {\r\n        const query = await Marca.find({ status: true })\r\n        .sort({ name: 'asc' })\r\n        .populate({\r\n            path: 'createdBy',\r\n            select: 'name username',\r\n        });\r\n        if (query.length > 0) {\r\n            res.json({total_actives: query.length, active_brands: query});\r\n        } else {\r\n            return res.status(404).json({ message: 'No existen Marcas Activas' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n}\r\n\r\nmarcaController.createMarca = async(req, res) => {\r\n    const { name, status,createdBy } = req.body;\r\n    const avatar = req.file;\r\n    try {\r\n        let obj = null;\r\n\r\n        const userFound =  await User.findOne({username: createdBy});\r\n        if(!userFound) return res.status(404).json({message: 'No existe usuario'});\r\n\r\n        if(avatar == undefined || avatar == null){\r\n            obj = new Marca({ name, status });\r\n            obj.createdBy = userFound._id;\r\n        }else{\r\n            obj = new Marca({ \r\n                name,\r\n                status,\r\n                avatar: avatar.location\r\n            });\r\n            obj.createdBy = userFound._id;\r\n        }\r\n\r\n        const query = await obj.save();\r\n\r\n        if (query) {\r\n            res.json({ message: 'Marca creada con éxito' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err)\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nmarcaController.updateMarca = async(req, res) => {\r\n    const { marcaId } = req.params;\r\n    const { name, status } = req.body;\r\n    const avatar = req.file;\r\n    try {\r\n        let query = null;\r\n\r\n        if(avatar == null || avatar == undefined){\r\n            query = await Marca.findByIdAndUpdate(marcaId, { name, status });\r\n        }else{\r\n            query = await Marca.findByIdAndUpdate(marcaId, {\r\n                name,\r\n                status,\r\n                avatar: avatar.location\r\n            });\r\n        }\r\n        if (query) {\r\n            res.json({ message: 'Marca actualizada con éxito' });\r\n        } else {\r\n            return res.status(404).json({ message: 'No existe Marca a eliminar' });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nmarcaController.deleteMarca = async(req, res) => {\r\n    const { marcaId } = req.params;\r\n    try {\r\n        const query = await Marca.findByIdAndDelete(marcaId);\r\n        if (query) {\r\n            res.json({ message: 'Marca eliminada con éxito' });\r\n        } else {\r\n            return res.status(404).json({ message: 'No existe Marca a eliminar' });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nexport default marcaController;"],"file":"marca.controller.js"}