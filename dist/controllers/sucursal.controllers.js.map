{"version":3,"sources":["../../src/controllers/sucursal.controllers.js"],"names":["getAll","req","res","Sucursal","find","sort","name","populate","path","select","query","length","json","total_sucursals","all_sucursals","status","message","console","log","getSucursalById","sucursalId","params","findById","sucursal","getSucursalByActivo","total_actives","active_sucursals","createSucursal","body","createdBy","User","findOne","username","userFound","obj","_id","save","updateSucursal","findByIdAndUpdate","deleteSucursal","findByIdAndDelete"],"mappings":"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","sourcesContent":["import Sucursal from '../models/Sucursal'\r\nimport User from '../models/User';\r\n\r\nexport const getAll = async(req, res) => {\r\n    try {\r\n        const query = await Sucursal.find()\r\n            .sort({ name: 'asc' })\r\n            .populate({\r\n                path: 'createdBy',\r\n                select: 'name username',\r\n            });\r\n        if (query.length > 0) {\r\n            res.json({total_sucursals: query.length, all_sucursals: query});\r\n        } else {\r\n            return res.status(404).json({ message: 'No existen Sucursales' });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n}\r\n\r\nexport const getSucursalById = async(req, res) => {\r\n    const { sucursalId } = req.params\r\n    try {\r\n        const query = await Sucursal.findById(sucursalId)\r\n        .populate({\r\n            path: 'createdBy',\r\n            select: 'name username',\r\n        });\r\n        if (query) {\r\n            res.json({sucursal: query});\r\n        } else {\r\n            return res.status(404).json({ message: 'No existe Sucursal' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nexport const getSucursalByActivo = async(req, res) => {\r\n    try {\r\n        const query = await Sucursal.find({ status: true })\r\n            .sort({ name: 'asc' })\r\n            .populate({\r\n                path: 'createdBy',\r\n                select: 'name username',\r\n            });\r\n        if (query.length > 0) {\r\n            res.json({total_actives: query.length, active_sucursals: query});\r\n        } else {\r\n            return res.status(404).json({ message: 'No existen Sucursales Activos' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nexport const createSucursal = async(req, res) => {\r\n    const { name, status, createdBy } = req.body;\r\n    try {\r\n        \r\n        const userFound = await User.findOne({username: createdBy});\r\n        if(!userFound) return res.status(404).json({message: `Colaborador ${createdBy} no encontrado`});\r\n\r\n        const obj = new Sucursal({ name, status });\r\n        obj.createdBy = userFound._id;\r\n\r\n        const query = await obj.save()\r\n        if (query) {\r\n            res.json({ message: 'Sucursal creada con éxito' });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n}\r\n\r\nexport const updateSucursal = async(req, res) => {\r\n    const { sucursalId } = req.params;\r\n    const { name, status } = req.body;\r\n    try {\r\n        const query = await Sucursal.findByIdAndUpdate(sucursalId, { name, status });\r\n        if (query) {\r\n            res.json({ message: 'Sucursal actualizada con éxito' });\r\n        } else {\r\n            return res.status(404).json({ message: 'No existe Sucursal a actualizar' });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nexport const deleteSucursal = async(req, res) => {\r\n    const { sucursalId } = req.params;\r\n    try {\r\n        const query = await Sucursal.findByIdAndDelete(sucursalId);\r\n        if (query) {\r\n            res.json({ message: 'Sucursal eliminado con éxito' })\r\n        } else {\r\n            return res.status(404).json({ message: 'No existe Sucursal a eliminar' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}"],"file":"sucursal.controllers.js"}