{"version":3,"sources":["../../src/controllers/conversion.controller.js"],"names":["conversionCtrl","getAll","req","res","EstadoConversion","find","populate","path","select","query","length","json","total","all_status","status","message","console","log","getActivos","total_active","active_status","getOneById","conversionId","params","findById","createOne","body","name","value","createdBy","User","findOne","username","userFound","newObj","_id","save","updateOneById","findByIdAndUpdate","deleteOneById","findByIdAndDelete"],"mappings":"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","sourcesContent":["import EstadoConversion from \"../models/EstadoConversion\";\r\nimport User from \"../models/User\";\r\n\r\nconst conversionCtrl = {};\r\n\r\nconversionCtrl.getAll = async (req, res) => {\r\n    try {\r\n        const query = await EstadoConversion.find()\r\n        .populate({\r\n            path: 'createdBy',\r\n            select: 'name username',\r\n        });\r\n\r\n        if(query.length > 0) {\r\n            res.json({total: query.length, all_status: query});\r\n        }else{\r\n            return res.status(404).json({message: 'No existen estados'});\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({message: err.message})\r\n    }\r\n};\r\n\r\nconversionCtrl. getActivos = async (req, res) => {\r\n    try {\r\n        const query = await EstadoConversion.find({status: true})\r\n        .populate({\r\n            path: 'createdBy',\r\n            select: 'name username',\r\n        });\r\n\r\n        if(query.length > 0) {\r\n            res.json({total_active: query.length, active_status: query});\r\n        }else{\r\n            return res.status(404).json({message: 'No existen estados activos'});\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({message: err.message})\r\n    }\r\n    \r\n};\r\n\r\nconversionCtrl.getOneById = async (req, res) => {\r\n    const {conversionId} = req.params;\r\n    try {\r\n        const query = await EstadoConversion.findById(conversionId)\r\n        .populate({\r\n            path: 'createdBy',\r\n            select: 'name username',\r\n        });\r\n\r\n        if(query){\r\n            res.json({status: query});\r\n        }else{\r\n            return res.status(404).json({ message: 'No se encontró el estado'});\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({message: err.message})\r\n    }\r\n};\r\n\r\nconversionCtrl.createOne = async (req, res) => {\r\n    const {name, value,  status, createdBy} = req.body;\r\n    try {\r\n        \r\n        const userFound = await User.findOne({username: createdBy});\r\n        if(!userFound) return res.status(404).json({message: `Colaborador ${createdBy} no encontrado`})\r\n\r\n        const newObj = new EstadoConversion({name,value, status});\r\n        newObj.createdBy = userFound._id;\r\n\r\n        const query = await newObj.save();\r\n\r\n        if(query){\r\n            res.json({message: 'Estado creado con éxito'});\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({message: err.message})\r\n    }\r\n    \r\n};\r\n\r\nconversionCtrl.updateOneById = async (req, res) => {\r\n    const {conversionId} = req.params;\r\n    const {name,value, status} = req.body;\r\n    try {\r\n        const query = await EstadoConversion.findByIdAndUpdate(conversionId,{ name,value, status});\r\n        \r\n        if(query){\r\n            res.json({message: 'Estado actualizado con éxito'});\r\n        }else{\r\n            return res.status(404).json({message: 'No se encontró el estado a actualizar'})\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({message: err.message})\r\n    }\r\n};\r\n\r\nconversionCtrl.deleteOneById = async (req, res) => {\r\n    const {conversionId} = req.params;\r\n    try {\r\n        const query = await EstadoConversion.findByIdAndDelete(conversionId);\r\n\r\n        if(query){\r\n            res.json({message: 'Estado eliminado con éxito'});\r\n        }else{\r\n            return res.status(404).json({message: 'No se encontró el estado a eliminar'})\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({message: err.message})\r\n    }\r\n};\r\n\r\nexport default conversionCtrl;"],"file":"conversion.controller.js"}