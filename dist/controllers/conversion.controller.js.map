{"version":3,"sources":["../../src/controllers/conversion.controller.js"],"names":["getAll","req","res","Conversion","find","sort","name","objeto","length","json","status","message","console","log","getConversionById","conversionId","params","findById","getConversionByActivo","createConversion","body","nuevo","save","updateConversion","findByIdAndUpdate","deleteConversion","findByIdAndDelete"],"mappings":"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","sourcesContent":["import Conversion from '../models/Conversion'\r\n\r\nexport const getAll = async(req, res) => {\r\n    try {\r\n        const objeto = await Conversion.find().sort({ name: 'asc' })\r\n        if (objeto.length > 0) {\r\n            res.json(objeto);\r\n        } else {\r\n            return res.status(404).json({ message: 'No existen estados de conversión' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nexport const getConversionById = async(req, res) => {\r\n    const { conversionId } = req.params\r\n    try {\r\n        const objeto = await Conversion.findById(conversionId)\r\n        if (objeto) {\r\n            res.json(objeto);\r\n        } else {\r\n            return res.status(404).json({ message: 'No existe estado de conversión' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nexport const getConversionByActivo = async(req, res) => {\r\n    try {\r\n        const objeto = await Conversion.find({ status: true }).sort({ name: 'asc' })\r\n        if (objeto.length > 0) {\r\n            res.json(objeto);\r\n        } else {\r\n            return res.status(404).json({ message: 'No existen estados de conversión Activos' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nexport const createConversion = async(req, res) => {\r\n    const { name, status } = req.body;\r\n    try {\r\n        const nuevo = new Conversion({ name, status })\r\n        const objeto = await nuevo.save()\r\n        if (objeto) {\r\n            res.json({ message: 'Estado de conversión creada con éxito' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nexport const updateConversion = async(req, res) => {\r\n    const { name, status } = req.body;\r\n    const { conversionId } = req.params;\r\n    try {\r\n        const objeto = await Conversion.findByIdAndUpdate(conversionId, { name, status })\r\n        if (objeto) {\r\n            res.json({ message: 'Estado de conversion actualizada con éxito' })\r\n        } else {\r\n            res.status(404).json({ message: 'No existe estado de conversión a actualizar' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nexport const deleteConversion = async(req, res) => {\r\n    const { conversionId } = req.params;\r\n    try {\r\n        const objeto = await Conversion.findByIdAndDelete(conversionId)\r\n        if (objeto) {\r\n            res.json({ message: 'Estado de conversión eliminada con éxito' })\r\n        } else {\r\n            return res.status(404).json({ message: 'No existe estado de conversión a eliminar' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        res.status(503).json({ message: err.message })\r\n    }\r\n}"],"file":"conversion.controller.js"}