{"version":3,"sources":["../../src/controllers/financiamiento.controller.js"],"names":["financesCtrl","getAll","req","res","Financiamiento","find","sort","name","populate","path","select","query","length","json","total","all_finances","status","message","console","log","getOneById","financesId","params","findById","finance","getActivos","total_active","active_finances","createOne","body","createdBy","newObj","User","findOne","username","userFound","_id","save","updateOneById","findByIdAndUpdate","deleteOneById","findByIdAndDelete"],"mappings":"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","sourcesContent":["import Financiamiento from '../models/Financiamiento';\r\nimport User from '../models/User';\r\n\r\nconst financesCtrl = {};\r\n\r\nfinancesCtrl.getAll = async (req, res) => {\r\n    try {\r\n        const query = await Financiamiento.find()\r\n            .sort({name: 1})\r\n            .populate({\r\n                path: 'createdBy',\r\n                select: 'name username',\r\n            });\r\n\r\n            if(query.length > 0){\r\n                res.json({total: query.length, all_finances: query});\r\n            }else{\r\n                return res.status(404).json({message: 'No existen Tipos de financiamiento'});\r\n            }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({message: err});\r\n    }\r\n}\r\n\r\nfinancesCtrl.getOneById = async (req, res) => {\r\n    const {financesId} = req.params;\r\n\r\n    try {\r\n        const query = await Financiamiento.findById(financesId)\r\n            .populate({\r\n                path: 'createdBy',\r\n                select: 'name username',\r\n            });\r\n\r\n            if(query){\r\n                res.json({finance: query});\r\n            }else{\r\n                return res.status(404).json({message: 'No existen Tipos de financiamiento'});\r\n            }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({message: err});\r\n    }\r\n}\r\n\r\nfinancesCtrl.getActivos = async (req, res) => {\r\n    try {\r\n        const query = await Financiamiento.find({status: true})\r\n            .populate({\r\n                path: 'createdBy',\r\n                select: 'name username',\r\n            });\r\n\r\n            if(query.length > 0){\r\n                res.json({total_active: query.length, active_finances: query});\r\n            }else{\r\n                return res.status(404).json({message: 'No existen Tipos de financiamiento'});\r\n            }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({message: err});\r\n    }\r\n}\r\n\r\nfinancesCtrl.createOne = async (req, res) => {\r\n    const { name, status, createdBy} = req.body;\r\n    try {\r\n        const newObj = new Financiamiento({name,status});\r\n\r\n        const userFound = await User.findOne({username: createdBy});\r\n        newObj.createdBy = userFound._id;\r\n\r\n        const query = await newObj.save();\r\n\r\n        if(query){\r\n            res.json({message: 'Tipo de financiamiento agregado con éxito.'});\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({message: err});\r\n    }\r\n}\r\n\r\nfinancesCtrl.updateOneById = async (req, res) =>{\r\n    const {financesId} = req.params;\r\n    const { name, status} = req.body;\r\n\r\n    try {\r\n        const query = await Financiamiento.findByIdAndUpdate(financesId,{\r\n            name,\r\n            status\r\n        });\r\n\r\n        if(query){\r\n            res.json({message: 'Tipo de financiamiento actualizado con éxito'});\r\n        }else{\r\n            return res.status(404).json({message: 'No existe tipo de financiamiento para actualizar'});\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({message: err});\r\n    }\r\n}\r\n\r\nfinancesCtrl.deleteOneById = async (req, res) =>{\r\n    const {financesId} = req.params;\r\n\r\n    try {\r\n        const query = await Financiamiento.findByIdAndDelete(financesId);\r\n\r\n        if(query){\r\n            res.json({message: 'Tipo de financiamiento eliminado con éxito'});\r\n        }else{\r\n            return res.status(404).json({message: 'No existe tipo de financiamiento a eliminar'});\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({message: err});\r\n    }\r\n}\r\n\r\nexport default financesCtrl;"],"file":"financiamiento.controller.js"}