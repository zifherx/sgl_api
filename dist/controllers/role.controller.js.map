{"version":3,"sources":["../../src/controllers/role.controller.js"],"names":["roleCtrl","getAll","req","res","Role","find","sort","name","populate","query","length","json","status","message","console","error","getOne","roleId","params","findById","getCount","estimatedDocumentCount","nro_roles","createRole","body","description","userCreator","newRole","User","username","userFound","map","a","_id","save","updateRole","findByIdAndUpdate","log","deleteRole","findByIdAndDelete"],"mappings":"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","sourcesContent":["import Role from '../models/Role'\r\nimport User from '../models/User'\r\n\r\nconst roleCtrl = {}\r\n\r\nroleCtrl.getAll = async(req, res) => {\r\n    try {\r\n        const query = await Role.find().sort({ name: 'asc' }).populate('userCreator')\r\n\r\n        if (query.length > 0) {\r\n            res.json(query)\r\n        } else {\r\n            return res.status(404).json({ message: 'No existen Roles' })\r\n        }\r\n\r\n    } catch (err) {\r\n        console.error(err)\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nroleCtrl.getOne = async(req, res) => {\r\n    const { roleId } = req.params;\r\n    try {\r\n        const query = await Role.findById(roleId).sort({ name: 'asc' })\r\n        if (query) {\r\n            res.json(query);\r\n        } else {\r\n            return res.status(404).json({ message: 'No existe el Rol' })\r\n        }\r\n    } catch (err) {\r\n        console.error(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n}\r\n\r\nroleCtrl.getCount = async(req, res) => {\r\n    try {\r\n        const query = await Role.estimatedDocumentCount()\r\n            // console.log(query)\r\n        if (query >= 0) {\r\n            res.json({ nro_roles: query })\r\n        }\r\n    } catch (err) {\r\n        console.error(err)\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nroleCtrl.createRole = async(req, res) => {\r\n    const { name, description, status, userCreator } = req.body;\r\n    try {\r\n\r\n        const newRole = new Role({ name, description, status });\r\n\r\n        const userFound = await User.find({ username: userCreator })\r\n        newRole.userCreator = userFound.map(a => a._id)\r\n\r\n        const query = await newRole.save();\r\n\r\n        if (query) {\r\n            res.json({ message: 'Rol creado con éxito' });\r\n        }\r\n    } catch (err) {\r\n        console.error(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n}\r\n\r\nroleCtrl.updateRole = async(req, res) => {\r\n    const { roleId } = req.params;\r\n    const { name, description, status } = req.body;\r\n    try {\r\n        const query = await Role.findByIdAndUpdate(roleId, {\r\n            name,\r\n            description,\r\n            status\r\n        });\r\n\r\n        if (query) {\r\n            res.json({ message: 'Rol actualizado con éxito' });\r\n        } else {\r\n            return res.status(404).json({ message: 'Rol no encontrado' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(500).json({ message: err.message });\r\n    }\r\n}\r\n\r\nroleCtrl.deleteRole = async(req, res) => {\r\n    const { roleId } = req.params;\r\n    try {\r\n        const query = await Role.findByIdAndDelete(roleId);\r\n        if (query) {\r\n            res.json({ message: 'Rol eliminado con éxito' });\r\n        } else {\r\n            return res.status(404).json({ message: 'Rol no encontrado' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(500).json({ message: err.message });\r\n    }\r\n}\r\n\r\nexport default roleCtrl"],"file":"role.controller.js"}