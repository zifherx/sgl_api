{"version":3,"sources":["../../src/controllers/role.controller.js"],"names":["roleCtrl","getAll","req","res","Role","find","sort","name","populate","path","select","query","length","json","count","all_roles","status","message","console","log","error","getOneById","roleId","params","findById","getAllByStatus","roles_activos","countAll","countDocuments","nro_roles","createRole","body","description","createdBy","newRole","User","findOne","username","userFound","_id","save","updateRoleById","findByIdAndUpdate","deleteRoleById","findByIdAndDelete"],"mappings":"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","sourcesContent":["import Role from '../models/Role'\r\nimport User from '../models/User'\r\n\r\nconst roleCtrl = {}\r\n\r\nroleCtrl.getAll = async(req, res) => {\r\n    try {\r\n        const query = await Role.find()\r\n        .sort({ name: 1 })\r\n        .populate({\r\n            path: 'createdBy',\r\n            select: 'name username roles',\r\n            populate: {\r\n                path: 'roles',\r\n                select: 'name'\r\n            }\r\n        });\r\n\r\n        if (query.length > 0) {\r\n            res.json({count: query.length, all_roles: query});\r\n        } else {\r\n            return res.status(404).json({ message: 'No existen Roles' })\r\n        }\r\n\r\n    } catch (err) {\r\n        console.log(err)\r\n        return res.status(503).json({ error: err.message })\r\n    }\r\n}\r\n\r\nroleCtrl.getOneById = async(req, res) => {\r\n    const { roleId } = req.params;\r\n    try {\r\n        const query = await Role.findById(roleId)\r\n        .populate({\r\n            path: 'createdBy',\r\n            select: 'name username roles',\r\n            populate: {\r\n                path: 'roles',\r\n                select: 'name'\r\n            }\r\n        });\r\n        if (query) {\r\n            res.json(query);\r\n        } else {\r\n            return res.status(404).json({ message: 'No existe el Rol' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ error: err.message });\r\n    }\r\n}\r\n\r\nroleCtrl.getAllByStatus = async (req, res) => {\r\n    try {\r\n        const query = await Role.find({status: true})\r\n        .sort({name: 1})\r\n        .populate({\r\n            path: 'createdBy',\r\n            select: 'name username roles',\r\n            populate: {\r\n                path: 'roles',\r\n                select: 'name'\r\n            }\r\n        });\r\n\r\n        if(query.length > 0){\r\n            res.json({count: query.length, roles_activos: query});\r\n        }else{\r\n            return res.status(404).json({message: 'No hay roles activos'});\r\n        }\r\n    } catch (err) {\r\n        console.log(err)\r\n        return res.status(503).json({ error: err.message });\r\n    }\r\n}\r\n\r\nroleCtrl.countAll = async(req, res) => {\r\n    try {\r\n        const query = await Role.countDocuments()\r\n        if (query >= 0) {\r\n            res.json({ nro_roles: query })\r\n        }\r\n    } catch (err) {\r\n        console.log(err)\r\n        return res.status(503).json({ error: err.message });\r\n    }\r\n}\r\n\r\nroleCtrl.createRole = async(req, res) => {\r\n    const { name, description, status, createdBy } = req.body;\r\n    try {\r\n\r\n        const newRole = new Role({ name, description, status });\r\n\r\n        const userFound = await User.findOne({ username: createdBy })\r\n        newRole.createdBy = userFound._id;\r\n\r\n        const query = await newRole.save();\r\n\r\n        if (query) {\r\n            res.json({ message: 'Rol creado con éxito' });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ error: err.message });\r\n    }\r\n}\r\n\r\nroleCtrl.updateRoleById = async(req, res) => {\r\n    const { roleId } = req.params;\r\n    const { name, description, status } = req.body;\r\n    try {\r\n        const query = await Role.findByIdAndUpdate(roleId, {\r\n            name,\r\n            description,\r\n            status\r\n        });\r\n\r\n        if (query) {\r\n            res.json({ message: 'Rol actualizado con éxito' });\r\n        } else {\r\n            return res.status(404).json({ message: 'Rol no encontrado' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ error: err.message });\r\n    }\r\n}\r\n\r\nroleCtrl.deleteRoleById = async(req, res) => {\r\n    const { roleId } = req.params;\r\n    try {\r\n        const query = await Role.findByIdAndDelete(roleId);\r\n        if (query) {\r\n            res.json({ message: 'Rol eliminado con éxito' });\r\n        } else {\r\n            return res.status(404).json({ message: 'Rol no encontrado' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ error: err.message });\r\n    }\r\n}\r\n\r\nexport default roleCtrl"],"file":"role.controller.js"}