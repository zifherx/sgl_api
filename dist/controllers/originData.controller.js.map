{"version":3,"sources":["../../src/controllers/originData.controller.js"],"names":["originCtrl","getAll","req","res","OriginData","find","select","sort","name","populate","path","query","length","json","total","all_origins","status","message","console","log","getActivos","total_actives","active_origins","getOneById","originId","params","findById","origin","createOne","body","createdBy","User","findOne","username","userFound","newObj","_id","save","updateOneById","findByIdAndUpdate","deleteOneById","findByIdAndDelete"],"mappings":"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","sourcesContent":["import OriginData from \"../models/OriginData\";\r\nimport User from '../models/User';\r\n\r\nconst originCtrl = {};\r\n\r\noriginCtrl.getAll = async (req, res) => {\r\n\ttry {\r\n\t\tconst query = await OriginData.find()\r\n            .select('name status createdBy')\r\n\t\t\t.sort({ name: 1 })\r\n\t\t\t.populate({\r\n\t\t\t\tpath: \"createdBy\",\r\n\t\t\t\tselect: \"name username\",\r\n\t\t\t});\r\n\r\n\t\tif (query.length > 0) {\r\n\t\t\tres.json({ total: query.length, all_origins: query });\r\n\t\t} else {\r\n\t\t\treturn res.status(404).json({ message: \"No existen orígenes\" });\r\n\t\t}\r\n\t} catch (err) {\r\n\t\tconsole.log(err);\r\n\t\treturn res.status(503).json({ message: err.message });\r\n\t}\r\n};\r\n\r\noriginCtrl.getActivos = async (req, res) => {\r\n\ttry {\r\n\t\tconst query = await OriginData.find({ status: true })\r\n            .select('name status createdBy')\r\n\t\t\t.sort({ name: 1 })\r\n\t\t\t.populate({\r\n\t\t\t\tpath: \"createdBy\",\r\n\t\t\t\tselect: \"name username\",\r\n\t\t\t});\r\n\r\n\t\tif (query.length > 0) {\r\n\t\t\tres.json({ total_actives: query.length, active_origins: query });\r\n\t\t} else {\r\n\t\t\treturn res.status(404).json({ message: \"No existen orígenes activos\" });\r\n\t\t}\r\n\t} catch (err) {\r\n\t\tconsole.log(err);\r\n\t\treturn res.status(503).json({ message: err.message });\r\n\t}\r\n};\r\n\r\noriginCtrl.getOneById = async (req, res) => {\r\n    const {originId} = req.params;\r\n\ttry {\r\n        const query = await OriginData.findById(originId)\r\n            .select('name status createdBy')\r\n\t\t\t.populate({\r\n\t\t\t\tpath: \"createdBy\",\r\n\t\t\t\tselect: \"name username\",\r\n\t\t\t});\r\n\r\n\t\tif (query) {\r\n\t\t\tres.json({ origin: query });\r\n\t\t} else {\r\n\t\t\treturn res.status(404).json({ message: \"No existen el orígen\" });\r\n\t\t}\r\n\t} catch (err) {\r\n\t\tconsole.log(err);\r\n\t\treturn res.status(503).json({ message: err.message });\r\n\t}\r\n};\r\n\r\noriginCtrl.createOne = async (req, res) => {\r\n    const {name, status, createdBy} = req.body;\r\n\ttry {\r\n\t\t\r\n\t\tconst userFound = await User.findOne({ username: createdBy });\r\n\t\tif(!userFound) return res.status(404).json({message: `Colaborador ${ createdBy} no encontrado`});\r\n        \r\n\t\tconst newObj = new OriginData({name, status});\r\n        newObj.createdBy = userFound._id;\r\n\r\n        const query = newObj.save();\r\n\r\n        if(query){\r\n            res.json({message: 'Origen creado con éxito'});\r\n        }\r\n\t} catch (err) {\r\n\t\tconsole.log(err);\r\n\t\treturn res.status(503).json({ message: err.message });\r\n\t}\r\n};\r\n\r\noriginCtrl.updateOneById = async (req, res) => {\r\n    const {originId} = req.params;\r\n    const {name, status} = req.body;\r\n\ttry {\r\n        const query = await OriginData.findByIdAndUpdate(originId,{ name, status});\r\n        if (query) {\r\n\t\t\tres.json({ message: 'Origen actualizado con éxito' });\r\n\t\t} else {\r\n\t\t\treturn res.status(404).json({ message: \"No se encuentra el origen para actualizar\" });\r\n\t\t}\r\n\t} catch (err) {\r\n\t\tconsole.log(err);\r\n\t\treturn res.status(503).json({ message: err.message });\r\n\t}\r\n};\r\n\r\noriginCtrl.deleteOneById = async (req, res) => {\r\n    const {originId} = req.params;\r\n\ttry {\r\n        const query = await OriginData.findByIdAndDelete(originId);\r\n\r\n\t\tif (query) {\r\n\t\t\tres.json({ message: 'Origen eliminado con éxito' });\r\n\t\t} else {\r\n\t\t\treturn res.status(404).json({ message: \"No se encuentra el origen para eliminar\" });\r\n\t\t}\r\n\t} catch (err) {\r\n\t\tconsole.log(err);\r\n\t\treturn res.status(503).json({ message: err.message });\r\n\t}\r\n};\r\n\r\nexport default originCtrl;\r\n"],"file":"originData.controller.js"}