{"version":3,"sources":["../../src/controllers/banco.controller.js"],"names":["bancoCtrl","getAll","req","res","Banco","find","sort","name","populate","path","select","query","length","json","total","entidades","status","message","console","log","error","getOneById","bancoId","params","findById","entidad","getAllByStatus","entidades_activas","createOne","body","createdBy","avatar","file","obj","User","findOne","username","userFound","undefined","_id","location","save","updateOneById","findByIdAndUpdate","deleteOneById","findByIdAndDelete"],"mappings":"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","sourcesContent":["import Banco from '../models/Banco';\r\nimport User from '../models/User';\r\n\r\nconst bancoCtrl = {};\r\n\r\nbancoCtrl.getAll = async (req, res) => {\r\n    try {\r\n        const query = await Banco.find()\r\n        .sort({name: 1})\r\n        .populate({\r\n            path: 'createdBy',\r\n            select: 'name username',\r\n        });\r\n\r\n        if(query.length > 0){\r\n            res.json({total: query.length ,entidades: query});\r\n        }else{\r\n            return res.status(404).json({message: 'No existen Entidades Bancarias'});\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({error: err.message});\r\n    }\r\n}\r\n\r\nbancoCtrl.getOneById = async (req, res) => {\r\n    const {bancoId} = req.params;\r\n    try {\r\n        const query = await Banco.findById(bancoId)\r\n        .populate({\r\n            path: 'createdBy',\r\n            select: 'name username',\r\n        });\r\n\r\n        if(query){\r\n            res.json({entidad: query});\r\n        }else{\r\n            return res.status(404).json({message: 'No existen Entidad Bancaria'});\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({error: err.message});\r\n    }\r\n}\r\n\r\nbancoCtrl.getAllByStatus  = async (req, res) => {\r\n    try {\r\n        const query = await Banco.find({status: true})\r\n        .populate({\r\n            path: 'createdBy',\r\n            select: 'name username'\r\n        });\r\n\r\n        if(query.length > 0){\r\n            res.json({total: query.length ,entidades_activas: query});\r\n        }else{\r\n            return res.status(404).json({message: 'No existen Entidad Bancaria'});\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({error: err.message});\r\n    }\r\n}\r\n\r\nbancoCtrl.createOne = async (req, res) => {\r\n    const {name, status, createdBy} = req.body;\r\n    const avatar = req.file;\r\n    try {\r\n\r\n        let obj = null;\r\n        const userFound = await User.findOne({username: createdBy});\r\n        if(!userFound) return res.status(404).json({message: 'No existe usuario'});\r\n\r\n        if(avatar == undefined || avatar == null){\r\n            obj = new Banco({name, status});\r\n            obj.createdBy = userFound._id;\r\n        }else{\r\n            obj = new Banco({\r\n                name, status, avatar: avatar.location\r\n            })\r\n            obj.createdBy = userFound._id;\r\n        }\r\n\r\n        const query = await obj.save();\r\n\r\n        if(query){\r\n            res.json({message: 'Banco creado con éxito'});\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({error: err});\r\n    }\r\n}\r\n\r\nbancoCtrl.updateOneById = async (req, res) => {\r\n    const {bancoId} = req.params;\r\n    const { name, status } = req.body;\r\n    const avatar = req.file;\r\n    try {\r\n        let query = null;\r\n\r\n        if(avatar == undefined || avatar == null){\r\n            query = await Banco.findByIdAndUpdate(bancoId,{name,status});\r\n        }else{\r\n            query = await Banco.findByIdAndUpdate(bancoId,{\r\n                name,\r\n                status,\r\n                avatar: avatar.location\r\n            });\r\n        }\r\n\r\n        if(query){\r\n            res.json({message: 'Entidad Bancaria actualizada con éxito'});\r\n        }else{\r\n            return res.status(404).json({message: 'Entidad Bancaria no encontrada'});\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({error: err.message});\r\n    }\r\n}\r\n\r\nbancoCtrl.deleteOneById = async (req, res) => {\r\n    const {bancoId} = req.params;\r\n    try {\r\n        const query = await Banco.findByIdAndDelete(bancoId);\r\n\r\n        if(query){\r\n            res.json({message: 'Entidad Bancaria eliminada con éxito'});\r\n        }else{\r\n            return res.status(404).json({message: 'No existen Entidad Bancaria'});\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({error: err.message});\r\n    }\r\n}\r\n\r\nexport default bancoCtrl;"],"file":"banco.controller.js"}