{"version":3,"sources":["../../src/controllers/modelo.controller.js"],"names":["getModelos","req","res","Modelo","find","sort","name","populate","path","select","query","length","json","total_models","all_models","status","message","console","log","getModeloById","modeloId","params","findById","modelo","getModeloByActivo","total_active","active_models","createModelo","body","marca","createdBy","avatar","file","obj","User","findOne","username","userFound","Marca","marcaFound","undefined","_id","location","save","updateModelo","findByIdAndUpdate","deleteModelo","findByIdAndDelete","getCountAll","countDocuments","total","getModelsByMarca","count","models"],"mappings":"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","sourcesContent":["import Modelo from \"../models/Modelo\";\r\nimport User from \"../models/User\";\r\nimport Marca from \"../models/Marca\";\r\n\r\nexport const getModelos = async(req, res) => {\r\n    try {\r\n        const query = await Modelo.find()\r\n            .sort({ name: 'asc' })\r\n            .populate({\r\n                path: 'marca',\r\n                select: 'name avatar'\r\n            })\r\n            .populate({\r\n                path: 'createdBy',\r\n                select: 'name username',\r\n            });\r\n        if (query.length > 0) {\r\n            res.json({total_models: query.length, all_models: query});\r\n        } else {\r\n            return res.status(404).json({ message: 'No existen Modelos' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n}\r\n\r\nexport const getModeloById = async(req, res) => {\r\n    const { modeloId } = req.params;\r\n    try {\r\n        const query = await Modelo.findById(modeloId)\r\n        .populate({\r\n            path: 'marca',\r\n            select: 'name avatar'\r\n        })\r\n        .populate({\r\n            path: 'createdBy',\r\n            select: 'name username',\r\n        });\r\n        if (query) {\r\n            res.json({modelo: query});\r\n        } else {\r\n            return res.status(404).json({ message: 'No existe el Modelo' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n}\r\n\r\nexport const getModeloByActivo = async(req, res) => {\r\n    try {\r\n        const query = await Modelo.find({ status: true })\r\n        .sort({ name: 'asc' })\r\n        .populate({\r\n            path: 'marca',\r\n            select: 'name avatar'\r\n        })\r\n        .populate({\r\n            path: 'createdBy',\r\n            select: 'name username',\r\n        });\r\n        if (query.length > 0) {\r\n            res.json({total_active: query.length, active_models: query});\r\n        } else {\r\n            return res.status(404).json({ message: 'No existen Modelos Activos' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n}\r\n\r\nexport const createModelo = async(req, res) => {\r\n    const { name, marca, status,createdBy } = req.body;\r\n    const avatar = req.file;\r\n    try {\r\n        let obj = null;\r\n        const userFound = await User.findOne({username: createdBy});\r\n        if(!userFound) return res.status(404).json({message: `No existe la usuario ${createdBy}`})\r\n\r\n        const marcaFound = await Marca.findOne({name: marca});        \r\n        if(!marcaFound) return res.status(404).json({message: `No existe la marca ${marca}`})\r\n\r\n        if(avatar == undefined || avatar == null){\r\n            obj = new Modelo({ name, status });\r\n            obj.marca = marcaFound._id;\r\n            obj.createdBy = userFound._id;\r\n        }else{\r\n            obj = new Modelo({ name, status });\r\n            obj.marca = marcaFound._id;\r\n            obj.createdBy = userFound._id;\r\n            obj.avatar = avatar.location;\r\n\r\n        }\r\n        const query = await obj.save();\r\n        if (query) {\r\n            res.json({ message: 'Modelo creado con éxito' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nexport const updateModelo = async(req, res) => {\r\n    const { modeloId } = req.params;\r\n    const { name, marca, status } = req.body;\r\n    const avatar = req.file;\r\n    try {\r\n        let query = null;\r\n        const marcaFound = await Marca.findOne({name: marca});\r\n        if(!marcaFound) return res.status(404).json({message: `No existe la marca ${marca}`})\r\n        \r\n        if(avatar == undefined || avatar == null){\r\n            query = await Modelo.findByIdAndUpdate(modeloId, { \r\n                name,\r\n                status,\r\n                marca: marcaFound._id,\r\n            });\r\n        }else{\r\n            query = await Modelo.findByIdAndUpdate(modeloId, { \r\n                name,\r\n                status,\r\n                marca: marcaFound._id,\r\n                avatar: avatar.location\r\n            });\r\n\r\n        }\r\n        if (query) {\r\n            res.json({ message: 'Modelo actualizado con éxito' });\r\n        } else {\r\n            return res.status(404).json({ message: 'No existe Modelo a actualizar' });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nexport const deleteModelo = async(req, res) => {\r\n    const { modeloId } = req.params;\r\n    try {\r\n        const query = await Modelo.findByIdAndDelete(modeloId);\r\n        if (query) {\r\n            res.json({ message: 'Modelo eliminado con éxito' });\r\n        } else {\r\n            return res.status(404).json({ message: 'No existe Modelo a eliminar' });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nexport const getCountAll = async (req, res) => {\r\n    try {\r\n        const query = await Modelo.find().countDocuments();\r\n        if(query >= 0){\r\n            res.json({total: query});\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n}\r\n\r\nexport const getModelsByMarca = async (req, res) => {\r\n    const {marca} = req.body;\r\n\r\n    try {\r\n        const marcaFound = await Marca.findOne({name: marca});\r\n\r\n        if(!marcaFound) return res.status(404).json({message: `Marca ${marca} no encontrada`});\r\n\r\n        const query = await Modelo.find({marca: marcaFound._id}).sort({name: 1});\r\n\r\n        if(query.length > 0){\r\n            res.json({count: query.length, models: query});\r\n        }else{\r\n            return res.status(404).json({message: `Marca ${marca} no tiene modelos`});\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n}"],"file":"modelo.controller.js"}