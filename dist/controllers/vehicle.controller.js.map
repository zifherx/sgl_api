{"version":3,"sources":["../../src/controllers/vehicle.controller.js"],"names":["vehicleCtrl","createVehicle","req","res","body","cod_tdp","chasis","model","version","createdBy","Chasis","findOne","name","foundChasis","Modelo","foundModelo","User","username","foundEmployee","status","json","message","newVehicle","Vehicle","_id","save","query","console","log","getVehicles","find","select","sort","populate","path","length","total","all_vehicles","getVehicleById","vehicleId","params","findById","vehicle","getVehicleByCodigo","getVehiculeByMarca","marca","match","obj","filter","a","vehicles","getVehiculeByModelo","modelo","updateVehicleById","chasisFound","modelFound","findByIdAndUpdate","deleteVehicleById","findByIdAndDelete","getCountAll","countDocuments","total_vehicles","error"],"mappings":"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","sourcesContent":["import Vehicle from '../models/Vehicle';\r\nimport User from '../models/User';\r\nimport Chasis from '../models/Chasis';\r\nimport Modelo from '../models/Modelo';\r\n\r\nconst vehicleCtrl = {}\r\n\r\nvehicleCtrl.createVehicle = async(req, res) => {\r\n    const { cod_tdp, chasis, model, version, createdBy } = req.body;\r\n\r\n    try {\r\n        const foundChasis = await Chasis.findOne({name: chasis});\r\n        const foundModelo = await Modelo.findOne({name: model});\r\n        const foundEmployee = await User.findOne({ username: createdBy });\r\n\r\n        if(!foundChasis) return res.status(404).json({message: `Chasis ${chasis} no encontrado`});\r\n        if(!foundModelo) return res.status(404).json({message: `Modelo ${model} no encontrado`});\r\n        if(!foundEmployee) return res.status(404).json({message: `Colaborador ${createdBy} no encontrado`});\r\n        \r\n        const newVehicle = new Vehicle({ cod_tdp, version });\r\n\r\n        newVehicle.chasis = foundChasis._id;\r\n        newVehicle.model = foundModelo._id;\r\n        newVehicle.createdBy = foundEmployee._id;\r\n\r\n        const query = await newVehicle.save();\r\n\r\n        if (query) {\r\n            res.json({ message: 'Vehículo creado con éxito' });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n\r\n}\r\n\r\nvehicleCtrl.getVehicles = async(req, res) => {\r\n    try {\r\n        const query = await Vehicle.find()\r\n            .select('chasis model cod_tdp version createdBy')\r\n            .sort({ cod_tdp: 'asc' })\r\n            .populate({\r\n                path: 'chasis',\r\n                select: 'name'\r\n            })\r\n            .populate({\r\n                path: 'model',\r\n                select: 'name marca avatar',\r\n                populate:{\r\n                    path: 'marca',\r\n                    select: 'name avatar'\r\n                }\r\n            })\r\n            .populate({\r\n                path: 'createdBy',\r\n                select: 'name username',\r\n            });\r\n\r\n        if (query.length > 0) {\r\n            res.json({total: query.length, all_vehicles: query});\r\n        } else {\r\n            return res.status(404).json({ message: 'No existen vehículos' });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n}\r\n\r\nvehicleCtrl.getVehicleById = async(req, res) => {\r\n    const { vehicleId } = req.params;\r\n    try {\r\n        const query = await Vehicle.findById(vehicleId)\r\n        .select('chasis model cod_tdp version createdBy')\r\n        .populate({\r\n            path: 'chasis',\r\n            select: 'name'\r\n        })\r\n        .populate({\r\n            path: 'model',\r\n            select: 'name marca avatar',\r\n            populate:{\r\n                path: 'marca',\r\n                select: 'name avatar'\r\n            }\r\n        })\r\n        .populate({\r\n            path: 'createdBy',\r\n            select: 'name username',\r\n        });\r\n        if (query) {\r\n            res.json({vehicle: query});\r\n        } else {\r\n            return res.status(404).json({ message: 'No existe el Vehículo' });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nvehicleCtrl.getVehicleByCodigo = async(req, res) => {\r\n    const { cod_tdp } = req.body;\r\n    try {\r\n        const query = await Vehicle.findOne({ cod_tdp })\r\n        .select('chasis model cod_tdp version createdBy')\r\n        .populate({\r\n            path: 'chasis',\r\n            select: 'name'\r\n        })\r\n        .populate({\r\n            path: 'model',\r\n            select: 'name marca avatar',\r\n            populate:{\r\n                path: 'marca',\r\n                select: 'name avatar'\r\n            }\r\n        })\r\n        .populate({\r\n            path: 'createdBy',\r\n            select: 'name username',\r\n        });\r\n\r\n        if (query) {\r\n            res.json({vehicle: query});\r\n        } else {\r\n            return res.status(404).json({ message: 'No existe vehículo a mostrar' });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nvehicleCtrl.getVehiculeByMarca = async(req, res) => {\r\n    const { marca } = req.body;\r\n    try {\r\n        const query = await Vehicle.find()\r\n        .select('chasis model cod_tdp version createdBy')\r\n        .sort({ cod_tdp: 'asc' })\r\n        .populate({\r\n            path: 'chasis',\r\n            select: 'name'\r\n        })\r\n        .populate({\r\n            path: 'model',\r\n            select: 'name marca avatar',\r\n            populate:{\r\n                path: 'marca',\r\n                select: 'name avatar',\r\n                match: { name: marca }\r\n            }\r\n        })\r\n        .populate({\r\n            path: 'createdBy',\r\n            select: 'name username',\r\n        });\r\n\r\n        const obj = query.filter(a => a.model.marca);\r\n        \r\n        if (obj.length > 0) {\r\n            res.json({total: obj.length, vehicles: obj});\r\n        } else {\r\n            return res.status(404).json({ message: 'No existen Vehículos en esa Marca' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nvehicleCtrl.getVehiculeByModelo = async(req, res) => {\r\n    const { modelo } = req.body;\r\n\r\n    try {\r\n        const query = await Vehicle.find()\r\n        .select('chasis model cod_tdp version createdBy')\r\n        .sort({ cod_tdp: 'asc' })\r\n        .populate({\r\n            path: 'chasis',\r\n            select: 'name'\r\n        })\r\n        .populate({\r\n            path: 'model',\r\n            select: 'name marca avatar',\r\n            match: { name: modelo },\r\n            populate:{\r\n                path: 'marca',\r\n                select: 'name avatar'\r\n            }\r\n        })\r\n        .populate({\r\n            path: 'createdBy',\r\n            select: 'name username',\r\n        });\r\n\r\n        // console.log(query);\r\n\r\n        const obj = query.filter(a => a.model);\r\n        // console.log(obj);\r\n\r\n        if (obj.length > 0) {\r\n            res.json({total: obj.length, vehicles: obj});\r\n        } else {\r\n            return res.status(404).json({ message: 'No existen Vehículos en ese Modelo' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nvehicleCtrl.updateVehicleById = async(req, res) => {\r\n    const { vehicleId } = req.params;\r\n    const { chasis, model, cod_tdp, version } = req.body;\r\n\r\n    try {\r\n        const chasisFound = await Chasis.findOne({name: chasis});\r\n        const modelFound = await Modelo.findOne({name: model});\r\n\r\n        if(!chasisFound) return res.status(404).json({message: `No existe chasis ${chasis}`});\r\n        if(!modelFound) return res.status(404).json({message: `No existe modelo ${model}`});\r\n\r\n        const query = await Vehicle.findByIdAndUpdate(vehicleId, { \r\n            chasis: chasisFound._id,\r\n            model: modelFound._id,\r\n            cod_tdp,\r\n            version\r\n        });\r\n        if (query) {\r\n            res.json({ message: 'Vehículo actualizado con éxito' });\r\n        } else {\r\n            return res.status(404).json({ message: 'No existe Vehículo a actualizar' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nvehicleCtrl.deleteVehicleById = async(req, res) => {\r\n    const { vehicleId } = req.params;\r\n    try {\r\n        const query = await Vehicle.findByIdAndDelete(vehicleId);\r\n        if (query) {\r\n            res.json({ message: 'Vehículo eliminado con éxito' });\r\n        } else {\r\n            return res.status(404).json({ message: 'No existe Vehículo a eliminar' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nvehicleCtrl.getCountAll = async(req, res) => {\r\n    try {\r\n        const query = await Vehicle.countDocuments();\r\n\r\n        if (query >= 0) {\r\n            res.json({ total_vehicles: query }); \r\n        }\r\n    } catch (err) {\r\n        console.error(err)\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nexport default vehicleCtrl;"],"file":"vehicle.controller.js"}