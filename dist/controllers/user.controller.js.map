{"version":3,"sources":["../../src/controllers/user.controller.js"],"names":["userCtrl","cloudinary","config","cloud_name","process","env","CLOUDINARY_CLOUD_NAME","api_key","CLOUDINARY_API_KEY","api_secret","CLOUDINARY_API_SECRET","getAll","req","res","User","find","sort","name","populate","query","length","json","status","message","console","error","getOne","userId","params","findById","createUser","body","username","password","email","cellphone","titlePerfil","rutaPerfil","description","roles","userCreator","encryptPassword","newUser","userFound","map","a","_id","Role","$in","foundRole","b","findOne","rol","save","updateUser","roleFound","findByIdAndUpdate","updateProfile","data_image","file","uploader","upload","path","response","secure_url","public_id","fs","unlink","deleteUser","findByIdAndRemove","getCountAll","estimatedDocumentCount","nro_users","getCountByStatus","where","countDocuments","nro_users_status","getCountByOnline","online","nro_users_online"],"mappings":"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","sourcesContent":["import Role from '../models/Role'\r\nimport User from '../models/User'\r\nimport cloudinary from 'cloudinary'\r\nimport fs from 'fs-extra'\r\n\r\nconst userCtrl = {};\r\n\r\ncloudinary.config({\r\n    cloud_name: process.env.CLOUDINARY_CLOUD_NAME,\r\n    api_key: process.env.CLOUDINARY_API_KEY,\r\n    api_secret: process.env.CLOUDINARY_API_SECRET,\r\n    // secure: true\r\n});\r\n\r\n\r\nuserCtrl.getAll = async(req, res) => {\r\n    try {\r\n        const query = await User.find().sort({ name: 'asc' }).populate('roles userCreator');\r\n\r\n        if (query.length > 0) {\r\n            res.json(query)\r\n        } else {\r\n            return res.status(404).json({ message: 'No existen Usuarios' })\r\n        }\r\n\r\n    } catch (err) {\r\n        console.error(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nuserCtrl.getOne = async(req, res) => {\r\n    const { userId } = req.params;\r\n    try {\r\n        const query = await User.findById(userId).populate('roles userCreator');\r\n        if (query) {\r\n            res.json(query)\r\n        } else {\r\n            return res.status(404).json({ message: 'No existe el Usuario' })\r\n        }\r\n\r\n    } catch (err) {\r\n        console.error(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nuserCtrl.createUser = async(req, res) => {\r\n    const { name, username, password, email, cellphone, titlePerfil, rutaPerfil, description, roles, userCreator } = req.body;\r\n    try {\r\n        const newUser = new User({\r\n            name,\r\n            username,\r\n            password: await User.encryptPassword(password),\r\n            email,\r\n            cellphone,\r\n            titlePerfil,\r\n            rutaPerfil,\r\n            description\r\n        });\r\n\r\n        const userFound = await User.find({ username: userCreator })\r\n        newUser.userCreator = userFound.map(a => a._id)\r\n\r\n        if (roles) {\r\n            const foundRole = await Role.find({ name: { $in: roles } })\r\n            newUser.roles = foundRole.map(b => b._id);\r\n        } else {\r\n            const rol = await Role.findOne({ name: 'Usuario' });\r\n            newUser.roles = [rol._id];\r\n        }\r\n\r\n        const query = await newUser.save();\r\n\r\n        if (query) {\r\n            res.json({ message: 'Usuario creado con éxito' });\r\n        }\r\n    } catch (err) {\r\n        console.error(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n}\r\n\r\nuserCtrl.updateUser = async(req, res) => {\r\n    const { userId } = req.params;\r\n    const { roles, status, userCreator } = req.body;\r\n    try {\r\n        const roleFound = await Role.find({ name: roles })\r\n        const userFound = await User.find({ username: userCreator })\r\n\r\n        const query = await User.findByIdAndUpdate(userId, {\r\n            roles: roleFound.map(a => a._id),\r\n            status,\r\n            userCreator: userFound.map(b => b._id)\r\n        });\r\n        if (query) {\r\n            res.json({ message: 'Usuario actualizado con éxito' });\r\n        } else {\r\n            return res.status(404).json({ message: 'Usuario no encontrado' })\r\n        }\r\n    } catch (err) {\r\n        console.error(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n}\r\n\r\nuserCtrl.updateProfile = async(req, res) => {\r\n    const { userId, email, cellphone, description } = req.body\r\n    const data_image = req.file\r\n    try {\r\n        //Cloudinary\r\n        // console.log(data_image);\r\n        const response = await cloudinary.uploader.upload(data_image.path);\r\n        const query = await User.findByIdAndUpdate(userId, { email, cellphone, description, rutaPerfil: response.secure_url, titlePerfil: response.public_id });\r\n        // console.log(query)\r\n\r\n        if (query) {\r\n            await fs.unlink(data_image.path) //Eliminando ruta del servidor\r\n            res.json({ message: 'Perfil actualizado con éxito' })\r\n        } else {\r\n            return res.status(404).json({ message: 'Perfil no encontrado' })\r\n        }\r\n    } catch (err) {\r\n        console.error(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n}\r\n\r\nuserCtrl.deleteUser = async(req, res) => {\r\n    const { userId } = req.params;\r\n    try {\r\n        const query = await User.findByIdAndRemove(userId);\r\n\r\n        if (query) {\r\n            res.json({ message: 'Usuario eliminado con éxito' });\r\n        } else {\r\n            return res.status(404).json({ message: 'Usuario no encontrado' })\r\n        }\r\n    } catch (err) {\r\n        console.error(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n}\r\n\r\nuserCtrl.getCountAll = async(req, res) => {\r\n    try {\r\n        const query = await User.estimatedDocumentCount()\r\n        if (query >= 0) {\r\n            res.json({ nro_users: query })\r\n        }\r\n    } catch (err) {\r\n        console.error(err)\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nuserCtrl.getCountByStatus = async(req, res) => {\r\n    const { status } = req.body\r\n    try {\r\n        const query = await User.where({ status }).countDocuments()\r\n        if (query >= 0) {\r\n            res.json({ nro_users_status: query })\r\n        }\r\n    } catch (err) {\r\n        console.error(err)\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nuserCtrl.getCountByOnline = async(req, res) => {\r\n    const { online } = req.body\r\n    try {\r\n        const query = await User.where({ online }).countDocuments()\r\n        if (query >= 0) {\r\n            res.json({ nro_users_online: query })\r\n        }\r\n    } catch (err) {\r\n        console.error(err)\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nexport default userCtrl;"],"file":"user.controller.js"}