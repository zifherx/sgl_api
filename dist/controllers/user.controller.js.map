{"version":3,"sources":["../../src/controllers/user.controller.js"],"names":["userCtrl","getAll","req","res","User","find","select","sort","name","populate","path","query","length","json","total_count","all_users","status","message","console","log","getOneById","userId","params","findById","founded","error","createUser","body","username","password","sucursal","roles","createdBy","encryptPassword","newUser","findOne","userFound","_id","Sucursal","sucursalFound","Role","$in","foundRole","map","b","rol","save","updateUser","email","cellphone","roleFound","findByIdAndUpdate","updateProfile","description","avatar","file","undefined","location","deleteUser","findByIdAndDelete","getCountAll","countDocuments","nro_users","getAllByStatus","count_activos","users_activos","getCountByOnline","online","where","nro_users_online","uploadPhoto"],"mappings":"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","sourcesContent":["import Role from \"../models/Role\";\r\nimport User from \"../models/User\";\r\nimport Sucursal from '../models/Sucursal';\r\n\r\nconst userCtrl = {};\r\n\r\nuserCtrl.getAll = async (req, res) => {\r\n\ttry {\r\n\t\tconst query = await User.find()\r\n\t\t\t.select(\"-password\")\r\n\t\t\t.sort({ name: 1 })\r\n\t\t\t.populate({\r\n\t\t\t\tpath: \"roles\",\r\n\t\t\t\tselect: \"name\",\r\n\t\t\t})\r\n\t\t\t.populate({\r\n\t\t\t\tpath: 'sucursal',\r\n\t\t\t\tselect: 'name'\r\n\t\t\t})\r\n\t\t\t.populate({\r\n\t\t\t\tpath: \"createdBy\",\r\n\t\t\t\tselect: \"name username\",\r\n\t\t\t});\r\n\r\n\t\tif (query.length > 0) {\r\n\t\t\tres.json({ total_count: query.length, all_users: query });\r\n\t\t} else {\r\n\t\t\treturn res.status(404).json({ message: \"No existen Usuarios\" });\r\n\t\t}\r\n\t} catch (err) {\r\n\t\tconsole.log(err);\r\n\t\treturn res.status(503).json({ message: err.message });\r\n\t}\r\n};\r\n\r\nuserCtrl.getOneById = async (req, res) => {\r\n\tconst { userId } = req.params;\r\n\ttry {\r\n\t\tconst query = await User.findById(userId)\r\n\t\t\t.select(\"-password\")\r\n\t\t\t.populate({\r\n\t\t\t\tpath: \"roles\",\r\n\t\t\t\tselect: \"name\",\r\n\t\t\t})\r\n\t\t\t.populate({\r\n\t\t\t\tpath: 'sucursal',\r\n\t\t\t\tselect: 'name'\r\n\t\t\t})\r\n\t\t\t.populate({\r\n\t\t\t\tpath: \"createdBy\",\r\n\t\t\t\tselect: \"name username\",\r\n\t\t\t});\r\n\r\n\t\tif (query) {\r\n\t\t\tres.json({ founded: query });\r\n\t\t} else {\r\n\t\t\treturn res.status(404).json({ message: \"No existe el Usuario\" });\r\n\t\t}\r\n\t} catch (err) {\r\n\t\tconsole.log(err);\r\n\t\treturn res.status(503).json({ error: err.message });\r\n\t}\r\n};\r\n\r\nuserCtrl.createUser = async (req, res) => {\r\n\tconst { name, username, password, sucursal, roles, createdBy } = req.body;\r\n\ttry {\r\n\t\tconst newUser = new User({\r\n\t\t\tname,\r\n\t\t\tusername,\r\n\t\t\tpassword: await User.encryptPassword(password),\r\n\t\t});\r\n\r\n\t\tconst userFound = await User.findOne({ username: createdBy });\r\n\t\tnewUser.createdBy = userFound._id;\r\n\r\n\t\tconst sucursalFound = await Sucursal.findOne({name: sucursal});\r\n\t\tnewUser.sucursal = sucursalFound._id;\r\n\r\n\t\tif (roles) {\r\n\t\t\tconst foundRole = await Role.find({ name: { $in: roles } });\r\n\t\t\tnewUser.roles = foundRole.map((b) => b._id);\r\n\t\t} else {\r\n\t\t\tconst rol = await Role.findOne({ name: \"Usuario\" });\r\n\t\t\tnewUser.roles = [rol._id];\r\n\t\t}\r\n\r\n\t\tconst query = await newUser.save();\r\n\r\n\t\tif (query) {\r\n\t\t\tres.json({ message: \"Usuario creado con éxito\" });\r\n\t\t}\r\n\t} catch (err) {\r\n\t\tconsole.log(err);\r\n\t\treturn res.status(503).json({ error: err.message });\r\n\t}\r\n};\r\n\r\nuserCtrl.updateUser = async (req, res) => {\r\n\tconst { userId } = req.params;\r\n\tconst { name,username, roles,email, cellphone, sucursal, status } = req.body;\r\n\ttry {\r\n\t\tconst roleFound = await Role.findOne({ name: roles });\r\n\t\tconst sucursalFound = await Sucursal.findOne({name: sucursal});\r\n\t\t\r\n        if(!sucursalFound) return res.status(404).json({message: `Sucursal ${sucursal} no encontrada`});\r\n        if(!roleFound) return res.status(404).json({message: `No existe el rol ${roles}`});\r\n\r\n\t\tconst query = await User.findByIdAndUpdate(userId, {\r\n            name,\r\n\t\t\tusername,\r\n\t\t\temail,\r\n\t\t\tcellphone,\r\n\t\t\tsucursal: sucursalFound._id,\r\n\t\t\troles: roleFound._id,\r\n\t\t\tstatus,\r\n\t\t});\r\n\t\tif (query) {\r\n\t\t\tres.json({ message: \"Usuario actualizado con éxito\" });\r\n\t\t} else {\r\n\t\t\treturn res.status(404).json({ message: \"Usuario no encontrado\" });\r\n\t\t}\r\n\t} catch (err) {\r\n\t\tconsole.log(err);\r\n\t\treturn res.status(503).json({ message: err.message });\r\n\t}\r\n};\r\n\r\nuserCtrl.updateProfile = async (req, res) => {\r\n\tconst { userId } = req.params;\r\n\tconst { email, cellphone, description } = req.body;\r\n\tconst avatar = req.file;\r\n\tlet query = null;\r\n\ttry {\r\n\t\tif(avatar == null || avatar == undefined){\r\n\t\t\tquery = await User.findByIdAndUpdate(userId, {\r\n\t\t\t\temail,\r\n\t\t\t\tcellphone,\r\n\t\t\t\tdescription\r\n\t\t\t});\r\n\t\t}else{\r\n\t\t\tquery = await User.findByIdAndUpdate(userId, {\r\n\t\t\t\temail,\r\n\t\t\t\tcellphone,\r\n\t\t\t\tdescription,\r\n\t\t\t\tavatar: avatar.location,\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tif (query) {\r\n\t\t\tres.json({ message: \"Perfil actualizado con éxito\" });\r\n\t\t} else {\r\n\t\t\treturn res.status(404).json({ message: \"Perfil no encontrado\" });\r\n\t\t}\r\n\t} catch (err) {\r\n\t\tconsole.log(err);\r\n\t\treturn res.status(503).json({ error: err.message });\r\n\t}\r\n};\r\n\r\nuserCtrl.deleteUser = async (req, res) => {\r\n\tconst { userId } = req.params;\r\n\ttry {\r\n\t\tconst query = await User.findByIdAndDelete(userId);\r\n\r\n\t\tif (query) {\r\n\t\t\tres.json({ message: \"Usuario eliminado con éxito\" });\r\n\t\t} else {\r\n\t\t\treturn res.status(404).json({ message: \"Usuario no encontrado\" });\r\n\t\t}\r\n\t} catch (err) {\r\n\t\tconsole.log(err);\r\n\t\treturn res.status(503).json({ error: err.message });\r\n\t}\r\n};\r\n\r\nuserCtrl.getCountAll = async (req, res) => {\r\n\ttry {\r\n\t\tconst query = await User.countDocuments();\r\n\t\tif (query >= 0) {\r\n\t\t\tres.json({ nro_users: query });\r\n\t\t}\r\n\t} catch (err) {\r\n\t\tconsole.log(err);\r\n\t\treturn res.status(503).json({ error: err.message });\r\n\t}\r\n};\r\n\r\nuserCtrl.getAllByStatus = async (req, res) => {\r\n\ttry {\r\n\t\tconst query = await User.find({ status: true })\r\n\t\t\t.select(\"-password\")\r\n\t\t\t.sort({ name: 1 })\r\n\t\t\t.populate({\r\n\t\t\t\tpath: \"roles\",\r\n\t\t\t\tselect: \"name\",\r\n\t\t\t})\r\n\t\t\t.populate({\r\n\t\t\t\tpath: \"createdBy\",\r\n\t\t\t\tselect: \"name username\",\r\n\t\t\t});\r\n\t\tif (query.length > 0) {\r\n\t\t\tres.json({ count_activos: query.length, users_activos: query });\r\n\t\t}else{\r\n            return res.status(404).json({message: 'No existen usuarios activos'});\r\n        }\r\n\t} catch (err) {\r\n\t\tconsole.log(err);\r\n\t\treturn res.status(503).json({ error: err.message });\r\n\t}\r\n};\r\n\r\nuserCtrl.getCountByOnline = async (req, res) => {\r\n\tconst { online } = req.body;\r\n\ttry {\r\n\t\tconst query = await User.where({ online }).countDocuments();\r\n\t\tif (query >= 0) {\r\n\t\t\tres.json({ nro_users_online: query });\r\n\t\t}\r\n\t} catch (err) {\r\n\t\tconsole.log(err);\r\n\t\treturn res.status(503).json({ error: err.message });\r\n\t}\r\n};\r\n\r\nuserCtrl.uploadPhoto = async (req, res) =>{\r\n\tconst { userId } = req.params;\r\n\tconst avatar = req.file;\r\n\r\n\tlet query = null;\r\n\r\n\ttry {\r\n\t\tif(avatar == null || avatar == undefined){\r\n\t\t\treturn res.status(404).json({message: 'No se ha cargado avatar'});\r\n\t\t}else{\r\n\t\t\tquery = await User.findByIdAndUpdate(userId, {\r\n\t\t\t\tavatar: avatar.location,\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tif (query) {\r\n\t\t\tres.json({ message: \"Avatar subido con éxito\" });\r\n\t\t} else {\r\n\t\t\treturn res.status(404).json({ message: \"Perfil no encontrado\" });\r\n\t\t}\r\n\t} catch (err) {\r\n\t\tconsole.log(err);\r\n\t\treturn res.status(503).json({ error: err.message });\r\n\t}\r\n}\r\n\r\nexport default userCtrl;\r\n"],"file":"user.controller.js"}