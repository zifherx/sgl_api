{"version":3,"sources":["../../src/controllers/user.controller.js"],"names":["userCtrl","getAll","req","res","User","find","select","sort","name","populate","path","query","length","json","total_count","all_users","status","message","console","log","getOneById","userId","params","findById","founded","error","createUser","body","username","email","cellphone","password","sucursal","marca","roles","createdBy","encryptPassword","newUser","findOne","userFound","_id","Sucursal","sucursalFound","Marca","marcaFound","map","a","Role","$in","foundRole","b","rol","save","updateUser","roleFound","findByIdAndUpdate","updateProfile","description","avatar","file","undefined","location","deleteUser","findByIdAndDelete","getCountAll","countDocuments","nro_users","getAllByStatus","count_activos","users_activos","getCountByOnline","online","where","nro_users_online","uploadPhoto"],"mappings":"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","sourcesContent":["import Role from \"../models/Role\";\r\nimport User from \"../models/User\";\r\nimport Sucursal from '../models/Sucursal';\r\nimport Marca from '../models/Marca';\r\n\r\nconst userCtrl = {};\r\n\r\nuserCtrl.getAll = async (req, res) => {\r\n\ttry {\r\n\t\tconst query = await User.find()\r\n\t\t\t.select(\"-password\")\r\n\t\t\t.sort({ name: 1 })\r\n\t\t\t.populate({\r\n\t\t\t\tpath: \"roles\",\r\n\t\t\t\tselect: \"name\",\r\n\t\t\t})\r\n\t\t\t.populate({\r\n\t\t\t\tpath: 'sucursal',\r\n\t\t\t\tselect: 'name'\r\n\t\t\t})\r\n\t\t\t.populate({\r\n\t\t\t\tpath: 'marca',\r\n\t\t\t\tselect: 'name avatar'\r\n\t\t\t})\r\n\t\t\t.populate({\r\n\t\t\t\tpath: \"createdBy\",\r\n\t\t\t\tselect: \"name username\",\r\n\t\t\t});\r\n\r\n\t\tif (query.length > 0) {\r\n\t\t\tres.json({ total_count: query.length, all_users: query });\r\n\t\t} else {\r\n\t\t\treturn res.status(404).json({ message: \"No existen Usuarios\" });\r\n\t\t}\r\n\t} catch (err) {\r\n\t\tconsole.log(err);\r\n\t\treturn res.status(503).json({ message: err.message });\r\n\t}\r\n};\r\n\r\nuserCtrl.getOneById = async (req, res) => {\r\n\tconst { userId } = req.params;\r\n\ttry {\r\n\t\tconst query = await User.findById(userId)\r\n\t\t\t.select(\"-password\")\r\n\t\t\t.populate({\r\n\t\t\t\tpath: \"roles\",\r\n\t\t\t\tselect: \"name\",\r\n\t\t\t})\r\n\t\t\t.populate({\r\n\t\t\t\tpath: 'sucursal',\r\n\t\t\t\tselect: 'name'\r\n\t\t\t})\r\n\t\t\t.populate({\r\n\t\t\t\tpath: 'marca',\r\n\t\t\t\tselect: 'name avatar'\r\n\t\t\t})\r\n\t\t\t.populate({\r\n\t\t\t\tpath: \"createdBy\",\r\n\t\t\t\tselect: \"name username\",\r\n\t\t\t});\r\n\r\n\t\tif (query) {\r\n\t\t\tres.json({ founded: query });\r\n\t\t} else {\r\n\t\t\treturn res.status(404).json({ message: \"No existe el Usuario\" });\r\n\t\t}\r\n\t} catch (err) {\r\n\t\tconsole.log(err);\r\n\t\treturn res.status(503).json({ error: err.message });\r\n\t}\r\n};\r\n\r\nuserCtrl.createUser = async (req, res) => {\r\n\tconst { name, username,email, cellphone, password, sucursal, marca, roles, createdBy } = req.body;\r\n\ttry {\r\n\t\tconst newUser = new User({\r\n\t\t\tname,\r\n\t\t\tusername,\r\n\t\t\temail, \r\n\t\t\tcellphone,\r\n\t\t\tpassword: await User.encryptPassword(password),\r\n\t\t});\r\n\r\n\t\tconst userFound = await User.findOne({ username: createdBy });\r\n\t\tnewUser.createdBy = userFound._id;\r\n\r\n\t\tconst sucursalFound = await Sucursal.findOne({name: sucursal});\r\n\t\tif(!sucursalFound) return res.status(404).json({message: `Sucursal ${sucursal} no encontrada`})\r\n\t\tnewUser.sucursal = sucursalFound._id;\r\n\t\t\r\n\t\tconst marcaFound = await Marca.find({name: marca});\r\n\t\tif(!marcaFound) return res.status(404).json({message: `Marca ${marca} no encontrada`})\r\n\t\tnewUser.marca = marcaFound.map(a => a._id);\r\n\r\n\t\tif (roles) {\r\n\t\t\tconst foundRole = await Role.find({ name: { $in: roles } });\r\n\t\t\tnewUser.roles = foundRole.map((b) => b._id);\r\n\t\t} else {\r\n\t\t\tconst rol = await Role.findOne({ name: \"Usuario\" });\r\n\t\t\tnewUser.roles = [rol._id];\r\n\t\t}\r\n\r\n\t\tconst query = await newUser.save();\r\n\r\n\t\tif (query) {\r\n\t\t\tres.json({ message: \"Usuario creado con éxito\" });\r\n\t\t}\r\n\t} catch (err) {\r\n\t\tconsole.log(err);\r\n\t\treturn res.status(503).json({ error: err.message });\r\n\t}\r\n};\r\n\r\nuserCtrl.updateUser = async (req, res) => {\r\n\tconst { userId } = req.params;\r\n\tconst { name,username, roles,email, cellphone,marca, sucursal, status } = req.body;\r\n\t// console.log(req.body);\r\n\ttry {\r\n\t\tconst roleFound = await Role.find({ name: {$in: roles} });\r\n\t\tconst sucursalFound = await Sucursal.findOne({name: sucursal});\r\n\t\t\r\n        if(!sucursalFound) return res.status(404).json({message: `Sucursal ${sucursal} no encontrada`});\r\n        if(!roleFound) return res.status(404).json({message: `No existe el rol ${roles}`});\r\n\r\n\t\tconst marcaFound = await Marca.find({name: marca});\r\n\t\tif(!marcaFound) return res.status(404).json({message: `Marca ${marca} no encontrada`})\r\n\r\n\t\tconst query = await User.findByIdAndUpdate(userId, {\r\n            name,\r\n\t\t\tusername,\r\n\t\t\temail,\r\n\t\t\tcellphone,\r\n\t\t\tsucursal: sucursalFound._id,\r\n\t\t\tmarca: marcaFound.map(a => a._id),\r\n\t\t\troles: roleFound.map(a => a._id),\r\n\t\t\tstatus,\r\n\t\t});\r\n\t\tif (query) {\r\n\t\t\tres.json({ message: \"Usuario actualizado con éxito\" });\r\n\t\t} else {\r\n\t\t\treturn res.status(404).json({ message: \"Usuario no encontrado\" });\r\n\t\t}\r\n\t} catch (err) {\r\n\t\tconsole.log(err);\r\n\t\treturn res.status(503).json({ message: err.message });\r\n\t}\r\n};\r\n\r\nuserCtrl.updateProfile = async (req, res) => {\r\n\tconst { userId } = req.params;\r\n\tconst { email, cellphone, description } = req.body;\r\n\tconst avatar = req.file;\r\n\tlet query = null;\r\n\ttry {\r\n\t\tif(avatar == null || avatar == undefined){\r\n\t\t\tquery = await User.findByIdAndUpdate(userId, {\r\n\t\t\t\temail,\r\n\t\t\t\tcellphone,\r\n\t\t\t\tdescription\r\n\t\t\t});\r\n\t\t}else{\r\n\t\t\tquery = await User.findByIdAndUpdate(userId, {\r\n\t\t\t\temail,\r\n\t\t\t\tcellphone,\r\n\t\t\t\tdescription,\r\n\t\t\t\tavatar: avatar.location,\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tif (query) {\r\n\t\t\tres.json({ message: \"Perfil actualizado con éxito\" });\r\n\t\t} else {\r\n\t\t\treturn res.status(404).json({ message: \"Perfil no encontrado\" });\r\n\t\t}\r\n\t} catch (err) {\r\n\t\tconsole.log(err);\r\n\t\treturn res.status(503).json({ error: err.message });\r\n\t}\r\n};\r\n\r\nuserCtrl.deleteUser = async (req, res) => {\r\n\tconst { userId } = req.params;\r\n\ttry {\r\n\t\tconst query = await User.findByIdAndDelete(userId);\r\n\r\n\t\tif (query) {\r\n\t\t\tres.json({ message: \"Usuario eliminado con éxito\" });\r\n\t\t} else {\r\n\t\t\treturn res.status(404).json({ message: \"Usuario no encontrado\" });\r\n\t\t}\r\n\t} catch (err) {\r\n\t\tconsole.log(err);\r\n\t\treturn res.status(503).json({ error: err.message });\r\n\t}\r\n};\r\n\r\nuserCtrl.getCountAll = async (req, res) => {\r\n\ttry {\r\n\t\tconst query = await User.countDocuments();\r\n\t\tif (query >= 0) {\r\n\t\t\tres.json({ nro_users: query });\r\n\t\t}\r\n\t} catch (err) {\r\n\t\tconsole.log(err);\r\n\t\treturn res.status(503).json({ error: err.message });\r\n\t}\r\n};\r\n\r\nuserCtrl.getAllByStatus = async (req, res) => {\r\n\ttry {\r\n\t\tconst query = await User.find({ status: true })\r\n\t\t\t.select(\"-password\")\r\n\t\t\t.sort({ name: 1 })\r\n\t\t\t.populate({\r\n\t\t\t\tpath: \"roles\",\r\n\t\t\t\tselect: \"name\",\r\n\t\t\t})\r\n\t\t\t.populate({\r\n\t\t\t\tpath: \"createdBy\",\r\n\t\t\t\tselect: \"name username\",\r\n\t\t\t});\r\n\t\tif (query.length > 0) {\r\n\t\t\tres.json({ count_activos: query.length, users_activos: query });\r\n\t\t}else{\r\n            return res.status(404).json({message: 'No existen usuarios activos'});\r\n        }\r\n\t} catch (err) {\r\n\t\tconsole.log(err);\r\n\t\treturn res.status(503).json({ error: err.message });\r\n\t}\r\n};\r\n\r\nuserCtrl.getCountByOnline = async (req, res) => {\r\n\tconst { online } = req.body;\r\n\ttry {\r\n\t\tconst query = await User.where({ online }).countDocuments();\r\n\t\tif (query >= 0) {\r\n\t\t\tres.json({ nro_users_online: query });\r\n\t\t}\r\n\t} catch (err) {\r\n\t\tconsole.log(err);\r\n\t\treturn res.status(503).json({ error: err.message });\r\n\t}\r\n};\r\n\r\nuserCtrl.uploadPhoto = async (req, res) =>{\r\n\tconst { userId } = req.params;\r\n\tconst avatar = req.file;\r\n\r\n\tlet query = null;\r\n\r\n\ttry {\r\n\t\tif(avatar == null || avatar == undefined){\r\n\t\t\treturn res.status(404).json({message: 'No se ha cargado avatar'});\r\n\t\t}else{\r\n\t\t\tquery = await User.findByIdAndUpdate(userId, {\r\n\t\t\t\tavatar: avatar.location,\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tif (query) {\r\n\t\t\tres.json({ message: \"Avatar subido con éxito\" });\r\n\t\t} else {\r\n\t\t\treturn res.status(404).json({ message: \"Perfil no encontrado\" });\r\n\t\t}\r\n\t} catch (err) {\r\n\t\tconsole.log(err);\r\n\t\treturn res.status(503).json({ error: err.message });\r\n\t}\r\n}\r\n\r\nexport default userCtrl;\r\n"],"file":"user.controller.js"}