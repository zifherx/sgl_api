{"version":3,"sources":["../../src/controllers/estado.controller.js"],"names":["estadoCtrl","getAll","req","res","Estado","find","populate","path","select","query","length","json","total","all_status","status","message","console","log","getActivos","sort","value","total_active","active_status","getOneById","estadoId","params","findById","createOne","body","name","createdBy","User","findOne","username","userFound","newObj","_id","save","updateOneById","findByIdAndUpdate","deleteOneById","findByIdAndDelete"],"mappings":"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","sourcesContent":["import Estado from \"../models/Estado\";\r\nimport User from \"../models/User\";\r\n\r\nconst estadoCtrl = {};\r\n\r\nestadoCtrl.getAll = async (req, res) => {\r\n\ttry {\r\n\t\tconst query = await Estado.find()\r\n        .populate({\r\n\t\t\tpath: \"createdBy\",\r\n\t\t\tselect: \"name username\",\r\n\t\t});\r\n\r\n\t\tif (query.length > 0) {\r\n\t\t\tres.json({ total: query.length, all_status: query });\r\n\t\t} else {\r\n\t\t\treturn res.status(404).json({ message: \"No existen estados\" });\r\n\t\t}\r\n\t} catch (err) {\r\n\t\tconsole.log(err);\r\n\t\treturn res.status(503).json({ message: err.message });\r\n\t}\r\n};\r\n\r\nestadoCtrl.getActivos = async (req, res) => {\r\n\ttry {\r\n\t\tconst query = await Estado.find({ status: true })\r\n        .sort({value: 1})\r\n        .populate({\r\n\t\t\tpath: \"createdBy\",\r\n\t\t\tselect: \"name username\",\r\n\t\t});\r\n\r\n\t\tif (query.length > 0) {\r\n\t\t\tres.json({ total_active: query.length, active_status: query });\r\n\t\t} else {\r\n\t\t\treturn res.status(404).json({ message: \"No existen estados activos\" });\r\n\t\t}\r\n\t} catch (err) {\r\n\t\tconsole.log(err);\r\n\t\treturn res.status(503).json({ message: err.message });\r\n\t}\r\n};\r\n\r\nestadoCtrl.getOneById = async (req, res) => {\r\n\tconst { estadoId } = req.params;\r\n\ttry {\r\n\t\tconst query = await Estado.findById(estadoId)\r\n        .populate({\r\n\t\t\tpath: \"createdBy\",\r\n\t\t\tselect: \"name username\",\r\n\t\t});\r\n\r\n\t\tif (query) {\r\n\t\t\tres.json({ status: query });\r\n\t\t} else {\r\n\t\t\treturn res.status(404).json({ message: \"No se encontró el estado\" });\r\n\t\t}\r\n\t} catch (err) {\r\n\t\tconsole.log(err);\r\n\t\treturn res.status(503).json({ message: err.message });\r\n\t}\r\n};\r\n\r\nestadoCtrl.createOne = async (req, res) => {\r\n\tconst { name, value, status, createdBy } = req.body;\r\n\ttry {\r\n\t\tconst userFound = await User.findOne({ username: createdBy });\r\n\t\tif (!userFound) return res.status(404).json({ message: `Colaborador ${createdBy} no encontrado` });\r\n\r\n\t\tconst newObj = new Estado({ name, value, status });\r\n\t\tnewObj.createdBy = userFound._id;\r\n\r\n\t\tconst query = await newObj.save();\r\n\r\n\t\tif (query) {\r\n\t\t\tres.json({ message: \"Estado creado con éxito\" });\r\n\t\t}\r\n\t} catch (err) {\r\n\t\tconsole.log(err);\r\n\t\treturn res.status(503).json({ message: err.message });\r\n\t}\r\n};\r\n\r\nestadoCtrl.updateOneById = async (req, res) => {\r\n\tconst { estadoId } = req.params;\r\n\tconst { name, value, status } = req.body;\r\n\ttry {\r\n\t\tconst query = await Estado.findByIdAndUpdate(estadoId, { name, value, status });\r\n\r\n\t\tif (query) {\r\n\t\t\tres.json({ message: \"Estado actualizado con éxito\" });\r\n\t\t} else {\r\n\t\t\treturn res.status(404).json({ message: \"No se encontró el estado a actualizar\" });\r\n\t\t}\r\n\t} catch (err) {\r\n\t\tconsole.log(err);\r\n\t\treturn res.status(503).json({ message: err.message });\r\n\t}\r\n};\r\n\r\nestadoCtrl.deleteOneById = async (req, res) => {\r\n\tconst { estadoId } = req.params;\r\n\ttry {\r\n\t\tconst query = await Estado.findByIdAndDelete(estadoId);\r\n\r\n\t\tif (query) {\r\n\t\t\tres.json({ message: \"Estado eliminado con éxito\" });\r\n\t\t} else {\r\n\t\t\treturn res.status(404).json({ message: \"No se encontró el estado a eliminar\" });\r\n\t\t}\r\n\t} catch (err) {\r\n\t\tconsole.log(err);\r\n\t\treturn res.status(503).json({ message: err.message });\r\n\t}\r\n};\r\n\r\nexport default estadoCtrl;\r\n"],"file":"estado.controller.js"}