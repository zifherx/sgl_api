{"version":3,"sources":["../../src/controllers/chasis.controller.js"],"names":["getAll","req","res","Chasis","find","sort","name","populate","path","select","query","length","json","total","all_chasis","status","message","console","log","getChasisById","chasisId","params","findById","chasis","getChasisByActivo","chasis_activos","createChasis","body","createdBy","User","findOne","username","userFound","obj","_id","save","updateChasis","findByIdAndUpdate","deleteChasis","findByIdAndDelete"],"mappings":"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","sourcesContent":["import Chasis from \"../models/Chasis\";\r\nimport User from \"../models/User\";\r\n\r\nexport const getAll = async (req, res) => {\r\n\ttry {\r\n\t\tconst query = await Chasis.find()\r\n\t\t\t.sort({ name: \"asc\" })\r\n\t\t\t.populate({\r\n\t\t\t\tpath: \"createdBy\",\r\n\t\t\t\tselect: \"name username\",\r\n\t\t\t});\r\n\t\tif (query.length > 0) {\r\n\t\t\tres.json({ total: query.length, all_chasis: query });\r\n\t\t} else {\r\n\t\t\treturn res.status(404).json({ message: \"No existen Chasis\" });\r\n\t\t}\r\n\t} catch (err) {\r\n\t\tconsole.log(err);\r\n\t\treturn res.status(503).json({ message: err.message });\r\n\t}\r\n};\r\n\r\nexport const getChasisById = async (req, res) => {\r\n\tconst { chasisId } = req.params;\r\n\ttry {\r\n\t\tconst query = await Chasis.findById(chasisId).populate({\r\n\t\t\tpath: \"createdBy\",\r\n\t\t\tselect: \"name username\",\r\n\t\t});\r\n\t\tif (query) {\r\n\t\t\tres.json({ chasis: query });\r\n\t\t} else {\r\n\t\t\treturn res.status(404).json({ message: \"No existe Chasis\" });\r\n\t\t}\r\n\t} catch (err) {\r\n\t\tconsole.log(err);\r\n\t\treturn res.status(503).json({ message: err.message });\r\n\t}\r\n};\r\n\r\nexport const getChasisByActivo = async (req, res) => {\r\n\ttry {\r\n\t\tconst query = await Chasis.find({ status: true })\r\n\t\t\t.sort({ name: 1 })\r\n\t\t\t.populate({\r\n\t\t\t\tpath: \"createdBy\",\r\n\t\t\t\tselect: \"name username\",\r\n\t\t\t});\r\n\t\tif (query.length > 0) {\r\n\t\t\tres.json({ total: query.length, chasis_activos: query });\r\n\t\t} else {\r\n\t\t\treturn res.status(404).json({ message: \"No existen Chasis Activos\" });\r\n\t\t}\r\n\t} catch (err) {\r\n\t\tconsole.log(err);\r\n\t\treturn res.status(503).json({ message: err.message });\r\n\t}\r\n};\r\n\r\nexport const createChasis = async (req, res) => {\r\n\tconst { name, status, createdBy } = req.body;\r\n\ttry {\r\n\t\tconst userFound = await User.findOne({ username: createdBy });\r\n\t\tconst obj = new Chasis({ name, status });\r\n\t\tobj.createdBy = userFound._id;\r\n\t\tconst query = await obj.save();\r\n\t\tif (query) {\r\n\t\t\tres.json({ message: \"Chasis creado con éxito\" });\r\n\t\t}\r\n\t} catch (err) {\r\n\t\tconsole.log(err);\r\n\t\treturn res.status(503).json({ message: err.message });\r\n\t}\r\n};\r\n\r\nexport const updateChasis = async (req, res) => {\r\n\tconst { name, status } = req.body;\r\n\tconst { chasisId } = req.params;\r\n\ttry {\r\n\t\tconst query = await Chasis.findByIdAndUpdate(chasisId, { name, status });\r\n\t\tif (query) {\r\n\t\t\tres.json({ message: \"Chasis actualizado con éxito\" });\r\n\t\t} else {\r\n\t\t\treturn res.status(404).json({ message: \"No existe Chasis a actualizar\" });\r\n\t\t}\r\n\t} catch (err) {\r\n\t\tconsole.log(err);\r\n\t\treturn res.status(503).json({ message: err.message });\r\n\t}\r\n};\r\n\r\nexport const deleteChasis = async (req, res) => {\r\n\tconst { chasisId } = req.params;\r\n\ttry {\r\n\t\tconst query = await Chasis.findByIdAndDelete(chasisId);\r\n\t\tif (query) {\r\n\t\t\tres.json({ message: \"Chasis eliminado con éxito\" });\r\n\t\t} else {\r\n\t\t\treturn res.status(404).json({ message: \"No existe Chasis a eliminar\" });\r\n\t\t}\r\n\t} catch (err) {\r\n\t\tconsole.log(err);\r\n\t\treturn res.status(503).json({ message: err.message });\r\n\t}\r\n};\r\n"],"file":"chasis.controller.js"}