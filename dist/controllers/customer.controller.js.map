{"version":3,"sources":["../../src/controllers/customer.controller.js"],"names":["customerCtrl","getAll","req","res","Customer","find","sort","name","populate","query","length","json","status","message","console","error","getOne","customerId","params","findById","createCustomer","body","document","address","city","cellphone","email","userCreator","newCustomer","User","userFound","map","a","_id","save","updateCustomer","findByIdAndUpdate","deleteCustomer","findByIdAndRemove","getCountAll","estimatedDocumentCount","nro_customer"],"mappings":"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","sourcesContent":["import Customer from \"../models/Customer\";\r\nimport User from \"../models/User\";\r\n\r\nconst customerCtrl = {}\r\n\r\ncustomerCtrl.getAll = async(req, res) => {\r\n    try {\r\n        const query = await Customer.find().sort({ name: 'asc' }).populate('userCreator')\r\n\r\n        if (query.length > 0) {\r\n            res.json(query)\r\n        } else {\r\n            return res.status(404).json({ message: 'No existen Clientes' })\r\n        }\r\n    } catch (err) {\r\n        console.error(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\ncustomerCtrl.getOne = async(req, res) => {\r\n    const { customerId } = req.params;\r\n    try {\r\n        const query = await Customer.findById(customerId).populate('userCreator');\r\n        if (query) {\r\n            res.json(query)\r\n        } else {\r\n            return res.status(404).json({ message: 'No existe el Cliente' })\r\n        }\r\n\r\n    } catch (err) {\r\n        console.error(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\ncustomerCtrl.createCustomer = async(req, res) => {\r\n    const { name, document, address, city, cellphone, email, userCreator } = req.body;\r\n    try {\r\n        const newCustomer = new Customer({\r\n            name,\r\n            document,\r\n            address,\r\n            city,\r\n            cellphone,\r\n            email\r\n        });\r\n\r\n        const userFound = await User.find({ name: userCreator })\r\n        newCustomer.userCreator = userFound.map(a => a._id)\r\n\r\n        const query = await newCustomer.save();\r\n\r\n        if (query) {\r\n            res.json({ message: 'Cliente creado con éxito' });\r\n        }\r\n    } catch (err) {\r\n        console.error(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n}\r\n\r\ncustomerCtrl.updateCustomer = async(req, res) => {\r\n    const { customerId } = req.params;\r\n    const { name, document, address, city, cellphone, email } = req.body;\r\n    try {\r\n        const query = await Customer.findByIdAndUpdate(customerId, {\r\n            name,\r\n            document,\r\n            address,\r\n            city,\r\n            cellphone,\r\n            email\r\n        });\r\n        if (query) {\r\n            res.json({ message: 'Cliente actualizado con éxito' });\r\n        } else {\r\n            return res.status(404).json({ message: 'Cliente no encontrado' })\r\n        }\r\n    } catch (err) {\r\n        console.error(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n}\r\n\r\ncustomerCtrl.deleteCustomer = async(req, res) => {\r\n    const { customerId } = req.params;\r\n    try {\r\n        const query = await Customer.findByIdAndRemove(customerId);\r\n\r\n        if (query) {\r\n            res.json({ message: 'Cliente eliminado con éxito' });\r\n        } else {\r\n            return res.status(404).json({ message: 'Cliente no encontrado' })\r\n        }\r\n    } catch (err) {\r\n        console.error(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n}\r\n\r\ncustomerCtrl.getCountAll = async(req, res) => {\r\n    try {\r\n        const query = await Customer.estimatedDocumentCount()\r\n\r\n        if (query >= 0) {\r\n            res.json({ nro_customer: query })\r\n        }\r\n    } catch (err) {\r\n        console.error(err)\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nexport default customerCtrl"],"file":"customer.controller.js"}