{"version":3,"sources":["../../src/controllers/seller.controller.js"],"names":["sellerCtrl","getAll","req","res","Seller","find","sort","name","populate","query","length","json","status","message","console","error","getOne","sellerId","params","findById","createSeller","body","document","sucursal","userCreator","newSeller","User","username","userFound","map","a","_id","save","updateSeller","findByIdAndUpdate","deleteSeller","findByIdAndRemove","getCountAll","estimatedDocumentCount","nro_seller","getSellersByActive","getSellersBySucursal","sucursal_seller"],"mappings":"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","sourcesContent":["import Seller from \"../models/Seller\";\r\nimport User from \"../models/User\";\r\n\r\nconst sellerCtrl = {}\r\n\r\nsellerCtrl.getAll = async(req, res) => {\r\n    try {\r\n        const query = await Seller.find().sort({ name: 'asc' }).populate('userCreator')\r\n\r\n        if (query.length > 0) {\r\n            res.json(query)\r\n        } else {\r\n            return res.status(404).json({ message: 'No existen Asesores de Ventas' })\r\n        }\r\n    } catch (err) {\r\n        console.error(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nsellerCtrl.getOne = async(req, res) => {\r\n    const { sellerId } = req.params;\r\n    try {\r\n        const query = await Seller.findById(sellerId).populate('userCreator');\r\n        if (query) {\r\n            res.json(query)\r\n        } else {\r\n            return res.status(404).json({ message: 'No existe el Asesor de Ventas' })\r\n        }\r\n\r\n    } catch (err) {\r\n        console.error(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nsellerCtrl.createSeller = async(req, res) => {\r\n    const { name, document, sucursal, userCreator } = req.body;\r\n    try {\r\n        const newSeller = new Seller({\r\n            name,\r\n            document,\r\n            sucursal\r\n        });\r\n\r\n        const userFound = await User.find({ username: userCreator })\r\n        newSeller.userCreator = userFound.map(a => a._id)\r\n\r\n        const query = await newSeller.save();\r\n\r\n        if (query) {\r\n            res.json({ message: 'Asesor de Ventas creado con éxito' });\r\n        }\r\n    } catch (err) {\r\n        console.error(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n}\r\n\r\nsellerCtrl.updateSeller = async(req, res) => {\r\n    const { sellerId } = req.params;\r\n    const { name, document, sucursal, status } = req.body;\r\n    try {\r\n\r\n        const query = await Seller.findByIdAndUpdate(sellerId, {\r\n            name,\r\n            document,\r\n            sucursal,\r\n            status\r\n        });\r\n        if (query) {\r\n            res.json({ message: 'Asesor de Ventas actualizado con éxito' });\r\n        } else {\r\n            return res.status(404).json({ message: 'Asesor de Ventas no encontrado' })\r\n        }\r\n    } catch (err) {\r\n        console.error(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n}\r\n\r\nsellerCtrl.deleteSeller = async(req, res) => {\r\n    const { sellerId } = req.params;\r\n    try {\r\n        const query = await Seller.findByIdAndRemove(sellerId);\r\n\r\n        if (query) {\r\n            res.json({ message: 'Asesor de Ventas eliminado con éxito' });\r\n        } else {\r\n            return res.status(404).json({ message: 'Asesor de Ventas no encontrado' })\r\n        }\r\n    } catch (err) {\r\n        console.error(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n}\r\n\r\nsellerCtrl.getCountAll = async(req, res) => {\r\n    try {\r\n        const query = await Seller.estimatedDocumentCount()\r\n\r\n        if (query >= 0) {\r\n            res.json({ nro_seller: query })\r\n        }\r\n    } catch (err) {\r\n        console.error(err)\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nsellerCtrl.getSellersByActive = async(req, res) => {\r\n    try {\r\n        const query = await Seller.find({ status: true }).sort({ name: 'asc' });\r\n        if (query.length > 0) {\r\n            res.json(query)\r\n        } else {\r\n            return res.status(404).json({ message: 'No existen Asesores de Ventas Activos' })\r\n        }\r\n    } catch (err) {\r\n        console.error(err)\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nsellerCtrl.getSellersBySucursal = async(req, res) => {\r\n    const { sucursal_seller } = req.body;\r\n    try {\r\n        const query = await Seller.find({ sucursal: sucursal_seller }).sort({ name: 'asc' });\r\n        if (query.length > 0) {\r\n            res.json(query)\r\n        } else {\r\n            return res.status(404).json({ message: `No existen Asesores de Ventas en ${sucursal_seller}` })\r\n        }\r\n    } catch (err) {\r\n        console.error(err)\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nexport default sellerCtrl"],"file":"seller.controller.js"}