{"version":3,"sources":["../../src/controllers/city.controller.js"],"names":["cityController","getAll","req","res","City","find","sort","name","populate","path","select","query","length","json","total","all_cities","status","message","console","log","getCityById","cityId","params","findById","ciudad","getCityByActivo","active_total","active_cities","createCity","body","createdBy","User","findOne","username","userFound","obj","_id","save","updateCity","findByIdAndUpdate","deleteCity","findByIdAndDelete","objeto"],"mappings":"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","sourcesContent":["import City from \"../models/City\";\r\nimport User from \"../models/User\";\r\n\r\nconst cityController = {};\r\n\r\ncityController.getAll = async (req, res) => {\r\n\ttry {\r\n\t\tconst query = await City.find()\r\n\t\t\t.sort({ name: \"asc\" })\r\n\t\t\t.populate({\r\n\t\t\t\tpath: \"createdBy\",\r\n\t\t\t\tselect: \"name username\",\r\n\t\t\t});\r\n\t\tif (query.length > 0) {\r\n\t\t\tres.json({ total: query.length, all_cities: query });\r\n\t\t} else {\r\n\t\t\treturn res.status(404).json({ message: \"No existen Ciudades\" });\r\n\t\t}\r\n\t} catch (err) {\r\n\t\tconsole.log(err);\r\n\t\treturn res.status(503).json({ message: err.message });\r\n\t}\r\n};\r\n\r\ncityController.getCityById = async (req, res) => {\r\n\tconst { cityId } = req.params;\r\n\ttry {\r\n\t\tconst query = await City.findById(cityId).populate({\r\n\t\t\tpath: \"createdBy\",\r\n\t\t\tselect: \"name username\",\r\n\t\t});\r\n\t\tif (query) {\r\n\t\t\tres.json({ ciudad: query });\r\n\t\t} else {\r\n\t\t\treturn res.status(404).json({ message: \"No existe la Ciudad\" });\r\n\t\t}\r\n\t} catch (err) {\r\n\t\tconsole.log(err);\r\n\t\treturn res.status(503).json({ message: err.message });\r\n\t}\r\n};\r\n\r\ncityController.getCityByActivo = async (req, res) => {\r\n\ttry {\r\n\t\tconst query = await City.find({ status: true })\r\n\t\t\t.sort({ name: \"asc\" })\r\n\t\t\t.populate({\r\n\t\t\t\tpath: \"createdBy\",\r\n\t\t\t\tselect: \"name username\",\r\n\t\t\t});\r\n\t\tif (query.length > 0) {\r\n\t\t\tres.json({ active_total: query.length, active_cities: query });\r\n\t\t} else {\r\n\t\t\treturn res.status(404).json({ message: \"No existen Ciudad Activos\" });\r\n\t\t}\r\n\t} catch (err) {\r\n\t\tconsole.log(err);\r\n\t\treturn res.status(503).json({ message: err.message });\r\n\t}\r\n};\r\n\r\ncityController.createCity = async (req, res) => {\r\n\tconst { name, status, createdBy } = req.body;\r\n\ttry {\r\n\t\tconst userFound = await User.findOne({ username: createdBy });\r\n\t\tconst obj = new City({ name, status });\r\n\t\tobj.createdBy = userFound._id;\r\n\t\tconst query = await obj.save();\r\n\t\tif (query) {\r\n\t\t\tres.json({ message: \"Ciudad creada con éxito\" });\r\n\t\t}\r\n\t} catch (err) {\r\n\t\tconsole.log(err);\r\n\t\treturn res.status(503).json({ message: err.message });\r\n\t}\r\n};\r\n\r\ncityController.updateCity = async (req, res) => {\r\n\tconst { cityId } = req.params;\r\n\tconst { name, status } = req.body;\r\n\ttry {\r\n\t\tconst query = await City.findByIdAndUpdate(cityId, { name, status });\r\n\t\tif (query) {\r\n\t\t\tres.json({ message: \"Ciudad actualizada con éxito\" });\r\n\t\t} else {\r\n\t\t\treturn res.status(404).json({ message: \"No existe Ciudad a actualizar\" });\r\n\t\t}\r\n\t} catch (err) {\r\n\t\tconsole.log(err);\r\n\t\treturn res.status(503).json({ message: err.message });\r\n\t}\r\n};\r\n\r\ncityController.deleteCity = async (req, res) => {\r\n\tconst { cityId } = req.params;\r\n\ttry {\r\n\t\tconst objeto = await City.findByIdAndDelete(cityId);\r\n\t\tif (objeto) {\r\n\t\t\tres.json({ message: \"Ciudad eliminada con éxito\" });\r\n\t\t} else {\r\n\t\t\treturn res.status(404).json({ message: \"No existe Ciudad a eliminar\" });\r\n\t\t}\r\n\t} catch (err) {\r\n\t\tconsole.log(err);\r\n\t\treturn res.status(503).json({ message: err.message });\r\n\t}\r\n};\r\n\r\nexport default cityController;\r\n"],"file":"city.controller.js"}