{"version":3,"sources":["../../src/controllers/lead.controller.js"],"names":["leadCtrl","getAll","req","res","Lead","find","populate","sort","name","query","length","json","nro_leads","leads","status","message","console","error","getLeadsIngresados","where","status_asignado","statusLead","getLeadsAsignados","getLeadsAtendidos","getOne","leadId","params","findById","createLead","body","sucursal_lead","dataOrigin","customer_name","customer_document","customer_address","customer_city","customer_cellphone","customer_email","fecha_ingreso","fecha_asignacion","fecha_atencion","userCreator","newObj","User","username","userFound","map","a","_id","save","asignarLead","asesorVenta","jefeAsignador","jefeFound","Seller","$in","sellerFound","findByIdAndUpdate","b","atenderLead","modeloVehiculo","versionVehiculo","comentario","tipo_pago","valorUnidad","tipo_financiamiento","asesorAtencion","actualizarVenta","lead_convertido","estatus_venta","deleteLead","findByIdAndRemove","getCountAll","estimatedDocumentCount","nro_Leads","getCountByStatus","atendidos","asignados","countDocuments","leads_atendidos","query2","leads_asignados","log","conteoVentasByStatus","estado_venta","status_elegido","countVentas","conteoLeadsAsignadosByVendedor","sucursal","statusAsignado","start","end","filter","$gte","Date","$lte","aggregate","$match","$group","$sum","nro_vendedores","tablero","conteoLeadsAtendidosByVendedor","conteoLeadsbyOrigen","origen","data_origen","conteo","conteoLeadsAtendidosxModelo","filtro","nro_modelos"],"mappings":"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","sourcesContent":["import Lead from \"../models/Lead\";\r\nimport User from \"../models/User\";\r\nimport Seller from '../models/Seller'\r\n\r\nconst leadCtrl = {}\r\n\r\nleadCtrl.getAll = async(req, res) => {\r\n    try {\r\n        const query = await Lead.find().populate('asesorVenta userCreator').sort({ name: 'asc' })\r\n        if (query.length > 0) {\r\n            res.json({ nro_leads: query.length, leads: query })\r\n        } else {\r\n            return res.status(404).json({ message: 'No existen Leads' })\r\n        }\r\n    } catch (err) {\r\n        console.error(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nleadCtrl.getLeadsIngresados = async(req, res) => {\r\n    try {\r\n        const query = await Lead.where({ status_asignado: false, statusLead: false }).populate('asesorVenta userCreator')\r\n        if (query.length > 0) {\r\n            res.json({ nro_leads: query.length, leads: query })\r\n        } else {\r\n            return res.status(404).json({ message: 'No existen nuevos Leads' })\r\n        }\r\n    } catch (err) {\r\n        console.error(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nleadCtrl.getLeadsAsignados = async(req, res) => {\r\n    try {\r\n        const query = await Lead.where({ status_asignado: true, statusLead: false }).find().populate('asesorVenta')\r\n        if (query.length > 0) {\r\n            res.json({ nro_leads: query.length, leads: query });\r\n        } else {\r\n            return res.status(404).json({ message: 'No existen Leads asignados' })\r\n        }\r\n    } catch (err) {\r\n        console.error(err)\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nleadCtrl.getLeadsAtendidos = async(req, res) => {\r\n    try {\r\n        const query = await Lead.where({ status_asignado: true, statusLead: true }).find().populate('asesorVenta userCreator')\r\n        if (query.length > 0) {\r\n            res.json({ nro_leads: query.length, leads: query });\r\n        } else {\r\n            return res.status(404).json({ message: 'No existen Leads atendidos' })\r\n        }\r\n    } catch (err) {\r\n        console.error(err)\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nleadCtrl.getOne = async(req, res) => {\r\n    const { leadId } = req.params;\r\n    try {\r\n        const query = await Lead.findById(leadId).populate('asesorVenta userCreator');\r\n        if (query) {\r\n            res.json(query)\r\n        } else {\r\n            return res.status(404).json({ message: `No existe el Lead ${leadId}` })\r\n        }\r\n\r\n    } catch (err) {\r\n        console.error(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nleadCtrl.createLead = async(req, res) => {\r\n    const {\r\n        sucursal_lead,\r\n        dataOrigin,\r\n        customer_name,\r\n        customer_document,\r\n        customer_address,\r\n        customer_city,\r\n        customer_cellphone,\r\n        customer_email,\r\n        fecha_ingreso,\r\n        fecha_asignacion,\r\n        fecha_atencion,\r\n        userCreator\r\n    } = req.body;\r\n    try {\r\n        const newObj = new Lead({\r\n            sucursal_lead,\r\n            dataOrigin,\r\n            customer_name,\r\n            customer_document,\r\n            customer_address,\r\n            customer_city,\r\n            customer_cellphone,\r\n            customer_email,\r\n            fecha_ingreso,\r\n            fecha_asignacion,\r\n            fecha_atencion\r\n        });\r\n\r\n        const userFound = await User.find({ username: userCreator })\r\n        newObj.userCreator = userFound.map(a => a._id)\r\n\r\n        const query = await newObj.save();\r\n\r\n        if (query) {\r\n            res.json({ message: 'Lead creado con éxito' });\r\n        }\r\n    } catch (err) {\r\n        console.error(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n}\r\n\r\nleadCtrl.asignarLead = async(req, res) => {\r\n    const { leadId } = req.params;\r\n    const { status_asignado, fecha_asignacion, asesorVenta, jefeAsignador } = req.body;\r\n\r\n    try {\r\n\r\n        const jefeFound = await User.find({ username: jefeAsignador })\r\n        const sellerFound = await Seller.find({ name: { $in: asesorVenta } })\r\n        const query = await Lead.findByIdAndUpdate(leadId, {\r\n            status_asignado,\r\n            fecha_asignacion,\r\n            asesorVenta: sellerFound.map(a => a._id),\r\n            jefeAsignador: jefeFound.map(b => b._id)\r\n        })\r\n\r\n        if (query) {\r\n            res.json({ message: 'Lead asignado con éxito' });\r\n        } else {\r\n            return res.status(404).json({ message: 'Lead no encontrado' })\r\n        }\r\n    } catch (err) {\r\n        console.error(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n}\r\n\r\nleadCtrl.atenderLead = async(req, res) => {\r\n    const { leadId } = req.params;\r\n    const { statusLead, modeloVehiculo, versionVehiculo, fecha_atencion, comentario, tipo_pago, valorUnidad, tipo_financiamiento, asesorAtencion } = req.body;\r\n    try {\r\n        const sellerFound = await User.find({ username: asesorAtencion })\r\n        const query = await Lead.findByIdAndUpdate(leadId, {\r\n            statusLead,\r\n            modeloVehiculo,\r\n            versionVehiculo,\r\n            fecha_atencion,\r\n            comentario,\r\n            tipo_pago,\r\n            valorUnidad,\r\n            tipo_financiamiento,\r\n            asesorAtencion: sellerFound.map(a => a._id)\r\n        });\r\n        if (query) {\r\n            res.json({ message: 'Lead actualizado con éxito' });\r\n        } else {\r\n            return res.status(404).json({ message: 'Lead no encontrado' })\r\n        }\r\n    } catch (err) {\r\n        console.error(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n}\r\n\r\nleadCtrl.actualizarVenta = async(req, res) => {\r\n    const { leadId } = req.params;\r\n    const { lead_convertido, estatus_venta } = req.body;\r\n    try {\r\n        const query = await Lead.findByIdAndUpdate(leadId, {\r\n            lead_convertido,\r\n            estatus_venta\r\n        });\r\n        if (query) {\r\n            res.json({ message: 'Estatus de Venta actualizado con éxito' })\r\n        } else {\r\n            return res.status(404).json({ message: 'Venta no encontrada' })\r\n        }\r\n    } catch (err) {\r\n        console.error(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n}\r\n\r\nleadCtrl.deleteLead = async(req, res) => {\r\n    const { leadId } = req.params;\r\n    try {\r\n        const query = await Lead.findByIdAndRemove(leadId);\r\n\r\n        if (query) {\r\n            res.json({ message: 'Lead eliminado con éxito' });\r\n        } else {\r\n            return res.status(404).json({ message: 'Lead no encontrado' })\r\n        }\r\n    } catch (err) {\r\n        console.error(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n}\r\n\r\nleadCtrl.getCountAll = async(req, res) => {\r\n    try {\r\n        const query = await Lead.estimatedDocumentCount()\r\n\r\n        if (query >= 0) {\r\n            res.json({ nro_Leads: query })\r\n        }\r\n    } catch (err) {\r\n        console.error(err)\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nleadCtrl.getCountByStatus = async(req, res) => {\r\n    const { atendidos, asignados } = req.body;\r\n    try {\r\n        if (atendidos) {\r\n            const query = await Lead.where({ statusLead: atendidos }).find().countDocuments();\r\n            if (query >= 0) return res.json({ leads_atendidos: query })\r\n        } else {\r\n            const query2 = await Lead.where({ status_asignado: asignados }).find().countDocuments();\r\n            if (query2 >= 0) return res.json({ leads_asignados: query2 })\r\n        }\r\n    } catch (err) {\r\n        console.log(err)\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nleadCtrl.conteoVentasByStatus = async(req, res) => {\r\n    const { estado_venta } = req.body;\r\n    try {\r\n        const query = await Lead.where({ status_asignado: true, statusLead: true, estatus_venta: estado_venta }).find().countDocuments();\r\n        if (query >= 0) {\r\n            res.json({ status_elegido: estado_venta, countVentas: query })\r\n        } else {\r\n            return res.status(404).json({ message: `No existen ventas en ${estado_venta}` })\r\n        }\r\n    } catch (err) {\r\n        console.log(err)\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nleadCtrl.conteoLeadsAsignadosByVendedor = async(req, res) => {\r\n    const { sucursal, statusAsignado, start, end } = req.body;\r\n\r\n    try {\r\n        const filter = { sucursal_lead: sucursal, status_asignado: statusAsignado, fecha_ingreso: { $gte: new Date(start), $lte: new Date(end) } };\r\n\r\n        const query = await Lead.aggregate([{\r\n            $match: filter\r\n        }, {\r\n            $group: {\r\n                _id: '$asesorVenta',\r\n                leads_asignados: { $sum: 1 }\r\n            }\r\n        }]);\r\n\r\n        if (query.length > 0) {\r\n            res.json({ nro_vendedores: query.length, tablero: query })\r\n        } else {\r\n            return res.status(404).json({ message: 'No existe data aún' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err)\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nleadCtrl.conteoLeadsAtendidosByVendedor = async(req, res) => {\r\n    const { sucursal, statusAsignado, statusLead, start, end } = req.body;\r\n\r\n    try {\r\n        const filter = { sucursal_lead: sucursal, status_asignado: statusAsignado, statusLead, fecha_ingreso: { $gte: new Date(start), $lte: new Date(end) } };\r\n\r\n        const query = await Lead.aggregate([{\r\n            $match: filter\r\n        }, {\r\n            $group: {\r\n                _id: '$asesorVenta',\r\n                leads_atendidos: { $sum: 1 }\r\n            }\r\n        }]);\r\n\r\n        if (query.length > 0) {\r\n            res.json({ nro_vendedores: query.length, tablero: query })\r\n        } else {\r\n            return res.status(404).json({ message: 'No existe data aún' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err)\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nleadCtrl.conteoLeadsbyOrigen = async(req, res) => {\r\n    const { origen, start, end } = req.body;\r\n\r\n    try {\r\n        const query = await Lead.where({ dataOrigin: origen, fecha_ingreso: { $gte: new Date(start), $lte: new Date(end) } }).find().countDocuments();\r\n        if (query >= 0) {\r\n            res.json({ data_origen: origen, conteo: query })\r\n        }\r\n    } catch (err) {\r\n        console.log(err)\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nleadCtrl.conteoLeadsAtendidosxModelo = async(req, res) => {\r\n    const { sucursal, start, end } = req.body;\r\n\r\n    try {\r\n        const filtro = { sucursal_lead: sucursal, fecha_ingreso: { $gte: new Date(start), $lte: new Date(end) } }\r\n\r\n        const query = await Lead.aggregate([\r\n            { $match: filtro }, {\r\n                $group: {\r\n                    _id: '$modeloVehiculo',\r\n                    conteo: { $sum: 1 }\r\n                }\r\n            }\r\n        ])\r\n\r\n        // console.log(query)\r\n\r\n        if (query.length > 0) {\r\n            res.json({ nro_modelos: query.length, tablero: query })\r\n        } else {\r\n            return res.status(404).json({ message: 'No existe data aún' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err)\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nexport default leadCtrl"],"file":"lead.controller.js"}