{"version":3,"sources":["../../src/controllers/lead.controller.js"],"names":["leadCtrl","getAll","req","res","Lead","find","populate","path","select","query","length","json","total","all_leads","status","message","console","log","getOneById","leadId","params","findById","one","createOne","body","codigo_interno","dataOrigin","customer_name","customer_document","customer_city","customer_cellphone","customer_cellphone2","customer_email","fecha_ingreso","createdBy","newObj","OriginData","findOne","name","originFound","_id","User","username","userFound","save","isNoInteresado","estado_lead","sucursal","fecha_noInteresado","motivoDesplegable","motivo_rechazo","Sucursal","sucursalFound","MotivoRechazo","motivoFound","findByIdAndUpdate","sucursal_lead","isAtendido","fecha_atencion","comentario","observacion","auto","financiamiento","entidad_bancaria","tentativa_inicial","precioUnidad","Vehicle","cod_tdp","autoFound","Financiamiento","financiamientoFound","undefined","tipoFinanciamiento","Banco","bancoFound","isAsignacion","isAsignado","fecha_asignacion","asesorAsignado","Seller","asesorFound","isCotizado","fecha_cotizacion","isDeclinado","fecha_declinado","motivo_desistencia","isConvertido","estado_conversion","fecha_conversion","EstadoConversion","statusFound","isBooking","fecha_booking","isDown","fecha_down","isVenta","fecha_venta","deleteOneById","findByIdAndDelete","leadsBySucursalFecha","start","end","$gte","Date","$lte","sort","leads","leadsByStatusFecha","rankingLeadsConversionByDates","filter","aggregate","$match","$group","num_leads","$sum","$sort","ranking","countLeadsByDates","estado","$regex","countDocuments","qty","countLeadsConversionyDates","rankingLeadsByOriginDataDateConversion","totalLeads","leadsModificados","updatedAt","$lt","all"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEA,IAAMA,QAAQ,GAAG,EAAjB;;AAEAA,QAAQ,CAACC,MAAT;AAAA,2FAAkB,iBAAOC,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEYC,iBAAKC,IAAL,GACdC,QADc,CACL;AACLC,cAAAA,IAAI,EAAE,eADD;AAELC,cAAAA,MAAM,EAAE;AAFH,aADK,EAKdF,QALc,CAKL;AACLC,cAAAA,IAAI,EAAE,YADD;AAELC,cAAAA,MAAM,EAAE;AAFH,aALK,EASdF,QATc,CASL;AACLC,cAAAA,IAAI,EAAE,oBADD;AAELC,cAAAA,MAAM,EAAE;AAFH,aATK,EAadF,QAbc,CAaL;AACLC,cAAAA,IAAI,EAAE,kBADD;AAELC,cAAAA,MAAM,EAAE;AAFH,aAbK,EAiBdF,QAjBc,CAiBL;AACLC,cAAAA,IAAI,EAAE,mBADD;AAELC,cAAAA,MAAM,EAAE;AAFH,aAjBK,EAqBdF,QArBc,CAqBL;AACLC,cAAAA,IAAI,EAAE,mBADD;AAELC,cAAAA,MAAM,EAAE;AAFH,aArBK,EAyBdF,QAzBc,CAyBL;AACLC,cAAAA,IAAI,EAAE,MADD;AAELC,cAAAA,MAAM,EAAE,+BAFH;AAGLF,cAAAA,QAAQ,EAAE,CACL;AACKC,gBAAAA,IAAI,EAAE,QADX;AAEKC,gBAAAA,MAAM,EAAE;AAFb,eADK,EAKL;AACKD,gBAAAA,IAAI,EAAE,OADX;AAEKC,gBAAAA,MAAM,EAAE,mBAFb;AAGKF,gBAAAA,QAAQ,EAAE;AACLC,kBAAAA,IAAI,EAAE,OADD;AAELC,kBAAAA,MAAM,EAAE;AAFH;AAHf,eALK;AAHL,aAzBK,EA2CdF,QA3Cc,CA2CL;AACLC,cAAAA,IAAI,EAAE,gBADD;AAELC,cAAAA,MAAM,EAAE,wBAFH;AAGLF,cAAAA,QAAQ,EAAE;AACLC,gBAAAA,IAAI,EAAE,OADD;AAELC,gBAAAA,MAAM,EAAE;AAFH;AAHL,aA3CK,EAmDdF,QAnDc,CAmDL;AACLC,cAAAA,IAAI,EAAE,WADD;AAELC,cAAAA,MAAM,EAAE;AAFH,aAnDK,CAFZ;;AAAA;AAEFC,YAAAA,KAFE;;AAAA,kBA0DJA,KAAK,CAACC,MAAN,GAAe,CA1DX;AAAA;AAAA;AAAA;;AA2DHP,YAAAA,GAAG,CAACQ,IAAJ,CAAS;AAAEC,cAAAA,KAAK,EAAEH,KAAK,CAACC,MAAf;AAAuBG,cAAAA,SAAS,EAAEJ;AAAlC,aAAT;AA3DG;AAAA;;AAAA;AAAA,6CA6DIN,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBH,IAAhB,CAAqB;AAAEI,cAAAA,OAAO,EAAE;AAAX,aAArB,CA7DJ;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAgERC,YAAAA,OAAO,CAACC,GAAR;AAhEQ,6CAiEDd,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBH,IAAhB,CAAqB;AAAEI,cAAAA,OAAO,EAAE,YAAIA;AAAf,aAArB,CAjEC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAlB;;AAAA;AAAA;AAAA;AAAA;;AAqEAf,QAAQ,CAACkB,UAAT;AAAA,4FAAsB,kBAAOhB,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AACTgB,YAAAA,MADS,GACEjB,GAAG,CAACkB,MADN,CACTD,MADS;AAAA;AAAA;AAAA,mBAGQf,iBAAKiB,QAAL,CAAcF,MAAd,EACdb,QADc,CACL;AACLC,cAAAA,IAAI,EAAE,eADD;AAELC,cAAAA,MAAM,EAAE;AAFH,aADK,EAKdF,QALc,CAKL;AACLC,cAAAA,IAAI,EAAE,YADD;AAELC,cAAAA,MAAM,EAAE;AAFH,aALK,EASdF,QATc,CASL;AACLC,cAAAA,IAAI,EAAE,oBADD;AAELC,cAAAA,MAAM,EAAE;AAFH,aATK,EAadF,QAbc,CAaL;AACLC,cAAAA,IAAI,EAAE,kBADD;AAELC,cAAAA,MAAM,EAAE;AAFH,aAbK,EAiBdF,QAjBc,CAiBL;AACLC,cAAAA,IAAI,EAAE,mBADD;AAELC,cAAAA,MAAM,EAAE;AAFH,aAjBK,EAqBdF,QArBc,CAqBL;AACLC,cAAAA,IAAI,EAAE,mBADD;AAELC,cAAAA,MAAM,EAAE;AAFH,aArBK,EAyBdF,QAzBc,CAyBL;AACLC,cAAAA,IAAI,EAAE,MADD;AAELC,cAAAA,MAAM,EAAE,8BAFH;AAGLF,cAAAA,QAAQ,EAAE,CACL;AACKC,gBAAAA,IAAI,EAAE,QADX;AAEKC,gBAAAA,MAAM,EAAE;AAFb,eADK,EAKL;AACKD,gBAAAA,IAAI,EAAE,OADX;AAEKC,gBAAAA,MAAM,EAAE,mBAFb;AAGKF,gBAAAA,QAAQ,EAAE;AACLC,kBAAAA,IAAI,EAAE,OADD;AAELC,kBAAAA,MAAM,EAAE;AAFH;AAHf,eALK;AAHL,aAzBK,EA2CdF,QA3Cc,CA2CL;AACLC,cAAAA,IAAI,EAAE,gBADD;AAELC,cAAAA,MAAM,EAAE,iCAFH;AAGLF,cAAAA,QAAQ,EAAE,CACL;AACKC,gBAAAA,IAAI,EAAE,OADX;AAEKC,gBAAAA,MAAM,EAAE;AAFb,eADK,EAKL;AACKD,gBAAAA,IAAI,EAAE,UADX;AAEKC,gBAAAA,MAAM,EAAE;AAFb,eALK;AAHL,aA3CK,EAyDdF,QAzDc,CAyDL;AACLC,cAAAA,IAAI,EAAE,WADD;AAELC,cAAAA,MAAM,EAAE;AAFH,aAzDK,CAHR;;AAAA;AAGNC,YAAAA,KAHM;;AAAA,iBAiERA,KAjEQ;AAAA;AAAA;AAAA;;AAkEPN,YAAAA,GAAG,CAACQ,IAAJ,CAAS;AAAEW,cAAAA,GAAG,EAAEb;AAAP,aAAT;AAlEO;AAAA;;AAAA;AAAA,8CAoEAN,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBH,IAAhB,CAAqB;AAAEI,cAAAA,OAAO,EAAE;AAAX,aAArB,CApEA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAuEZC,YAAAA,OAAO,CAACC,GAAR;AAvEY,8CAwELd,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBH,IAAhB,CAAqB;AAAEI,cAAAA,OAAO,EAAE,aAAIA;AAAf,aAArB,CAxEK;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAtB;;AAAA;AAAA;AAAA;AAAA;;AA4EAf,QAAQ,CAACuB,SAAT;AAAA,4FAAqB,kBAAOrB,GAAP,EAAYC,GAAZ;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,wBAC2JD,GAAG,CAACsB,IAD/J,EACRC,cADQ,aACRA,cADQ,EACQC,UADR,aACQA,UADR,EACoBC,aADpB,aACoBA,aADpB,EACmCC,iBADnC,aACmCA,iBADnC,EACsDC,aADtD,aACsDA,aADtD,EACqEC,kBADrE,aACqEA,kBADrE,EACyFC,mBADzF,aACyFA,mBADzF,EAC8GC,cAD9G,aAC8GA,cAD9G,EAC8HC,aAD9H,aAC8HA,aAD9H,EAC6IC,SAD7I,aAC6IA,SAD7I;AAAA;AAILC,YAAAA,MAJK,GAII,IAAI/B,gBAAJ,CAAS;AACnBqB,cAAAA,cAAc,EAAdA,cADmB;AAEnBE,cAAAA,aAAa,EAAbA,aAFmB;AAGnBC,cAAAA,iBAAiB,EAAjBA,iBAHmB;AAInBC,cAAAA,aAAa,EAAbA,aAJmB;AAKnBC,cAAAA,kBAAkB,EAAlBA,kBALmB;AAMnBC,cAAAA,mBAAmB,EAAnBA,mBANmB;AAOnBC,cAAAA,cAAc,EAAdA,cAPmB;AAQnBC,cAAAA,aAAa,EAAbA;AARmB,aAAT,CAJJ;AAAA;AAAA,mBAeeG,uBAAWC,OAAX,CAAmB;AAAEC,cAAAA,IAAI,EAAEZ;AAAR,aAAnB,CAff;;AAAA;AAeLa,YAAAA,WAfK;;AAAA,gBAgBNA,WAhBM;AAAA;AAAA;AAAA;;AAAA,8CAgBcpC,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBH,IAAhB,CAAqB;AAAEI,cAAAA,OAAO,mBAAYW,UAAZ;AAAT,aAArB,CAhBd;;AAAA;AAiBXS,YAAAA,MAAM,CAACT,UAAP,GAAoBa,WAAW,CAACC,GAAhC;AAjBW;AAAA,mBAmBaC,iBAAKJ,OAAL,CAAa;AAAEK,cAAAA,QAAQ,EAAER;AAAZ,aAAb,CAnBb;;AAAA;AAmBLS,YAAAA,SAnBK;;AAAA,gBAoBNA,SApBM;AAAA;AAAA;AAAA;;AAAA,8CAoBYxC,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBH,IAAhB,CAAqB;AAAEI,cAAAA,OAAO,qBAAcmB,SAAd;AAAT,aAArB,CApBZ;;AAAA;AAqBXC,YAAAA,MAAM,CAACD,SAAP,GAAmBS,SAAS,CAACH,GAA7B;AArBW;AAAA,mBAuBSL,MAAM,CAACS,IAAP,EAvBT;;AAAA;AAuBLnC,YAAAA,KAvBK;;AAyBX,gBAAIA,KAAJ,EAAW;AACNN,cAAAA,GAAG,CAACQ,IAAJ,CAAS;AAAEI,gBAAAA,OAAO,EAAE;AAAX,eAAT;AACJ;;AA3BU;AAAA;;AAAA;AAAA;AAAA;AA6BXC,YAAAA,OAAO,CAACC,GAAR;AA7BW,8CA8BJd,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBH,IAAhB,CAAqB;AAAEI,cAAAA,OAAO,EAAE,aAAIA;AAAf,aAArB,CA9BI;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAArB;;AAAA;AAAA;AAAA;AAAA;;AAkCAf,QAAQ,CAAC6C,cAAT;AAAA,4FAA0B,kBAAO3C,GAAP,EAAYC,GAAZ;AAAA;;AAAA;AAAA;AAAA;AAAA;AACbgB,YAAAA,MADa,GACFjB,GAAG,CAACkB,MADF,CACbD,MADa;AAAA,yBAEoFjB,GAAG,CAACsB,IAFxF,EAEbsB,WAFa,cAEbA,WAFa,EAEAD,cAFA,cAEAA,cAFA,EAEgBE,QAFhB,cAEgBA,QAFhB,EAE0BC,kBAF1B,cAE0BA,kBAF1B,EAE8CC,iBAF9C,cAE8CA,iBAF9C,EAEiEC,cAFjE,cAEiEA,cAFjE;AAAA;AAAA;AAAA,mBAKYC,qBAASd,OAAT,CAAiB;AAAEC,cAAAA,IAAI,EAAES;AAAR,aAAjB,CALZ;;AAAA;AAKVK,YAAAA,aALU;;AAAA,gBAMXA,aANW;AAAA;AAAA;AAAA;;AAAA,8CAMWjD,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBH,IAAhB,CAAqB;AAAEI,cAAAA,OAAO,qBAAcgC,QAAd;AAAT,aAArB,CANX;;AAAA;AAAA;AAAA,mBAQUM,0BAAchB,OAAd,CAAsB;AAAEC,cAAAA,IAAI,EAAEW;AAAR,aAAtB,CARV;;AAAA;AAQVK,YAAAA,WARU;;AAAA,gBASXA,WATW;AAAA;AAAA;AAAA;;AAAA,8CASSnD,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBH,IAAhB,CAAqB;AAAEI,cAAAA,OAAO,mBAAYkC,iBAAZ;AAAT,aAArB,CATT;;AAAA;AAAA;AAAA,mBAWI7C,iBAAKmD,iBAAL,CAAuBpC,MAAvB,EAA+B;AAC9C2B,cAAAA,WAAW,EAAXA,WAD8C;AAE9CD,cAAAA,cAAc,EAAdA,cAF8C;AAG9CW,cAAAA,aAAa,EAAEJ,aAAa,CAACZ,GAHiB;AAI9CQ,cAAAA,kBAAkB,EAAlBA,kBAJ8C;AAK9CC,cAAAA,iBAAiB,EAAEK,WAAW,CAACd,GALe;AAM9CU,cAAAA,cAAc,EAAdA;AAN8C,aAA/B,CAXJ;;AAAA;AAWVzC,YAAAA,KAXU;;AAAA,iBAoBZA,KApBY;AAAA;AAAA;AAAA;;AAqBXN,YAAAA,GAAG,CAACQ,IAAJ,CAAS;AAAEI,cAAAA,OAAO,EAAE;AAAX,aAAT;AArBW;AAAA;;AAAA;AAAA,8CAuBJZ,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBH,IAAhB,CAAqB;AAAEI,cAAAA,OAAO,EAAE;AAAX,aAArB,CAvBI;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AA0BhBC,YAAAA,OAAO,CAACC,GAAR;AA1BgB,8CA2BTd,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBH,IAAhB,CAAqB;AAAEI,cAAAA,OAAO,EAAE,aAAIA;AAAf,aAArB,CA3BS;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA1B;;AAAA;AAAA;AAAA;AAAA;;AA+BAf,QAAQ,CAACyD,UAAT;AAAA,4FAAsB,kBAAOvD,GAAP,EAAYC,GAAZ;AAAA;;AAAA;AAAA;AAAA;AAAA;AACTgB,YAAAA,MADS,GACEjB,GAAG,CAACkB,MADN,CACTD,MADS;AAAA,yBAE+IjB,GAAG,CAACsB,IAFnJ,EAETsB,WAFS,cAETA,WAFS,EAEIW,UAFJ,cAEIA,UAFJ,EAEgBC,cAFhB,cAEgBA,cAFhB,EAEgCC,UAFhC,cAEgCA,UAFhC,EAE4CC,WAF5C,cAE4CA,WAF5C,EAEyDb,QAFzD,cAEyDA,QAFzD,EAEmEc,IAFnE,cAEmEA,IAFnE,EAEyEC,cAFzE,cAEyEA,cAFzE,EAEyFC,gBAFzF,cAEyFA,gBAFzF,EAE2GC,iBAF3G,cAE2GA,iBAF3G,EAE8HC,YAF9H,cAE8HA,YAF9H;AAAA;AAKRxD,YAAAA,KALQ,GAKA,IALA;AAAA;AAAA,mBAOgB0C,qBAASd,OAAT,CAAiB;AAAEC,cAAAA,IAAI,EAAES;AAAR,aAAjB,CAPhB;;AAAA;AAONK,YAAAA,aAPM;AAAA;AAAA,mBAQYc,oBAAQ7B,OAAR,CAAgB;AAAE8B,cAAAA,OAAO,EAAEN;AAAX,aAAhB,CARZ;;AAAA;AAQNO,YAAAA,SARM;AAAA;AAAA,mBASsBC,2BAAehC,OAAf,CAAuB;AAAEC,cAAAA,IAAI,EAAEwB;AAAR,aAAvB,CATtB;;AAAA;AASNQ,YAAAA,mBATM;;AAAA,gBAWPlB,aAXO;AAAA;AAAA;AAAA;;AAAA,8CAWejD,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBH,IAAhB,CAAqB;AAAEI,cAAAA,OAAO,qBAAcgC,QAAd;AAAT,aAArB,CAXf;;AAAA;AAAA,gBAYPqB,SAZO;AAAA;AAAA;AAAA;;AAAA,8CAYWjE,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBH,IAAhB,CAAqB;AAAEI,cAAAA,OAAO,wBAAc8C,IAAd;AAAT,aAArB,CAZX;;AAAA;AAAA,gBAaPS,mBAbO;AAAA;AAAA;AAAA;;AAAA,8CAaqBnE,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBH,IAAhB,CAAqB;AAAEI,cAAAA,OAAO,mCAA4B+C,cAA5B;AAAT,aAArB,CAbrB;;AAAA;AAAA,kBAeRC,gBAAgB,IAAI,IAApB,IAA4BA,gBAAgB,IAAIQ,SAfxC;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAgBOnE,iBAAKmD,iBAAL,CAAuBpC,MAAvB,EAA+B;AACxCqC,cAAAA,aAAa,EAAEJ,aAAa,CAACZ,GADW;AAExCM,cAAAA,WAAW,EAAXA,WAFwC;AAGxCW,cAAAA,UAAU,EAAVA,UAHwC;AAIxCC,cAAAA,cAAc,EAAdA,cAJwC;AAKxCC,cAAAA,UAAU,EAAVA,UALwC;AAMxCC,cAAAA,WAAW,EAAXA,WANwC;AAOxCC,cAAAA,IAAI,EAAEO,SAAS,CAAC5B,GAPwB;AAQxCgC,cAAAA,kBAAkB,EAAEF,mBAAmB,CAAC9B,GARA;AASxCwB,cAAAA,iBAAiB,EAAjBA,iBATwC;AAUxCC,cAAAA,YAAY,EAAZA;AAVwC,aAA/B,CAhBP;;AAAA;AAgBPxD,YAAAA,KAhBO;AAAA;AAAA;;AAAA;AAAA;AAAA,mBA6BkBgE,kBAAMpC,OAAN,CAAc;AAAEC,cAAAA,IAAI,EAAEyB;AAAR,aAAd,CA7BlB;;AAAA;AA6BDW,YAAAA,UA7BC;;AAAA,gBA8BFA,UA9BE;AAAA;AAAA;AAAA;;AAAA,8CA8BiBvE,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBH,IAAhB,CAAqB;AAAEI,cAAAA,OAAO,oBAAagD,gBAAb;AAAT,aAArB,CA9BjB;;AAAA;AAAA;AAAA,mBAgCO3D,iBAAKmD,iBAAL,CAAuBpC,MAAvB,EAA+B;AACxCqC,cAAAA,aAAa,EAAEJ,aAAa,CAACZ,GADW;AAExCM,cAAAA,WAAW,EAAXA,WAFwC;AAGxCW,cAAAA,UAAU,EAAVA,UAHwC;AAIxCC,cAAAA,cAAc,EAAdA,cAJwC;AAKxCC,cAAAA,UAAU,EAAVA,UALwC;AAMxCC,cAAAA,WAAW,EAAXA,WANwC;AAOxCC,cAAAA,IAAI,EAAEO,SAAS,CAAC5B,GAPwB;AAQxCgC,cAAAA,kBAAkB,EAAEF,mBAAmB,CAAC9B,GARA;AASxCuB,cAAAA,gBAAgB,EAAEW,UAAU,CAAClC,GATW;AAUxCwB,cAAAA,iBAAiB,EAAjBA,iBAVwC;AAWxCC,cAAAA,YAAY,EAAZA;AAXwC,aAA/B,CAhCP;;AAAA;AAgCPxD,YAAAA,KAhCO;;AAAA;AAAA,iBA+CRA,KA/CQ;AAAA;AAAA;AAAA;;AAgDPN,YAAAA,GAAG,CAACQ,IAAJ,CAAS;AAAEI,cAAAA,OAAO,EAAE;AAAX,aAAT;AAhDO;AAAA;;AAAA;AAAA,8CAkDAZ,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBH,IAAhB,CAAqB;AAAEI,cAAAA,OAAO,EAAE;AAAX,aAArB,CAlDA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAqDZC,YAAAA,OAAO,CAACC,GAAR;AArDY,8CAsDLd,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBH,IAAhB,CAAqB;AAAEI,cAAAA,OAAO,EAAE,aAAIA;AAAf,aAArB,CAtDK;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAtB;;AAAA;AAAA;AAAA;AAAA;;AA0DAf,QAAQ,CAAC2E,YAAT;AAAA,4FAAwB,kBAAOzE,GAAP,EAAYC,GAAZ;AAAA;;AAAA;AAAA;AAAA;AAAA;AACXgB,YAAAA,MADW,GACAjB,GAAG,CAACkB,MADJ,CACXD,MADW;AAAA,yBAE+JjB,GAAG,CAACsB,IAFnK,EAEXsB,WAFW,cAEXA,WAFW,EAEE8B,UAFF,cAEEA,UAFF,EAEcC,gBAFd,cAEcA,gBAFd,EAEgClB,UAFhC,cAEgCA,UAFhC,EAE4CC,WAF5C,cAE4CA,WAF5C,EAEyDb,QAFzD,cAEyDA,QAFzD,EAEmE+B,cAFnE,cAEmEA,cAFnE,EAEmFjB,IAFnF,cAEmFA,IAFnF,EAEyFC,cAFzF,cAEyFA,cAFzF,EAEyGC,gBAFzG,cAEyGA,gBAFzG,EAE2HC,iBAF3H,cAE2HA,iBAF3H,EAE8IC,YAF9I,cAE8IA,YAF9I;AAAA;AAKVxD,YAAAA,KALU,GAKF,IALE;AAAA;AAAA,mBAOc0C,qBAASd,OAAT,CAAiB;AAAEC,cAAAA,IAAI,EAAES;AAAR,aAAjB,CAPd;;AAAA;AAORK,YAAAA,aAPQ;AAAA;AAAA,mBAQY2B,mBAAO1C,OAAP,CAAe;AAAEC,cAAAA,IAAI,EAAEwC;AAAR,aAAf,CARZ;;AAAA;AAQRE,YAAAA,WARQ;AAAA;AAAA,mBASUd,oBAAQ7B,OAAR,CAAgB;AAAE8B,cAAAA,OAAO,EAAEN;AAAX,aAAhB,CATV;;AAAA;AASRO,YAAAA,SATQ;AAAA;AAAA,mBAUoBC,2BAAehC,OAAf,CAAuB;AAAEC,cAAAA,IAAI,EAAEwB;AAAR,aAAvB,CAVpB;;AAAA;AAURQ,YAAAA,mBAVQ;;AAAA,gBAYTlB,aAZS;AAAA;AAAA;AAAA;;AAAA,8CAYajD,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBH,IAAhB,CAAqB;AAAEI,cAAAA,OAAO,qBAAcgC,QAAd;AAAT,aAArB,CAZb;;AAAA;AAAA,gBAaTiC,WAbS;AAAA;AAAA;AAAA;;AAAA,8CAaW7E,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBH,IAAhB,CAAqB;AAAEI,cAAAA,OAAO,mBAAY+D,cAAZ;AAAT,aAArB,CAbX;;AAAA;AAAA,gBAcTV,SAdS;AAAA;AAAA;AAAA;;AAAA,8CAcSjE,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBH,IAAhB,CAAqB;AAAEI,cAAAA,OAAO,wBAAc8C,IAAd;AAAT,aAArB,CAdT;;AAAA;AAAA,gBAeTS,mBAfS;AAAA;AAAA;AAAA;;AAAA,8CAemBnE,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBH,IAAhB,CAAqB;AAAEI,cAAAA,OAAO,mCAA4B+C,cAA5B;AAAT,aAArB,CAfnB;;AAAA;AAAA,kBAiBVC,gBAAgB,IAAI,IAApB,IAA4BA,gBAAgB,IAAIQ,SAjBtC;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAkBKnE,iBAAKmD,iBAAL,CAAuBpC,MAAvB,EAA+B;AACxCqC,cAAAA,aAAa,EAAEJ,aAAa,CAACZ,GADW;AAExCM,cAAAA,WAAW,EAAXA,WAFwC;AAGxC8B,cAAAA,UAAU,EAAVA,UAHwC;AAIxCC,cAAAA,gBAAgB,EAAhBA,gBAJwC;AAKxClB,cAAAA,UAAU,EAAVA,UALwC;AAMxCC,cAAAA,WAAW,EAAXA,WANwC;AAOxCkB,cAAAA,cAAc,EAAEE,WAAW,CAACxC,GAPY;AAQxCqB,cAAAA,IAAI,EAAEO,SAAS,CAAC5B,GARwB;AASxCgC,cAAAA,kBAAkB,EAAEF,mBAAmB,CAAC9B,GATA;AAUxCwB,cAAAA,iBAAiB,EAAjBA,iBAVwC;AAWxCC,cAAAA,YAAY,EAAZA;AAXwC,aAA/B,CAlBL;;AAAA;AAkBTxD,YAAAA,KAlBS;AAAA;AAAA;;AAAA;AAAA;AAAA,mBAgCgBgE,kBAAMpC,OAAN,CAAc;AAAEC,cAAAA,IAAI,EAAEyB;AAAR,aAAd,CAhChB;;AAAA;AAgCHW,YAAAA,UAhCG;;AAAA,gBAiCJA,UAjCI;AAAA;AAAA;AAAA;;AAAA,8CAiCevE,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBH,IAAhB,CAAqB;AAAEI,cAAAA,OAAO,oBAAagD,gBAAb;AAAT,aAArB,CAjCf;;AAAA;AAAA;AAAA,mBAmCK3D,iBAAKmD,iBAAL,CAAuBpC,MAAvB,EAA+B;AACxCqC,cAAAA,aAAa,EAAEJ,aAAa,CAACZ,GADW;AAExCM,cAAAA,WAAW,EAAXA,WAFwC;AAGxC8B,cAAAA,UAAU,EAAVA,UAHwC;AAIxCC,cAAAA,gBAAgB,EAAhBA,gBAJwC;AAKxClB,cAAAA,UAAU,EAAVA,UALwC;AAMxCC,cAAAA,WAAW,EAAXA,WANwC;AAOxCkB,cAAAA,cAAc,EAAEE,WAAW,CAACxC,GAPY;AAQxCqB,cAAAA,IAAI,EAAEO,SAAS,CAAC5B,GARwB;AASxCgC,cAAAA,kBAAkB,EAAEF,mBAAmB,CAAC9B,GATA;AAUxCuB,cAAAA,gBAAgB,EAAEW,UAAU,CAAClC,GAVW;AAWxCwB,cAAAA,iBAAiB,EAAjBA,iBAXwC;AAYxCC,cAAAA,YAAY,EAAZA;AAZwC,aAA/B,CAnCL;;AAAA;AAmCTxD,YAAAA,KAnCS;;AAAA;AAAA,iBAmDVA,KAnDU;AAAA;AAAA;AAAA;;AAoDTN,YAAAA,GAAG,CAACQ,IAAJ,CAAS;AAAEI,cAAAA,OAAO,EAAE;AAAX,aAAT;AApDS;AAAA;;AAAA;AAAA,8CAsDFZ,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBH,IAAhB,CAAqB;AAAEI,cAAAA,OAAO,EAAE;AAAX,aAArB,CAtDE;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAyDdC,YAAAA,OAAO,CAACC,GAAR;AAzDc,8CA0DPd,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBH,IAAhB,CAAqB;AAAEI,cAAAA,OAAO,EAAE,aAAIA;AAAf,aAArB,CA1DO;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAxB;;AAAA;AAAA;AAAA;AAAA;;AA8DAf,QAAQ,CAACiF,UAAT;AAAA,4FAAsB,kBAAO/E,GAAP,EAAYC,GAAZ;AAAA;;AAAA;AAAA;AAAA;AAAA;AACTgB,YAAAA,MADS,GACEjB,GAAG,CAACkB,MADN,CACTD,MADS;AAAA,yBAEiIjB,GAAG,CAACsB,IAFrI,EAETsC,cAFS,cAETA,cAFS,EAEOC,gBAFP,cAEOA,gBAFP,EAEyBC,iBAFzB,cAEyBA,iBAFzB,EAE4CC,YAF5C,cAE4CA,YAF5C,EAE0DnB,WAF1D,cAE0DA,WAF1D,EAEuEmC,UAFvE,cAEuEA,UAFvE,EAEmFC,gBAFnF,cAEmFA,gBAFnF,EAEqGvB,UAFrG,cAEqGA,UAFrG,EAEiHC,WAFjH,cAEiHA,WAFjH;AAAA;AAKRnD,YAAAA,KALQ,GAKA,IALA;AAAA;AAAA,mBAOsB4D,2BAAehC,OAAf,CAAuB;AAAEC,cAAAA,IAAI,EAAEwB;AAAR,aAAvB,CAPtB;;AAAA;AAONQ,YAAAA,mBAPM;;AAAA,gBAQPA,mBARO;AAAA;AAAA;AAAA;;AAAA,8CAQqBnE,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBH,IAAhB,CAAqB;AAAEI,cAAAA,OAAO,mCAA4B+C,cAA5B;AAAT,aAArB,CARrB;;AAAA;AAAA,kBAURC,gBAAgB,IAAI,IAApB,IAA4BA,gBAAgB,IAAIQ,SAVxC;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAWOnE,iBAAKmD,iBAAL,CAAuBpC,MAAvB,EAA+B;AACxCqD,cAAAA,kBAAkB,EAAEF,mBAAmB,CAAC9B,GADA;AAExCwB,cAAAA,iBAAiB,EAAjBA,iBAFwC;AAGxCC,cAAAA,YAAY,EAAZA,YAHwC;AAIxCnB,cAAAA,WAAW,EAAXA,WAJwC;AAKxCmC,cAAAA,UAAU,EAAVA,UALwC;AAMxCC,cAAAA,gBAAgB,EAAhBA,gBANwC;AAOxCvB,cAAAA,UAAU,EAAVA,UAPwC;AAQxCC,cAAAA,WAAW,EAAXA;AARwC,aAA/B,CAXP;;AAAA;AAWPnD,YAAAA,KAXO;AAAA;AAAA;;AAAA;AAAA;AAAA,mBAsBkBgE,kBAAMpC,OAAN,CAAc;AAAEC,cAAAA,IAAI,EAAEyB;AAAR,aAAd,CAtBlB;;AAAA;AAsBDW,YAAAA,UAtBC;;AAAA,gBAuBFA,UAvBE;AAAA;AAAA;AAAA;;AAAA,8CAuBiBvE,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBH,IAAhB,CAAqB;AAAEI,cAAAA,OAAO,oBAAagD,gBAAb;AAAT,aAArB,CAvBjB;;AAAA;AAAA;AAAA,mBAyBO3D,iBAAKmD,iBAAL,CAAuBpC,MAAvB,EAA+B;AACxCqD,cAAAA,kBAAkB,EAAEF,mBAAmB,CAAC9B,GADA;AAExCuB,cAAAA,gBAAgB,EAAEW,UAAU,CAAClC,GAFW;AAGxCwB,cAAAA,iBAAiB,EAAjBA,iBAHwC;AAIxCC,cAAAA,YAAY,EAAZA,YAJwC;AAKxCnB,cAAAA,WAAW,EAAXA,WALwC;AAMxCmC,cAAAA,UAAU,EAAVA,UANwC;AAOxCC,cAAAA,gBAAgB,EAAhBA,gBAPwC;AAQxCvB,cAAAA,UAAU,EAAVA,UARwC;AASxCC,cAAAA,WAAW,EAAXA;AATwC,aAA/B,CAzBP;;AAAA;AAyBPnD,YAAAA,KAzBO;;AAAA;AAAA,iBAsCRA,KAtCQ;AAAA;AAAA;AAAA;;AAuCPN,YAAAA,GAAG,CAACQ,IAAJ,CAAS;AAAEI,cAAAA,OAAO,EAAE;AAAX,aAAT;AAvCO;AAAA;;AAAA;AAAA,8CAyCAZ,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBH,IAAhB,CAAqB;AAAEI,cAAAA,OAAO,EAAE;AAAX,aAArB,CAzCA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AA4CZC,YAAAA,OAAO,CAACC,GAAR;AA5CY,8CA6CLd,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBH,IAAhB,CAAqB;AAAEI,cAAAA,OAAO,EAAE,aAAIA;AAAf,aAArB,CA7CK;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAtB;;AAAA;AAAA;AAAA;AAAA;;AAiDAf,QAAQ,CAACmF,WAAT;AAAA,4FAAuB,kBAAOjF,GAAP,EAAYC,GAAZ;AAAA;;AAAA;AAAA;AAAA;AAAA;AACVgB,YAAAA,MADU,GACCjB,GAAG,CAACkB,MADL,CACVD,MADU;AAAA,yBAEiFjB,GAAG,CAACsB,IAFrF,EAEVsB,WAFU,cAEVA,WAFU,EAEGqC,WAFH,cAEGA,WAFH,EAEgBC,eAFhB,cAEgBA,eAFhB,EAEiCC,kBAFjC,cAEiCA,kBAFjC,EAEqD1B,UAFrD,cAEqDA,UAFrD,EAEiEC,WAFjE,cAEiEA,WAFjE;AAAA;AAAA;AAAA,mBAKOxD,iBAAKmD,iBAAL,CAAuBpC,MAAvB,EAA+B;AAC9C2B,cAAAA,WAAW,EAAXA,WAD8C;AAE9CqC,cAAAA,WAAW,EAAXA,WAF8C;AAG9CC,cAAAA,eAAe,EAAfA,eAH8C;AAI9CC,cAAAA,kBAAkB,EAAlBA,kBAJ8C;AAK9C1B,cAAAA,UAAU,EAAVA,UAL8C;AAM9CC,cAAAA,WAAW,EAAXA;AAN8C,aAA/B,CALP;;AAAA;AAKPnD,YAAAA,KALO;;AAAA,iBAcTA,KAdS;AAAA;AAAA;AAAA;;AAeRN,YAAAA,GAAG,CAACQ,IAAJ,CAAS;AAAEI,cAAAA,OAAO,EAAE;AAAX,aAAT;AAfQ;AAAA;;AAAA;AAAA,8CAiBDZ,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBH,IAAhB,CAAqB;AAAEI,cAAAA,OAAO,EAAE;AAAX,aAArB,CAjBC;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAoBbC,YAAAA,OAAO,CAACC,GAAR;AApBa,8CAqBNd,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBH,IAAhB,CAAqB;AAAEI,cAAAA,OAAO,EAAE,aAAIA;AAAf,aAArB,CArBM;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAvB;;AAAA;AAAA;AAAA;AAAA;;AAyBAf,QAAQ,CAACsF,YAAT;AAAA,4FAAwB,kBAAOpF,GAAP,EAAYC,GAAZ;AAAA;;AAAA;AAAA;AAAA;AAAA;AACXgB,YAAAA,MADW,GACAjB,GAAG,CAACkB,MADJ,CACXD,MADW;AAAA,yBAEwDjB,GAAG,CAACsB,IAF5D,EAEXsB,WAFW,cAEXA,WAFW,EAEEyC,iBAFF,cAEEA,iBAFF,EAEqBD,YAFrB,cAEqBA,YAFrB,EAEmCE,gBAFnC,cAEmCA,gBAFnC;AAAA;AAAA;AAAA,mBAKYC,6BAAiBpD,OAAjB,CAAyB;AAAEC,cAAAA,IAAI,EAAEiD;AAAR,aAAzB,CALZ;;AAAA;AAKRG,YAAAA,WALQ;;AAAA,gBAMTA,WANS;AAAA;AAAA;AAAA;;AAAA,8CAMWvF,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBH,IAAhB,CAAqB;AAAEI,cAAAA,OAAO,mBAAYwE,iBAAZ;AAAT,aAArB,CANX;;AAAA;AAAA;AAAA,mBAQMnF,iBAAKmD,iBAAL,CAAuBpC,MAAvB,EAA+B;AAC9C2B,cAAAA,WAAW,EAAXA,WAD8C;AAE9CyC,cAAAA,iBAAiB,EAAEG,WAAW,CAAClD,GAFe;AAG9C8C,cAAAA,YAAY,EAAZA,YAH8C;AAI9CE,cAAAA,gBAAgB,EAAhBA;AAJ8C,aAA/B,CARN;;AAAA;AAQR/E,YAAAA,KARQ;;AAAA,iBAeVA,KAfU;AAAA;AAAA;AAAA;;AAgBTN,YAAAA,GAAG,CAACQ,IAAJ,CAAS;AAAEI,cAAAA,OAAO,EAAE;AAAX,aAAT;AAhBS;AAAA;;AAAA;AAAA,8CAkBFZ,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBH,IAAhB,CAAqB;AAAEI,cAAAA,OAAO,EAAE;AAAX,aAArB,CAlBE;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAqBdC,YAAAA,OAAO,CAACC,GAAR;AArBc,8CAsBPd,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBH,IAAhB,CAAqB;AAAEI,cAAAA,OAAO,EAAE,aAAIA;AAAf,aAArB,CAtBO;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAxB;;AAAA;AAAA;AAAA;AAAA;;AA0BAf,QAAQ,CAAC2F,SAAT;AAAA,6FAAqB,mBAAOzF,GAAP,EAAYC,GAAZ;AAAA;;AAAA;AAAA;AAAA;AAAA;AACRgB,YAAAA,MADQ,GACGjB,GAAG,CAACkB,MADP,CACRD,MADQ;AAAA,yBAEwCjB,GAAG,CAACsB,IAF5C,EAER+D,iBAFQ,cAERA,iBAFQ,EAEWI,SAFX,cAEWA,SAFX,EAEsBC,aAFtB,cAEsBA,aAFtB;AAAA;AAAA;AAAA,mBAKeH,6BAAiBpD,OAAjB,CAAyB;AAAEC,cAAAA,IAAI,EAAEiD;AAAR,aAAzB,CALf;;AAAA;AAKLG,YAAAA,WALK;;AAAA,gBAMNA,WANM;AAAA;AAAA;AAAA;;AAAA,+CAMcvF,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBH,IAAhB,CAAqB;AAAEI,cAAAA,OAAO,mBAAYwE,iBAAZ;AAAT,aAArB,CANd;;AAAA;AAAA;AAAA,mBAQSnF,iBAAKmD,iBAAL,CAAuBpC,MAAvB,EAA+B;AAC9CoE,cAAAA,iBAAiB,EAAEG,WAAW,CAAClD,GADe;AAE9CmD,cAAAA,SAAS,EAATA,SAF8C;AAG9CC,cAAAA,aAAa,EAAbA;AAH8C,aAA/B,CART;;AAAA;AAQLnF,YAAAA,KARK;;AAAA,iBAcPA,KAdO;AAAA;AAAA;AAAA;;AAeNN,YAAAA,GAAG,CAACQ,IAAJ,CAAS;AAAEI,cAAAA,OAAO,EAAE;AAAX,aAAT;AAfM;AAAA;;AAAA;AAAA,+CAiBCZ,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBH,IAAhB,CAAqB;AAAEI,cAAAA,OAAO,EAAE;AAAX,aAArB,CAjBD;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAoBXC,YAAAA,OAAO,CAACC,GAAR;AApBW,+CAqBJd,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBH,IAAhB,CAAqB;AAAEI,cAAAA,OAAO,EAAE,cAAIA;AAAf,aAArB,CArBI;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAArB;;AAAA;AAAA;AAAA;AAAA;;AAyBAf,QAAQ,CAAC6F,MAAT;AAAA,6FAAkB,mBAAO3F,GAAP,EAAYC,GAAZ;AAAA;;AAAA;AAAA;AAAA;AAAA;AACLgB,YAAAA,MADK,GACMjB,GAAG,CAACkB,MADV,CACLD,MADK;AAAA,yBAEqCjB,GAAG,CAACsB,IAFzC,EAEL+D,iBAFK,cAELA,iBAFK,EAEcM,MAFd,cAEcA,MAFd,EAEsBC,UAFtB,cAEsBA,UAFtB;AAAA;AAAA;AAAA,mBAKkBL,6BAAiBpD,OAAjB,CAAyB;AAAEC,cAAAA,IAAI,EAAEiD;AAAR,aAAzB,CALlB;;AAAA;AAKFG,YAAAA,WALE;;AAAA,gBAMHA,WANG;AAAA;AAAA;AAAA;;AAAA,+CAMiBvF,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBH,IAAhB,CAAqB;AAAEI,cAAAA,OAAO,mBAAYwE,iBAAZ;AAAT,aAArB,CANjB;;AAAA;AAAA;AAAA,mBAQYnF,iBAAKmD,iBAAL,CAAuBpC,MAAvB,EAA+B;AAC9CoE,cAAAA,iBAAiB,EAAEG,WAAW,CAAClD,GADe;AAE9CqD,cAAAA,MAAM,EAANA,MAF8C;AAG9CC,cAAAA,UAAU,EAAVA;AAH8C,aAA/B,CARZ;;AAAA;AAQFrF,YAAAA,KARE;;AAAA,iBAcJA,KAdI;AAAA;AAAA;AAAA;;AAeHN,YAAAA,GAAG,CAACQ,IAAJ,CAAS;AAAEI,cAAAA,OAAO,EAAE;AAAX,aAAT;AAfG;AAAA;;AAAA;AAAA,+CAiBIZ,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBH,IAAhB,CAAqB;AAAEI,cAAAA,OAAO,EAAE;AAAX,aAArB,CAjBJ;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAoBRC,YAAAA,OAAO,CAACC,GAAR;AApBQ,+CAqBDd,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBH,IAAhB,CAAqB;AAAEI,cAAAA,OAAO,EAAE,cAAIA;AAAf,aAArB,CArBC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAlB;;AAAA;AAAA;AAAA;AAAA;;AAyBAf,QAAQ,CAAC+F,OAAT;AAAA,6FAAmB,mBAAO7F,GAAP,EAAYC,GAAZ;AAAA;;AAAA;AAAA;AAAA;AAAA;AACNgB,YAAAA,MADM,GACKjB,GAAG,CAACkB,MADT,CACND,MADM;AAAA,0BAEsCjB,GAAG,CAACsB,IAF1C,EAEN+D,iBAFM,eAENA,iBAFM,EAEaQ,OAFb,eAEaA,OAFb,EAEsBC,WAFtB,eAEsBA,WAFtB;AAAA;AAAA;AAAA,mBAKiBP,6BAAiBpD,OAAjB,CAAyB;AAAEC,cAAAA,IAAI,EAAEiD;AAAR,aAAzB,CALjB;;AAAA;AAKHG,YAAAA,WALG;;AAAA,gBAMJA,WANI;AAAA;AAAA;AAAA;;AAAA,+CAMgBvF,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBH,IAAhB,CAAqB;AAAEI,cAAAA,OAAO,mBAAYwE,iBAAZ;AAAT,aAArB,CANhB;;AAAA;AAAA;AAAA,mBAQWnF,iBAAKmD,iBAAL,CAAuBpC,MAAvB,EAA+B;AAC9CoE,cAAAA,iBAAiB,EAAEG,WAAW,CAAClD,GADe;AAE9CuD,cAAAA,OAAO,EAAPA,OAF8C;AAG9CC,cAAAA,WAAW,EAAXA;AAH8C,aAA/B,CARX;;AAAA;AAQHvF,YAAAA,KARG;;AAAA,iBAcLA,KAdK;AAAA;AAAA;AAAA;;AAeJN,YAAAA,GAAG,CAACQ,IAAJ,CAAS;AAAEI,cAAAA,OAAO,EAAE;AAAX,aAAT;AAfI;AAAA;;AAAA;AAAA,+CAiBGZ,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBH,IAAhB,CAAqB;AAAEI,cAAAA,OAAO,EAAE;AAAX,aAArB,CAjBH;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAoBTC,YAAAA,OAAO,CAACC,GAAR;AApBS,+CAqBFd,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBH,IAAhB,CAAqB;AAAEI,cAAAA,OAAO,EAAE,cAAIA;AAAf,aAArB,CArBE;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAnB;;AAAA;AAAA;AAAA;AAAA;;AAyBAf,QAAQ,CAACiG,aAAT;AAAA,6FAAyB,mBAAO/F,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AACZgB,YAAAA,MADY,GACDjB,GAAG,CAACkB,MADH,CACZD,MADY;AAAA;AAAA;AAAA,mBAIKf,iBAAK8F,iBAAL,CAAuB/E,MAAvB,CAJL;;AAAA;AAITV,YAAAA,KAJS;;AAAA,iBAMXA,KANW;AAAA;AAAA;AAAA;;AAOVN,YAAAA,GAAG,CAACQ,IAAJ,CAAS;AAAEI,cAAAA,OAAO,EAAE;AAAX,aAAT;AAPU;AAAA;;AAAA;AAAA,+CASHZ,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBH,IAAhB,CAAqB;AAAEI,cAAAA,OAAO,EAAE;AAAX,aAArB,CATG;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAYfC,YAAAA,OAAO,CAACC,GAAR;AAZe,+CAaRd,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBH,IAAhB,CAAqB;AAAEI,cAAAA,OAAO,EAAE,cAAIA;AAAf,aAArB,CAbQ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAzB;;AAAA;AAAA;AAAA;AAAA;;AAiBAf,QAAQ,CAACmG,oBAAT;AAAA,6FAAgC,mBAAOjG,GAAP,EAAYC,GAAZ;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,0BACJD,GAAG,CAACsB,IADA,EACnB4E,KADmB,eACnBA,KADmB,EACZC,GADY,eACZA,GADY;AAAA;AAAA;AAAA,mBAIFjG,iBAAKC,IAAL,CAAU;AACzB4B,cAAAA,aAAa,EAAE;AACVqE,gBAAAA,IAAI,EAAE,IAAIC,IAAJ,CAASH,KAAT,CADI;AAEVI,gBAAAA,IAAI,EAAE,IAAID,IAAJ,CAASF,GAAT;AAFI;AADU,aAAV,EAMdI,IANc,CAMT;AAAExE,cAAAA,aAAa,EAAE,CAAC;AAAlB,aANS,EAOd3B,QAPc,CAOL;AACLC,cAAAA,IAAI,EAAE,eADD;AAELC,cAAAA,MAAM,EAAE;AAFH,aAPK,EAWdF,QAXc,CAWL;AACLC,cAAAA,IAAI,EAAE,YADD;AAELC,cAAAA,MAAM,EAAE;AAFH,aAXK,EAedF,QAfc,CAeL;AACLC,cAAAA,IAAI,EAAE,oBADD;AAELC,cAAAA,MAAM,EAAE;AAFH,aAfK,EAmBdF,QAnBc,CAmBL;AACLC,cAAAA,IAAI,EAAE,kBADD;AAELC,cAAAA,MAAM,EAAE;AAFH,aAnBK,EAuBdF,QAvBc,CAuBL;AACLC,cAAAA,IAAI,EAAE,mBADD;AAELC,cAAAA,MAAM,EAAE;AAFH,aAvBK,EA2BdF,QA3Bc,CA2BL;AACLC,cAAAA,IAAI,EAAE,MADD;AAELC,cAAAA,MAAM,EAAE,+BAFH;AAGLF,cAAAA,QAAQ,EAAE,CACL;AACKC,gBAAAA,IAAI,EAAE,QADX;AAEKC,gBAAAA,MAAM,EAAE;AAFb,eADK,EAKL;AACKD,gBAAAA,IAAI,EAAE,OADX;AAEKC,gBAAAA,MAAM,EAAE,mBAFb;AAGKF,gBAAAA,QAAQ,EAAE;AACLC,kBAAAA,IAAI,EAAE,OADD;AAELC,kBAAAA,MAAM,EAAE;AAFH;AAHf,eALK;AAHL,aA3BK,EA6CdF,QA7Cc,CA6CL;AACLC,cAAAA,IAAI,EAAE,gBADD;AAELC,cAAAA,MAAM,EAAE,wBAFH;AAGLF,cAAAA,QAAQ,EAAE;AACLC,gBAAAA,IAAI,EAAE,OADD;AAELC,gBAAAA,MAAM,EAAE;AAFH;AAHL,aA7CK,EAqDdF,QArDc,CAqDL;AACLC,cAAAA,IAAI,EAAE,WADD;AAELC,cAAAA,MAAM,EAAE;AAFH,aArDK,CAJE;;AAAA;AAIhBC,YAAAA,KAJgB;;AAAA,kBA8DlBA,KAAK,CAACC,MAAN,GAAe,CA9DG;AAAA;AAAA;AAAA;;AA+DjBP,YAAAA,GAAG,CAACQ,IAAJ,CAAS;AAAEC,cAAAA,KAAK,EAAEH,KAAK,CAACC,MAAf;AAAuBgG,cAAAA,KAAK,EAAEjG;AAA9B,aAAT;AA/DiB;AAAA;;AAAA;AAAA,+CAiEVN,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBH,IAAhB,CAAqB;AAAEI,cAAAA,OAAO,EAAE;AAAX,aAArB,CAjEU;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAoEtBC,YAAAA,OAAO,CAACC,GAAR;AApEsB,+CAqEfd,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBH,IAAhB,CAAqB;AAAEI,cAAAA,OAAO,EAAE,cAAIA;AAAf,aAArB,CArEe;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAhC;;AAAA;AAAA;AAAA;AAAA;;AAyEAf,QAAQ,CAAC2G,kBAAT;AAAA,6FAA8B,mBAAOzG,GAAP,EAAYC,GAAZ;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,0BACWD,GAAG,CAACsB,IADf,EACjBsB,WADiB,eACjBA,WADiB,EACJsD,KADI,eACJA,KADI,EACGC,GADH,eACGA,GADH;AAAA;AAAA;AAAA,mBAIAjG,iBAAKC,IAAL,CAAU;AACzByC,cAAAA,WAAW,EAAXA,WADyB;AAEzBwC,cAAAA,YAAY,EAAE,IAFW;AAGzBE,cAAAA,gBAAgB,EAAE;AACbc,gBAAAA,IAAI,EAAE,IAAIC,IAAJ,CAASH,KAAT,CADO;AAEbI,gBAAAA,IAAI,EAAE,IAAID,IAAJ,CAASF,GAAT;AAFO;AAHO,aAAV,EAQdI,IARc,CAQT;AAAEjB,cAAAA,gBAAgB,EAAE,CAAC;AAArB,aARS,EASdlF,QATc,CASL;AACLC,cAAAA,IAAI,EAAE,eADD;AAELC,cAAAA,MAAM,EAAE;AAFH,aATK,EAadF,QAbc,CAaL;AACLC,cAAAA,IAAI,EAAE,YADD;AAELC,cAAAA,MAAM,EAAE;AAFH,aAbK,EAiBdF,QAjBc,CAiBL;AACLC,cAAAA,IAAI,EAAE,oBADD;AAELC,cAAAA,MAAM,EAAE;AAFH,aAjBK,EAqBdF,QArBc,CAqBL;AACLC,cAAAA,IAAI,EAAE,kBADD;AAELC,cAAAA,MAAM,EAAE;AAFH,aArBK,EAyBdF,QAzBc,CAyBL;AACLC,cAAAA,IAAI,EAAE,mBADD;AAELC,cAAAA,MAAM,EAAE;AAFH,aAzBK,EA6BdF,QA7Bc,CA6BL;AACLC,cAAAA,IAAI,EAAE,MADD;AAELC,cAAAA,MAAM,EAAE,+BAFH;AAGLF,cAAAA,QAAQ,EAAE,CACL;AACKC,gBAAAA,IAAI,EAAE,QADX;AAEKC,gBAAAA,MAAM,EAAE;AAFb,eADK,EAKL;AACKD,gBAAAA,IAAI,EAAE,OADX;AAEKC,gBAAAA,MAAM,EAAE,mBAFb;AAGKF,gBAAAA,QAAQ,EAAE;AACLC,kBAAAA,IAAI,EAAE,OADD;AAELC,kBAAAA,MAAM,EAAE;AAFH;AAHf,eALK;AAHL,aA7BK,EA+CdF,QA/Cc,CA+CL;AACLC,cAAAA,IAAI,EAAE,gBADD;AAELC,cAAAA,MAAM,EAAE,wBAFH;AAGLF,cAAAA,QAAQ,EAAE;AACLC,gBAAAA,IAAI,EAAE,OADD;AAELC,gBAAAA,MAAM,EAAE;AAFH;AAHL,aA/CK,EAuDdF,QAvDc,CAuDL;AACLC,cAAAA,IAAI,EAAE,WADD;AAELC,cAAAA,MAAM,EAAE;AAFH,aAvDK,CAJA;;AAAA;AAIdC,YAAAA,KAJc;;AAAA,kBAgEhBA,KAAK,CAACC,MAAN,GAAe,CAhEC;AAAA;AAAA;AAAA;;AAiEfP,YAAAA,GAAG,CAACQ,IAAJ,CAAS;AAAEC,cAAAA,KAAK,EAAEH,KAAK,CAACC,MAAf;AAAuBgG,cAAAA,KAAK,EAAEjG;AAA9B,aAAT;AAjEe;AAAA;;AAAA;AAAA,+CAmERN,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBH,IAAhB,CAAqB;AAAEI,cAAAA,OAAO,EAAE;AAAX,aAArB,CAnEQ;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAsEpBC,YAAAA,OAAO,CAACC,GAAR;AAtEoB,+CAuEbd,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBH,IAAhB,CAAqB;AAAEI,cAAAA,OAAO,EAAE,cAAIA;AAAf,aAArB,CAvEa;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA9B;;AAAA;AAAA;AAAA;AAAA;;AA2EAf,QAAQ,CAAC4G,6BAAT;AAAA,6FAAyC,mBAAO1G,GAAP,EAAYC,GAAZ;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,0BACbD,GAAG,CAACsB,IADS,EAC5B4E,KAD4B,eAC5BA,KAD4B,EACrBC,GADqB,eACrBA,GADqB;AAAA;AAIzBQ,YAAAA,MAJyB,GAIhB;AAAE5E,cAAAA,aAAa,EAAE;AAAEqE,gBAAAA,IAAI,EAAE,IAAIC,IAAJ,CAASH,KAAT,CAAR;AAAyBI,gBAAAA,IAAI,EAAE,IAAID,IAAJ,CAASF,GAAT;AAA/B;AAAjB,aAJgB;AAAA;AAAA,mBAKXjG,iBAAK0G,SAAL,CAAe,CAC9B;AACKC,cAAAA,MAAM,EAAEF;AADb,aAD8B,EAI9B;AACKG,cAAAA,MAAM,EAAE;AACHxE,gBAAAA,GAAG,EAAE,oBADF;AAEHyE,gBAAAA,SAAS,EAAE;AAAEC,kBAAAA,IAAI,EAAE;AAAR;AAFR;AADb,aAJ8B,EAU9B;AACKC,cAAAA,KAAK,EAAE;AAAEF,gBAAAA,SAAS,EAAE,CAAC;AAAd;AADZ,aAV8B,CAAf,CALW;;AAAA;AAKzBxG,YAAAA,KALyB;;AAAA,kBAoB3BA,KAAK,CAACC,MAAN,GAAe,CApBY;AAAA;AAAA;AAAA;;AAqB1BP,YAAAA,GAAG,CAACQ,IAAJ,CAAS;AAAEC,cAAAA,KAAK,EAAEH,KAAK,CAACC,MAAf;AAAuB0G,cAAAA,OAAO,EAAE3G;AAAhC,aAAT;AArB0B;AAAA;;AAAA;AAAA,+CAuBnBN,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBH,IAAhB,CAAqB;AAAEI,cAAAA,OAAO,EAAE;AAAX,aAArB,CAvBmB;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AA0B/BC,YAAAA,OAAO,CAACC,GAAR;AA1B+B,+CA2BxBd,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBH,IAAhB,CAAqB;AAAEI,cAAAA,OAAO,EAAE,cAAIA;AAAf,aAArB,CA3BwB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAzC;;AAAA;AAAA;AAAA;AAAA;;AA+BAf,QAAQ,CAACqH,iBAAT;AAAA,6FAA6B,mBAAOnH,GAAP,EAAYC,GAAZ;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,0BACOD,GAAG,CAACsB,IADX,EAChB8F,MADgB,eAChBA,MADgB,EACRlB,KADQ,eACRA,KADQ,EACDC,GADC,eACDA,GADC;AAAA;AAAA;AAAA,mBAICjG,iBAAKC,IAAL,CAAU;AACzByC,cAAAA,WAAW,EAAE;AAAEyE,gBAAAA,MAAM,EAAE,OAAOD,MAAP,GAAgB;AAA1B,eADY;AAEzBrF,cAAAA,aAAa,EAAE;AAAEqE,gBAAAA,IAAI,EAAE,IAAIC,IAAJ,CAASH,KAAT,CAAR;AAAyBI,gBAAAA,IAAI,EAAE,IAAID,IAAJ,CAASF,GAAT;AAA/B;AAFU,aAAV,EAGjBmB,cAHiB,EAJD;;AAAA;AAIb/G,YAAAA,KAJa;;AAQnB,gBAAIA,KAAK,IAAI,CAAb,EAAgB;AACXN,cAAAA,GAAG,CAACQ,IAAJ,CAAS;AAAE8G,gBAAAA,GAAG,EAAEhH;AAAP,eAAT;AACJ;;AAVkB;AAAA;;AAAA;AAAA;AAAA;AAYnBO,YAAAA,OAAO,CAACC,GAAR;AAZmB,+CAaZd,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBH,IAAhB,CAAqB;AAAEI,cAAAA,OAAO,EAAE,cAAIA;AAAf,aAArB,CAbY;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA7B;;AAAA;AAAA;AAAA;AAAA;;AAiBAf,QAAQ,CAAC0H,0BAAT;AAAA,6FAAsC,mBAAOxH,GAAP,EAAYC,GAAZ;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,0BACUD,GAAG,CAACsB,IADd,EACzBmE,SADyB,eACzBA,SADyB,EACdI,OADc,eACdA,OADc,EACLK,KADK,eACLA,KADK,EACEC,GADF,eACEA,GADF;AAAA;AAI5B;AACI5F,YAAAA,KALwB,GAKhB,IALgB;;AAAA,iBAOxBsF,OAPwB;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAQT3F,iBAAKC,IAAL,CAAU;AACnB;AACAsF,cAAAA,SAAS,EAATA,SAFmB;AAGnBI,cAAAA,OAAO,EAAPA,OAHmB;AAInBP,cAAAA,gBAAgB,EAAE;AAAEc,gBAAAA,IAAI,EAAE,IAAIC,IAAJ,CAASH,KAAT,CAAR;AAAyBI,gBAAAA,IAAI,EAAE,IAAID,IAAJ,CAASF,GAAT;AAA/B;AAJC,aAAV,EAKXmB,cALW,EARS;;AAAA;AAQvB/G,YAAAA,KARuB;AAAA;AAAA;;AAAA;AAAA;AAAA,mBAeTL,iBAAKC,IAAL,CAAU;AACnB;AACAsF,cAAAA,SAAS,EAATA,SAFmB;AAGnBH,cAAAA,gBAAgB,EAAE;AAAEc,gBAAAA,IAAI,EAAE,IAAIC,IAAJ,CAASH,KAAT,CAAR;AAAyBI,gBAAAA,IAAI,EAAE,IAAID,IAAJ,CAASF,GAAT;AAA/B;AAHC,aAAV,EAIXmB,cAJW,EAfS;;AAAA;AAevB/G,YAAAA,KAfuB;;AAAA;AAsB5B,gBAAIA,KAAK,IAAI,CAAb,EAAgB;AACXN,cAAAA,GAAG,CAACQ,IAAJ,CAAS;AAAE8G,gBAAAA,GAAG,EAAEhH;AAAP,eAAT;AACJ;;AAxB2B;AAAA;;AAAA;AAAA;AAAA;AA0B5BO,YAAAA,OAAO,CAACC,GAAR;AA1B4B,+CA2BrBd,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBH,IAAhB,CAAqB;AAAEI,cAAAA,OAAO,EAAE,cAAIA;AAAf,aAArB,CA3BqB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAtC;;AAAA;AAAA;AAAA;AAAA;;AA+BAf,QAAQ,CAAC2H,sCAAT;AAAA,6FAAkD,mBAAOzH,GAAP,EAAYC,GAAZ;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,0BACuBD,GAAG,CAACsB,IAD3B,EACrC4E,KADqC,eACrCA,KADqC,EAC9BC,GAD8B,eAC9BA,GAD8B,EACzBvD,WADyB,eACzBA,WADyB,EACZ8B,UADY,eACZA,UADY,EACAe,SADA,eACAA,SADA,EACWI,OADX,eACWA,OADX;AAGzCtF,YAAAA,KAHyC,GAGjC,IAHiC;AAIzCoG,YAAAA,MAJyC,GAIhC,IAJgC;AAAA;;AAAA,iBAOpC/D,WAPoC;AAAA;AAAA;AAAA;;AAQnC+D,YAAAA,MAAM,GAAG;AAAE/D,cAAAA,WAAW,EAAXA,WAAF;AAAe8B,cAAAA,UAAU,EAAVA,UAAf;AAA2B3C,cAAAA,aAAa,EAAE;AAAEqE,gBAAAA,IAAI,EAAE,IAAIC,IAAJ,CAASH,KAAT,CAAR;AAAyBI,gBAAAA,IAAI,EAAE,IAAID,IAAJ,CAASF,GAAT;AAA/B;AAA1C,aAAT;AARmC;AAAA,mBASrBjG,iBAAK0G,SAAL,CAAe,CACxB;AACKC,cAAAA,MAAM,EAAEF;AADb,aADwB,EAIxB;AACKG,cAAAA,MAAM,EAAE;AACHxE,gBAAAA,GAAG,EAAE,aADF;AAEHoF,gBAAAA,UAAU,EAAE;AAAEV,kBAAAA,IAAI,EAAE;AAAR;AAFT;AADb,aAJwB,EAUxB;AACKC,cAAAA,KAAK,EAAE;AAAES,gBAAAA,UAAU,EAAE,CAAC;AAAf;AADZ,aAVwB,CAAf,CATqB;;AAAA;AASnCnH,YAAAA,KATmC;AAAA;AAAA;;AAAA;AAAA,iBAuB7BkF,SAvB6B;AAAA;AAAA;AAAA;;AAwBnCkB,YAAAA,MAAM,GAAG;AAAElB,cAAAA,SAAS,EAATA,SAAF;AAAaH,cAAAA,gBAAgB,EAAE;AAAEc,gBAAAA,IAAI,EAAE,IAAIC,IAAJ,CAASH,KAAT,CAAR;AAAyBI,gBAAAA,IAAI,EAAE,IAAID,IAAJ,CAASF,GAAT;AAA/B;AAA/B,aAAT;AAxBmC;AAAA,mBAyBrBjG,iBAAK0G,SAAL,CAAe,CACxB;AACKC,cAAAA,MAAM,EAAEF;AADb,aADwB,EAIxB;AACKG,cAAAA,MAAM,EAAE;AACHxE,gBAAAA,GAAG,EAAE,aADF;AAEHoF,gBAAAA,UAAU,EAAE;AAAEV,kBAAAA,IAAI,EAAE;AAAR;AAFT;AADb,aAJwB,EAUxB;AACKC,cAAAA,KAAK,EAAE;AAAES,gBAAAA,UAAU,EAAE,CAAC;AAAf;AADZ,aAVwB,CAAf,CAzBqB;;AAAA;AAyBnCnH,YAAAA,KAzBmC;AAAA;AAAA;;AAAA;AAAA,iBAuC7BsF,OAvC6B;AAAA;AAAA;AAAA;;AAwCnCc,YAAAA,MAAM,GAAG;AAAEd,cAAAA,OAAO,EAAEA,OAAX;AAAoBP,cAAAA,gBAAgB,EAAE;AAAEc,gBAAAA,IAAI,EAAE,IAAIC,IAAJ,CAASH,KAAT,CAAR;AAAyBI,gBAAAA,IAAI,EAAE,IAAID,IAAJ,CAASF,GAAT;AAA/B;AAAtC,aAAT;AAxCmC;AAAA,mBAyCrBjG,iBAAK0G,SAAL,CAAe,CACxB;AACKC,cAAAA,MAAM,EAAEF;AADb,aADwB,EAIxB;AACKG,cAAAA,MAAM,EAAE;AACHxE,gBAAAA,GAAG,EAAE,aADF;AAEHoF,gBAAAA,UAAU,EAAE;AAAEV,kBAAAA,IAAI,EAAE;AAAR;AAFT;AADb,aAJwB,EAUxB;AACKC,cAAAA,KAAK,EAAE;AAAES,gBAAAA,UAAU,EAAE,CAAC;AAAf;AADZ,aAVwB,CAAf,CAzCqB;;AAAA;AAyCnCnH,YAAAA,KAzCmC;;AAAA;AAAA,kBAyDpCA,KAAK,CAACC,MAAN,GAAe,CAzDqB;AAAA;AAAA;AAAA;;AA0DnCP,YAAAA,GAAG,CAACQ,IAAJ,CAAS;AAAEC,cAAAA,KAAK,EAAEH,KAAK,CAACC,MAAf;AAAuB0G,cAAAA,OAAO,EAAE3G;AAAhC,aAAT;AA1DmC;AAAA;;AAAA;AAAA,+CA4D5BN,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBH,IAAhB,CAAqB;AAAEI,cAAAA,OAAO,EAAE;AAAX,aAArB,CA5D4B;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AA+DxCC,YAAAA,OAAO,CAACC,GAAR;AA/DwC,+CAgEjCd,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBH,IAAhB,CAAqB;AAAEI,cAAAA,OAAO,EAAE,cAAIA;AAAf,aAArB,CAhEiC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAlD;;AAAA;AAAA;AAAA;AAAA;;AAoEAf,QAAQ,CAAC6H,gBAAT;AAAA,6FAA4B,mBAAO3H,GAAP,EAAYC,GAAZ;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,0BACAD,GAAG,CAACsB,IADJ,EACf4E,KADe,eACfA,KADe,EACRC,GADQ,eACRA,GADQ;AAAA;AAAA;AAAA,mBAGEjG,iBAAKC,IAAL,CAAU;AACzByH,cAAAA,SAAS,EAAE;AAAExB,gBAAAA,IAAI,EAAE,IAAIC,IAAJ,CAASH,KAAT,CAAR;AAAyB2B,gBAAAA,GAAG,EAAE,IAAIxB,IAAJ,CAASF,GAAT;AAA9B,eADc,CAEzB;;AAFyB,aAAV,EAIdI,IAJc,CAIT;AAAE9E,cAAAA,aAAa,EAAE;AAAjB,aAJS,EAKdrB,QALc,CAKL;AACLC,cAAAA,IAAI,EAAE,eADD;AAELC,cAAAA,MAAM,EAAE;AAFH,aALK,EASdF,QATc,CASL;AACLC,cAAAA,IAAI,EAAE,YADD;AAELC,cAAAA,MAAM,EAAE;AAFH,aATK,EAadF,QAbc,CAaL;AACLC,cAAAA,IAAI,EAAE,oBADD;AAELC,cAAAA,MAAM,EAAE;AAFH,aAbK,EAiBdF,QAjBc,CAiBL;AACLC,cAAAA,IAAI,EAAE,kBADD;AAELC,cAAAA,MAAM,EAAE;AAFH,aAjBK,EAqBdF,QArBc,CAqBL;AACLC,cAAAA,IAAI,EAAE,mBADD;AAELC,cAAAA,MAAM,EAAE;AAFH,aArBK,EAyBdF,QAzBc,CAyBL;AACLC,cAAAA,IAAI,EAAE,mBADD;AAELC,cAAAA,MAAM,EAAE;AAFH,aAzBK,EA6BdF,QA7Bc,CA6BL;AACLC,cAAAA,IAAI,EAAE,MADD;AAELC,cAAAA,MAAM,EAAE,+BAFH;AAGLF,cAAAA,QAAQ,EAAE,CACL;AACKC,gBAAAA,IAAI,EAAE,QADX;AAEKC,gBAAAA,MAAM,EAAE;AAFb,eADK,EAKL;AACKD,gBAAAA,IAAI,EAAE,OADX;AAEKC,gBAAAA,MAAM,EAAE,mBAFb;AAGKF,gBAAAA,QAAQ,EAAE;AACLC,kBAAAA,IAAI,EAAE,OADD;AAELC,kBAAAA,MAAM,EAAE;AAFH;AAHf,eALK;AAHL,aA7BK,EA+CdF,QA/Cc,CA+CL;AACLC,cAAAA,IAAI,EAAE,gBADD;AAELC,cAAAA,MAAM,EAAE,wBAFH;AAGLF,cAAAA,QAAQ,EAAE;AACLC,gBAAAA,IAAI,EAAE,OADD;AAELC,gBAAAA,MAAM,EAAE;AAFH;AAHL,aA/CK,EAuDdF,QAvDc,CAuDL;AACLC,cAAAA,IAAI,EAAE,WADD;AAELC,cAAAA,MAAM,EAAE;AAFH,aAvDK,CAHF;;AAAA;AAGZC,YAAAA,KAHY;;AAAA,kBA+DdA,KAAK,CAACC,MAAN,GAAe,CA/DD;AAAA;AAAA;AAAA;;AAgEbP,YAAAA,GAAG,CAACQ,IAAJ,CAAS;AAAEC,cAAAA,KAAK,EAAEH,KAAK,CAACC,MAAf;AAAuBsH,cAAAA,GAAG,EAAEvH;AAA5B,aAAT;AAhEa;AAAA;;AAAA;AAAA,+CAkENN,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBH,IAAhB,CAAqB;AAAEI,cAAAA,OAAO,EAAE;AAAX,aAArB,CAlEM;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAqElBC,YAAAA,OAAO,CAACC,GAAR;AArEkB,+CAsEXd,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBH,IAAhB,CAAqB;AAAEI,cAAAA,OAAO,EAAE,cAAIA;AAAf,aAArB,CAtEW;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA5B;;AAAA;AAAA;AAAA;AAAA;;eA0Eef,Q","sourcesContent":["import Lead from \"../models/Lead\";\r\nimport User from \"../models/User\";\r\nimport Sucursal from \"../models/Sucursal\";\r\nimport OriginData from \"../models/OriginData\";\r\nimport Vehicle from \"../models/Vehicle\";\r\nimport Financiamiento from \"../models/Financiamiento\";\r\nimport Banco from \"../models/Banco\";\r\nimport Seller from \"../models/Seller\";\r\nimport EstadoConversion from \"../models/EstadoConversion\";\r\nimport MotivoRechazo from \"../models/MotivoRechazo\";\r\n\r\nconst leadCtrl = {};\r\n\r\nleadCtrl.getAll = async (req, res) => {\r\n     try {\r\n          const query = await Lead.find()\r\n               .populate({\r\n                    path: \"sucursal_lead\",\r\n                    select: \"name\",\r\n               })\r\n               .populate({\r\n                    path: \"dataOrigin\",\r\n                    select: \"name\",\r\n               })\r\n               .populate({\r\n                    path: \"tipoFinanciamiento\",\r\n                    select: \"tipo\",\r\n               })\r\n               .populate({\r\n                    path: \"entidad_bancaria\",\r\n                    select: \"name avatar\",\r\n               })\r\n               .populate({\r\n                    path: \"estado_conversion\",\r\n                    select: \"name\",\r\n               })\r\n               .populate({\r\n                    path: \"motivoDesplegable\",\r\n                    select: \"name\",\r\n               })\r\n               .populate({\r\n                    path: \"auto\",\r\n                    select: \"chasis model cod_tdp, version\",\r\n                    populate: [\r\n                         {\r\n                              path: \"chasis\",\r\n                              select: \"name\",\r\n                         },\r\n                         {\r\n                              path: \"model\",\r\n                              select: \"name marca avatar\",\r\n                              populate: {\r\n                                   path: \"marca\",\r\n                                   select: \"name avatar\",\r\n                              },\r\n                         },\r\n                    ],\r\n               })\r\n               .populate({\r\n                    path: \"asesorAsignado\",\r\n                    select: \"name tipo marca avatar\",\r\n                    populate: {\r\n                         path: \"marca\",\r\n                         select: \"name avatar\",\r\n                    },\r\n               })\r\n               .populate({\r\n                    path: \"createdBy\",\r\n                    select: \"name username\",\r\n               });\r\n\r\n          if (query.length > 0) {\r\n               res.json({ total: query.length, all_leads: query });\r\n          } else {\r\n               return res.status(404).json({ message: \"No existen leads\" });\r\n          }\r\n     } catch (err) {\r\n          console.log(err);\r\n          return res.status(503).json({ message: err.message });\r\n     }\r\n};\r\n\r\nleadCtrl.getOneById = async (req, res) => {\r\n     const { leadId } = req.params;\r\n     try {\r\n          const query = await Lead.findById(leadId)\r\n               .populate({\r\n                    path: \"sucursal_lead\",\r\n                    select: \"name\",\r\n               })\r\n               .populate({\r\n                    path: \"dataOrigin\",\r\n                    select: \"name\",\r\n               })\r\n               .populate({\r\n                    path: \"tipoFinanciamiento\",\r\n                    select: \"name\",\r\n               })\r\n               .populate({\r\n                    path: \"entidad_bancaria\",\r\n                    select: \"name avatar\",\r\n               })\r\n               .populate({\r\n                    path: \"estado_conversion\",\r\n                    select: \"name\",\r\n               })\r\n               .populate({\r\n                    path: \"motivoDesplegable\",\r\n                    select: \"name\",\r\n               })\r\n               .populate({\r\n                    path: \"auto\",\r\n                    select: \"chasis model cod_tdp version\",\r\n                    populate: [\r\n                         {\r\n                              path: \"chasis\",\r\n                              select: \"name\",\r\n                         },\r\n                         {\r\n                              path: \"model\",\r\n                              select: \"name marca avatar\",\r\n                              populate: {\r\n                                   path: \"marca\",\r\n                                   select: \"name avatar\",\r\n                              },\r\n                         },\r\n                    ],\r\n               })\r\n               .populate({\r\n                    path: \"asesorAsignado\",\r\n                    select: \"name tipo marca avatar sucursal\",\r\n                    populate: [\r\n                         {\r\n                              path: \"marca\",\r\n                              select: \"name avatar\",\r\n                         },\r\n                         {\r\n                              path: \"sucursal\",\r\n                              select: \"name\",\r\n                         },\r\n                    ],\r\n               })\r\n               .populate({\r\n                    path: \"createdBy\",\r\n                    select: \"name username\",\r\n               });\r\n\r\n          if (query) {\r\n               res.json({ one: query });\r\n          } else {\r\n               return res.status(404).json({ message: \"No existen el lead\" });\r\n          }\r\n     } catch (err) {\r\n          console.log(err);\r\n          return res.status(503).json({ message: err.message });\r\n     }\r\n};\r\n\r\nleadCtrl.createOne = async (req, res) => {\r\n     const { codigo_interno, dataOrigin, customer_name, customer_document, customer_city, customer_cellphone, customer_cellphone2, customer_email, fecha_ingreso, createdBy } = req.body;\r\n\r\n     try {\r\n          const newObj = new Lead({\r\n               codigo_interno,\r\n               customer_name,\r\n               customer_document,\r\n               customer_city,\r\n               customer_cellphone,\r\n               customer_cellphone2,\r\n               customer_email,\r\n               fecha_ingreso,\r\n          });\r\n\r\n          const originFound = await OriginData.findOne({ name: dataOrigin });\r\n          if (!originFound) return res.status(404).json({ message: `Origen ${dataOrigin} no encontrada` });\r\n          newObj.dataOrigin = originFound._id;\r\n\r\n          const userFound = await User.findOne({ username: createdBy });\r\n          if (!userFound) return res.status(404).json({ message: `Empleado ${createdBy} no encontrado` });\r\n          newObj.createdBy = userFound._id;\r\n\r\n          const query = await newObj.save();\r\n\r\n          if (query) {\r\n               res.json({ message: \"Lead creado con éxito\" });\r\n          }\r\n     } catch (err) {\r\n          console.log(err);\r\n          return res.status(503).json({ message: err.message });\r\n     }\r\n};\r\n\r\nleadCtrl.isNoInteresado = async (req, res) => {\r\n     const { leadId } = req.params;\r\n     const { estado_lead, isNoInteresado, sucursal, fecha_noInteresado, motivoDesplegable, motivo_rechazo } = req.body;\r\n\r\n     try {\r\n          const sucursalFound = await Sucursal.findOne({ name: sucursal });\r\n          if (!sucursalFound) return res.status(404).json({ message: `Sucursal ${sucursal} no encontrada` });\r\n\r\n          const motivoFound = await MotivoRechazo.findOne({ name: motivoDesplegable });\r\n          if (!motivoFound) return res.status(404).json({ message: `Motivo ${motivoDesplegable} no encontrado` });\r\n\r\n          const query = await Lead.findByIdAndUpdate(leadId, {\r\n               estado_lead,\r\n               isNoInteresado,\r\n               sucursal_lead: sucursalFound._id,\r\n               fecha_noInteresado,\r\n               motivoDesplegable: motivoFound._id,\r\n               motivo_rechazo,\r\n          });\r\n\r\n          if (query) {\r\n               res.json({ message: \"Lead actualizado con éxito\" });\r\n          } else {\r\n               return res.status(404).json({ message: \"Lead no encontrado para actualizar\" });\r\n          }\r\n     } catch (err) {\r\n          console.log(err);\r\n          return res.status(503).json({ message: err.message });\r\n     }\r\n};\r\n\r\nleadCtrl.isAtendido = async (req, res) => {\r\n     const { leadId } = req.params;\r\n     const { estado_lead, isAtendido, fecha_atencion, comentario, observacion, sucursal, auto, financiamiento, entidad_bancaria, tentativa_inicial, precioUnidad } = req.body;\r\n\r\n     try {\r\n          let query = null;\r\n\r\n          const sucursalFound = await Sucursal.findOne({ name: sucursal });\r\n          const autoFound = await Vehicle.findOne({ cod_tdp: auto });\r\n          const financiamientoFound = await Financiamiento.findOne({ name: financiamiento });\r\n\r\n          if (!sucursalFound) return res.status(404).json({ message: `Sucursal ${sucursal} no encontrada` });\r\n          if (!autoFound) return res.status(404).json({ message: `Vehículo ${auto} no encontrado` });\r\n          if (!financiamientoFound) return res.status(404).json({ message: `Tipo de financiamiento ${financiamiento} no encontrado` });\r\n\r\n          if (entidad_bancaria == null || entidad_bancaria == undefined) {\r\n               query = await Lead.findByIdAndUpdate(leadId, {\r\n                    sucursal_lead: sucursalFound._id,\r\n                    estado_lead,\r\n                    isAtendido,\r\n                    fecha_atencion,\r\n                    comentario,\r\n                    observacion,\r\n                    auto: autoFound._id,\r\n                    tipoFinanciamiento: financiamientoFound._id,\r\n                    tentativa_inicial,\r\n                    precioUnidad,\r\n               });\r\n          } else {\r\n               const bancoFound = await Banco.findOne({ name: entidad_bancaria });\r\n               if (!bancoFound) return res.status(404).json({ message: `Entidad ${entidad_bancaria} no encontrado` });\r\n\r\n               query = await Lead.findByIdAndUpdate(leadId, {\r\n                    sucursal_lead: sucursalFound._id,\r\n                    estado_lead,\r\n                    isAtendido,\r\n                    fecha_atencion,\r\n                    comentario,\r\n                    observacion,\r\n                    auto: autoFound._id,\r\n                    tipoFinanciamiento: financiamientoFound._id,\r\n                    entidad_bancaria: bancoFound._id,\r\n                    tentativa_inicial,\r\n                    precioUnidad,\r\n               });\r\n          }\r\n\r\n          if (query) {\r\n               res.json({ message: \"Lead actualizado con éxito\" });\r\n          } else {\r\n               return res.status(404).json({ message: \"Lead no encontrado para actualizar\" });\r\n          }\r\n     } catch (err) {\r\n          console.log(err);\r\n          return res.status(503).json({ message: err.message });\r\n     }\r\n};\r\n\r\nleadCtrl.isAsignacion = async (req, res) => {\r\n     const { leadId } = req.params;\r\n     const { estado_lead, isAsignado, fecha_asignacion, comentario, observacion, sucursal, asesorAsignado, auto, financiamiento, entidad_bancaria, tentativa_inicial, precioUnidad } = req.body;\r\n\r\n     try {\r\n          let query = null;\r\n\r\n          const sucursalFound = await Sucursal.findOne({ name: sucursal });\r\n          const asesorFound = await Seller.findOne({ name: asesorAsignado });\r\n          const autoFound = await Vehicle.findOne({ cod_tdp: auto });\r\n          const financiamientoFound = await Financiamiento.findOne({ name: financiamiento });\r\n\r\n          if (!sucursalFound) return res.status(404).json({ message: `Sucursal ${sucursal} no encontrada` });\r\n          if (!asesorFound) return res.status(404).json({ message: `Asesor ${asesorAsignado} no encontrado` });\r\n          if (!autoFound) return res.status(404).json({ message: `Vehículo ${auto} no encontrado` });\r\n          if (!financiamientoFound) return res.status(404).json({ message: `Tipo de financiamiento ${financiamiento} no encontrado` });\r\n\r\n          if (entidad_bancaria == null || entidad_bancaria == undefined) {\r\n               query = await Lead.findByIdAndUpdate(leadId, {\r\n                    sucursal_lead: sucursalFound._id,\r\n                    estado_lead,\r\n                    isAsignado,\r\n                    fecha_asignacion,\r\n                    comentario,\r\n                    observacion,\r\n                    asesorAsignado: asesorFound._id,\r\n                    auto: autoFound._id,\r\n                    tipoFinanciamiento: financiamientoFound._id,\r\n                    tentativa_inicial,\r\n                    precioUnidad,\r\n               });\r\n          } else {\r\n               const bancoFound = await Banco.findOne({ name: entidad_bancaria });\r\n               if (!bancoFound) return res.status(404).json({ message: `Entidad ${entidad_bancaria} no encontrado` });\r\n\r\n               query = await Lead.findByIdAndUpdate(leadId, {\r\n                    sucursal_lead: sucursalFound._id,\r\n                    estado_lead,\r\n                    isAsignado,\r\n                    fecha_asignacion,\r\n                    comentario,\r\n                    observacion,\r\n                    asesorAsignado: asesorFound._id,\r\n                    auto: autoFound._id,\r\n                    tipoFinanciamiento: financiamientoFound._id,\r\n                    entidad_bancaria: bancoFound._id,\r\n                    tentativa_inicial,\r\n                    precioUnidad,\r\n               });\r\n          }\r\n\r\n          if (query) {\r\n               res.json({ message: \"Lead actualizado con éxito\" });\r\n          } else {\r\n               return res.status(404).json({ message: \"Lead no encontrado para actualizar\" });\r\n          }\r\n     } catch (err) {\r\n          console.log(err);\r\n          return res.status(503).json({ message: err.message });\r\n     }\r\n};\r\n\r\nleadCtrl.isCotizado = async (req, res) => {\r\n     const { leadId } = req.params;\r\n     const { financiamiento, entidad_bancaria, tentativa_inicial, precioUnidad, estado_lead, isCotizado, fecha_cotizacion, comentario, observacion } = req.body;\r\n\r\n     try {\r\n          let query = null;\r\n\r\n          const financiamientoFound = await Financiamiento.findOne({ name: financiamiento });\r\n          if (!financiamientoFound) return res.status(404).json({ message: `Tipo de financiamiento ${financiamiento} no encontrado` });\r\n\r\n          if (entidad_bancaria == null || entidad_bancaria == undefined) {\r\n               query = await Lead.findByIdAndUpdate(leadId, {\r\n                    tipoFinanciamiento: financiamientoFound._id,\r\n                    tentativa_inicial,\r\n                    precioUnidad,\r\n                    estado_lead,\r\n                    isCotizado,\r\n                    fecha_cotizacion,\r\n                    comentario,\r\n                    observacion,\r\n               });\r\n          } else {\r\n               const bancoFound = await Banco.findOne({ name: entidad_bancaria });\r\n               if (!bancoFound) return res.status(404).json({ message: `Entidad ${entidad_bancaria} no encontrado` });\r\n\r\n               query = await Lead.findByIdAndUpdate(leadId, {\r\n                    tipoFinanciamiento: financiamientoFound._id,\r\n                    entidad_bancaria: bancoFound._id,\r\n                    tentativa_inicial,\r\n                    precioUnidad,\r\n                    estado_lead,\r\n                    isCotizado,\r\n                    fecha_cotizacion,\r\n                    comentario,\r\n                    observacion,\r\n               });\r\n          }\r\n\r\n          if (query) {\r\n               res.json({ message: \"Lead actualizado con éxito\" });\r\n          } else {\r\n               return res.status(404).json({ message: \"Lead no encontrado para actualizar\" });\r\n          }\r\n     } catch (err) {\r\n          console.log(err);\r\n          return res.status(503).json({ message: err.message });\r\n     }\r\n};\r\n\r\nleadCtrl.isDeclinado = async (req, res) => {\r\n     const { leadId } = req.params;\r\n     const { estado_lead, isDeclinado, fecha_declinado, motivo_desistencia, comentario, observacion } = req.body;\r\n\r\n     try {\r\n          const query = await Lead.findByIdAndUpdate(leadId, {\r\n               estado_lead,\r\n               isDeclinado,\r\n               fecha_declinado,\r\n               motivo_desistencia,\r\n               comentario,\r\n               observacion,\r\n          });\r\n\r\n          if (query) {\r\n               res.json({ message: \"Lead actualizado con éxito\" });\r\n          } else {\r\n               return res.status(404).json({ message: \"Lead no encontrado para actualizar\" });\r\n          }\r\n     } catch (err) {\r\n          console.log(err);\r\n          return res.status(503).json({ message: err.message });\r\n     }\r\n};\r\n\r\nleadCtrl.isConvertido = async (req, res) => {\r\n     const { leadId } = req.params;\r\n     const { estado_lead, estado_conversion, isConvertido, fecha_conversion } = req.body;\r\n\r\n     try {\r\n          const statusFound = await EstadoConversion.findOne({ name: estado_conversion });\r\n          if (!statusFound) return res.status(404).json({ message: `Estado ${estado_conversion} no encontrado` });\r\n\r\n          const query = await Lead.findByIdAndUpdate(leadId, {\r\n               estado_lead,\r\n               estado_conversion: statusFound._id,\r\n               isConvertido,\r\n               fecha_conversion,\r\n          });\r\n\r\n          if (query) {\r\n               res.json({ message: \"Lead actualizado con éxito\" });\r\n          } else {\r\n               return res.status(404).json({ message: \"Lead no encontrado para actualizar\" });\r\n          }\r\n     } catch (err) {\r\n          console.log(err);\r\n          return res.status(503).json({ message: err.message });\r\n     }\r\n};\r\n\r\nleadCtrl.isBooking = async (req, res) => {\r\n     const { leadId } = req.params;\r\n     const { estado_conversion, isBooking, fecha_booking } = req.body;\r\n\r\n     try {\r\n          const statusFound = await EstadoConversion.findOne({ name: estado_conversion });\r\n          if (!statusFound) return res.status(404).json({ message: `Estado ${estado_conversion} no encontrado` });\r\n\r\n          const query = await Lead.findByIdAndUpdate(leadId, {\r\n               estado_conversion: statusFound._id,\r\n               isBooking,\r\n               fecha_booking,\r\n          });\r\n\r\n          if (query) {\r\n               res.json({ message: \"Lead actualizado con éxito\" });\r\n          } else {\r\n               return res.status(404).json({ message: \"Lead no encontrado para actualizar\" });\r\n          }\r\n     } catch (err) {\r\n          console.log(err);\r\n          return res.status(503).json({ message: err.message });\r\n     }\r\n};\r\n\r\nleadCtrl.isDown = async (req, res) => {\r\n     const { leadId } = req.params;\r\n     const { estado_conversion, isDown, fecha_down } = req.body;\r\n\r\n     try {\r\n          const statusFound = await EstadoConversion.findOne({ name: estado_conversion });\r\n          if (!statusFound) return res.status(404).json({ message: `Estado ${estado_conversion} no encontrado` });\r\n\r\n          const query = await Lead.findByIdAndUpdate(leadId, {\r\n               estado_conversion: statusFound._id,\r\n               isDown,\r\n               fecha_down,\r\n          });\r\n\r\n          if (query) {\r\n               res.json({ message: \"Lead actualizado con éxito\" });\r\n          } else {\r\n               return res.status(404).json({ message: \"Lead no encontrado para actualizar\" });\r\n          }\r\n     } catch (err) {\r\n          console.log(err);\r\n          return res.status(503).json({ message: err.message });\r\n     }\r\n};\r\n\r\nleadCtrl.isVenta = async (req, res) => {\r\n     const { leadId } = req.params;\r\n     const { estado_conversion, isVenta, fecha_venta } = req.body;\r\n\r\n     try {\r\n          const statusFound = await EstadoConversion.findOne({ name: estado_conversion });\r\n          if (!statusFound) return res.status(404).json({ message: `Estado ${estado_conversion} no encontrado` });\r\n\r\n          const query = await Lead.findByIdAndUpdate(leadId, {\r\n               estado_conversion: statusFound._id,\r\n               isVenta,\r\n               fecha_venta,\r\n          });\r\n\r\n          if (query) {\r\n               res.json({ message: \"Lead actualizado con éxito\" });\r\n          } else {\r\n               return res.status(404).json({ message: \"Lead no encontrado para actualizar\" });\r\n          }\r\n     } catch (err) {\r\n          console.log(err);\r\n          return res.status(503).json({ message: err.message });\r\n     }\r\n};\r\n\r\nleadCtrl.deleteOneById = async (req, res) => {\r\n     const { leadId } = req.params;\r\n\r\n     try {\r\n          const query = await Lead.findByIdAndDelete(leadId);\r\n\r\n          if (query) {\r\n               res.json({ message: \"Lead eliminado con éxito\" });\r\n          } else {\r\n               return res.status(404).json({ message: \"Lead no encontrado para eliminar\" });\r\n          }\r\n     } catch (err) {\r\n          console.log(err);\r\n          return res.status(503).json({ message: err.message });\r\n     }\r\n};\r\n\r\nleadCtrl.leadsBySucursalFecha = async (req, res) => {\r\n     const { start, end } = req.body;\r\n\r\n     try {\r\n          const query = await Lead.find({\r\n               fecha_ingreso: {\r\n                    $gte: new Date(start),\r\n                    $lte: new Date(end),\r\n               },\r\n          })\r\n               .sort({ fecha_ingreso: -1 })\r\n               .populate({\r\n                    path: \"sucursal_lead\",\r\n                    select: \"name\",\r\n               })\r\n               .populate({\r\n                    path: \"dataOrigin\",\r\n                    select: \"name\",\r\n               })\r\n               .populate({\r\n                    path: \"tipoFinanciamiento\",\r\n                    select: \"tipo\",\r\n               })\r\n               .populate({\r\n                    path: \"entidad_bancaria\",\r\n                    select: \"name avatar\",\r\n               })\r\n               .populate({\r\n                    path: \"estado_conversion\",\r\n                    select: \"name\",\r\n               })\r\n               .populate({\r\n                    path: \"auto\",\r\n                    select: \"chasis model cod_tdp, version\",\r\n                    populate: [\r\n                         {\r\n                              path: \"chasis\",\r\n                              select: \"name\",\r\n                         },\r\n                         {\r\n                              path: \"model\",\r\n                              select: \"name marca avatar\",\r\n                              populate: {\r\n                                   path: \"marca\",\r\n                                   select: \"name avatar\",\r\n                              },\r\n                         },\r\n                    ],\r\n               })\r\n               .populate({\r\n                    path: \"asesorAsignado\",\r\n                    select: \"name tipo marca avatar\",\r\n                    populate: {\r\n                         path: \"marca\",\r\n                         select: \"name avatar\",\r\n                    },\r\n               })\r\n               .populate({\r\n                    path: \"createdBy\",\r\n                    select: \"name username\",\r\n               });\r\n\r\n          if (query.length > 0) {\r\n               res.json({ total: query.length, leads: query });\r\n          } else {\r\n               return res.status(404).json({ message: \"No existen leads\" });\r\n          }\r\n     } catch (err) {\r\n          console.log(err);\r\n          return res.status(503).json({ message: err.message });\r\n     }\r\n};\r\n\r\nleadCtrl.leadsByStatusFecha = async (req, res) => {\r\n     const { estado_lead, start, end } = req.body;\r\n\r\n     try {\r\n          const query = await Lead.find({\r\n               estado_lead,\r\n               isConvertido: true,\r\n               fecha_conversion: {\r\n                    $gte: new Date(start),\r\n                    $lte: new Date(end),\r\n               },\r\n          })\r\n               .sort({ fecha_conversion: -1 })\r\n               .populate({\r\n                    path: \"sucursal_lead\",\r\n                    select: \"name\",\r\n               })\r\n               .populate({\r\n                    path: \"dataOrigin\",\r\n                    select: \"name\",\r\n               })\r\n               .populate({\r\n                    path: \"tipoFinanciamiento\",\r\n                    select: \"tipo\",\r\n               })\r\n               .populate({\r\n                    path: \"entidad_bancaria\",\r\n                    select: \"name avatar\",\r\n               })\r\n               .populate({\r\n                    path: \"estado_conversion\",\r\n                    select: \"name\",\r\n               })\r\n               .populate({\r\n                    path: \"auto\",\r\n                    select: \"chasis model cod_tdp, version\",\r\n                    populate: [\r\n                         {\r\n                              path: \"chasis\",\r\n                              select: \"name\",\r\n                         },\r\n                         {\r\n                              path: \"model\",\r\n                              select: \"name marca avatar\",\r\n                              populate: {\r\n                                   path: \"marca\",\r\n                                   select: \"name avatar\",\r\n                              },\r\n                         },\r\n                    ],\r\n               })\r\n               .populate({\r\n                    path: \"asesorAsignado\",\r\n                    select: \"name tipo marca avatar\",\r\n                    populate: {\r\n                         path: \"marca\",\r\n                         select: \"name avatar\",\r\n                    },\r\n               })\r\n               .populate({\r\n                    path: \"createdBy\",\r\n                    select: \"name username\",\r\n               });\r\n\r\n          if (query.length > 0) {\r\n               res.json({ total: query.length, leads: query });\r\n          } else {\r\n               return res.status(404).json({ message: \"No existen leads\" });\r\n          }\r\n     } catch (err) {\r\n          console.log(err);\r\n          return res.status(503).json({ message: err.message });\r\n     }\r\n};\r\n\r\nleadCtrl.rankingLeadsConversionByDates = async (req, res) => {\r\n     const { start, end } = req.body;\r\n\r\n     try {\r\n          const filter = { fecha_ingreso: { $gte: new Date(start), $lte: new Date(end) } };\r\n          const query = await Lead.aggregate([\r\n               {\r\n                    $match: filter,\r\n               },\r\n               {\r\n                    $group: {\r\n                         _id: \"$estado_conversion\",\r\n                         num_leads: { $sum: 1 },\r\n                    },\r\n               },\r\n               {\r\n                    $sort: { num_leads: -1 },\r\n               },\r\n          ]);\r\n\r\n          if (query.length > 0) {\r\n               res.json({ total: query.length, ranking: query });\r\n          } else {\r\n               return res.status(404).json({ message: \"No existen leads aún\" });\r\n          }\r\n     } catch (err) {\r\n          console.log(err);\r\n          return res.status(503).json({ message: err.message });\r\n     }\r\n};\r\n\r\nleadCtrl.countLeadsByDates = async (req, res) => {\r\n     const { estado, start, end } = req.body;\r\n\r\n     try {\r\n          const query = await Lead.find({\r\n               estado_lead: { $regex: \".*\" + estado + \".*\" },\r\n               fecha_ingreso: { $gte: new Date(start), $lte: new Date(end) },\r\n          }).countDocuments();\r\n          if (query >= 0) {\r\n               res.json({ qty: query });\r\n          }\r\n     } catch (err) {\r\n          console.log(err);\r\n          return res.status(503).json({ message: err.message });\r\n     }\r\n};\r\n\r\nleadCtrl.countLeadsConversionyDates = async (req, res) => {\r\n     const { isBooking, isVenta, start, end } = req.body;\r\n\r\n     try {\r\n          // const conversionState = await EstadoConversion.findOne({ name: estado });\r\n          let query = null;\r\n\r\n          if (isVenta) {\r\n               query = await Lead.find({\r\n                    // estado_conversion: conversionState._id,\r\n                    isBooking,\r\n                    isVenta,\r\n                    fecha_conversion: { $gte: new Date(start), $lte: new Date(end) },\r\n               }).countDocuments();\r\n          } else {\r\n               query = await Lead.find({\r\n                    // estado_conversion: conversionState._id,\r\n                    isBooking,\r\n                    fecha_conversion: { $gte: new Date(start), $lte: new Date(end) },\r\n               }).countDocuments();\r\n          }\r\n\r\n          if (query >= 0) {\r\n               res.json({ qty: query });\r\n          }\r\n     } catch (err) {\r\n          console.log(err);\r\n          return res.status(503).json({ message: err.message });\r\n     }\r\n};\r\n\r\nleadCtrl.rankingLeadsByOriginDataDateConversion = async (req, res) => {\r\n     const { start, end, estado_lead, isAsignado, isBooking, isVenta } = req.body;\r\n\r\n     let query = null;\r\n     let filter = null;\r\n\r\n     try {\r\n          if (estado_lead) {\r\n               filter = { estado_lead, isAsignado, fecha_ingreso: { $gte: new Date(start), $lte: new Date(end) } };\r\n               query = await Lead.aggregate([\r\n                    {\r\n                         $match: filter,\r\n                    },\r\n                    {\r\n                         $group: {\r\n                              _id: \"$dataOrigin\",\r\n                              totalLeads: { $sum: 1 },\r\n                         },\r\n                    },\r\n                    {\r\n                         $sort: { totalLeads: -1 },\r\n                    },\r\n               ]);\r\n          } else if (isBooking) {\r\n               filter = { isBooking, fecha_conversion: { $gte: new Date(start), $lte: new Date(end) } };\r\n               query = await Lead.aggregate([\r\n                    {\r\n                         $match: filter,\r\n                    },\r\n                    {\r\n                         $group: {\r\n                              _id: \"$dataOrigin\",\r\n                              totalLeads: { $sum: 1 },\r\n                         },\r\n                    },\r\n                    {\r\n                         $sort: { totalLeads: -1 },\r\n                    },\r\n               ]);\r\n          } else if (isVenta) {\r\n               filter = { isVenta: isVenta, fecha_conversion: { $gte: new Date(start), $lte: new Date(end) } };\r\n               query = await Lead.aggregate([\r\n                    {\r\n                         $match: filter,\r\n                    },\r\n                    {\r\n                         $group: {\r\n                              _id: \"$dataOrigin\",\r\n                              totalLeads: { $sum: 1 },\r\n                         },\r\n                    },\r\n                    {\r\n                         $sort: { totalLeads: -1 },\r\n                    },\r\n               ]);\r\n          }\r\n\r\n          if (query.length > 0) {\r\n               res.json({ total: query.length, ranking: query });\r\n          } else {\r\n               return res.status(404).json({ message: \"No existen leads aún\" });\r\n          }\r\n     } catch (err) {\r\n          console.log(err);\r\n          return res.status(503).json({ message: err.message });\r\n     }\r\n};\r\n\r\nleadCtrl.leadsModificados = async (req, res) => {\r\n     const { start, end } = req.body;\r\n     try {\r\n          const query = await Lead.find({\r\n               updatedAt: { $gte: new Date(start), $lt: new Date(end) },\r\n               // createdAt: { $ne: new Date(start)}\r\n          })\r\n               .sort({ customer_name: 1 })\r\n               .populate({\r\n                    path: \"sucursal_lead\",\r\n                    select: \"name\",\r\n               })\r\n               .populate({\r\n                    path: \"dataOrigin\",\r\n                    select: \"name\",\r\n               })\r\n               .populate({\r\n                    path: \"tipoFinanciamiento\",\r\n                    select: \"tipo\",\r\n               })\r\n               .populate({\r\n                    path: \"entidad_bancaria\",\r\n                    select: \"name avatar\",\r\n               })\r\n               .populate({\r\n                    path: \"estado_conversion\",\r\n                    select: \"name\",\r\n               })\r\n               .populate({\r\n                    path: \"motivoDesplegable\",\r\n                    select: \"name\",\r\n               })\r\n               .populate({\r\n                    path: \"auto\",\r\n                    select: \"chasis model cod_tdp, version\",\r\n                    populate: [\r\n                         {\r\n                              path: \"chasis\",\r\n                              select: \"name\",\r\n                         },\r\n                         {\r\n                              path: \"model\",\r\n                              select: \"name marca avatar\",\r\n                              populate: {\r\n                                   path: \"marca\",\r\n                                   select: \"name avatar\",\r\n                              },\r\n                         },\r\n                    ],\r\n               })\r\n               .populate({\r\n                    path: \"asesorAsignado\",\r\n                    select: \"name tipo marca avatar\",\r\n                    populate: {\r\n                         path: \"marca\",\r\n                         select: \"name avatar\",\r\n                    },\r\n               })\r\n               .populate({\r\n                    path: \"createdBy\",\r\n                    select: \"name username\",\r\n               });\r\n\r\n          if (query.length > 0) {\r\n               res.json({ total: query.length, all: query });\r\n          } else {\r\n               return res.status(404).json({ message: \"No se encontraron leads\" });\r\n          }\r\n     } catch (err) {\r\n          console.log(err);\r\n          return res.status(503).json({ message: err.message });\r\n     }\r\n};\r\n\r\nexport default leadCtrl;\r\n"],"file":"lead.controller.js"}