{"version":3,"sources":["../../src/controllers/lead.controller.js"],"names":["leadCtrl","getAll","req","res","Lead","find","populate","path","select","query","length","json","total","all_leads","status","message","console","log","getOneById","leadId","params","findById","lead","createOne","body","dataOrigin","customer_name","customer_document","customer_city","customer_cellphone","customer_cellphone2","customer_email","fecha_ingreso","createdBy","newObj","OriginData","findOne","name","originFound","_id","User","username","userFound","save","isNoInteresado","estado_lead","sucursal","fecha_noInteresado","motivo_rechazo","Sucursal","sucursalFound","findByIdAndUpdate","sucursal_lead","isAtendido","fecha_atencion","comentario","observacion","auto","financiamiento","entidad_bancaria","tentativa_inicial","precioUnidad","Vehicle","cod_tdp","autoFound","Financiamiento","financiamientoFound","undefined","tipoFinanciamiento","Banco","bancoFound","isAsignacion","isAsignado","fecha_asignacion","asesorAsignado","Seller","asesorFound","isCotizado","fecha_cotizacion","isDeclinado","fecha_declinado","motivo_desistencia","isConvertido","estado_conversion","fecha_conversion","EstadoConversion","statusFound","isBooking","fecha_booking","isDown","fecha_down","isVenta","fecha_venta","deleteOneById","findByIdAndDelete","leadsBySucursalFecha","start","end","$gte","Date","$lte","sort","leads","leadsByStatusFecha","rankingLeadsConversionByDates","filter","aggregate","$match","$group","num_leads","$sum","$sort","ranking","countLeadsByDates","estado","$regex","countDocuments","qty","countLeadsConversionyDates","conversionState"],"mappings":"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","sourcesContent":["import Lead from \"../models/Lead\";\r\nimport User from \"../models/User\";\r\nimport Sucursal from \"../models/Sucursal\";\r\nimport OriginData from \"../models/OriginData\";\r\nimport Vehicle from \"../models/Vehicle\";\r\nimport Financiamiento from \"../models/Financiamiento\";\r\nimport Banco from \"../models/Banco\";\r\nimport Seller from \"../models/Seller\";\r\nimport EstadoConversion from \"../models/EstadoConversion\";\r\n\r\nconst leadCtrl = {};\r\n\r\nleadCtrl.getAll = async (req, res) => {\r\n\ttry {\r\n\t\tconst query = await Lead.find()\r\n\t\t\t.populate({\r\n\t\t\t\tpath: \"sucursal_lead\",\r\n\t\t\t\tselect: \"name\",\r\n\t\t\t})\r\n\t\t\t.populate({\r\n\t\t\t\tpath: \"dataOrigin\",\r\n\t\t\t\tselect: \"name\",\r\n\t\t\t})\r\n\t\t\t.populate({\r\n\t\t\t\tpath: \"tipoFinanciamiento\",\r\n\t\t\t\tselect: \"tipo\",\r\n\t\t\t})\r\n\t\t\t.populate({\r\n\t\t\t\tpath: \"entidad_bancaria\",\r\n\t\t\t\tselect: \"name avatar\",\r\n\t\t\t})\r\n\t\t\t.populate({\r\n\t\t\t\tpath: \"estado_conversion\",\r\n\t\t\t\tselect: \"name\",\r\n\t\t\t})\r\n\t\t\t.populate({\r\n\t\t\t\tpath: \"auto\",\r\n\t\t\t\tselect: \"chasis model cod_tdp, version\",\r\n\t\t\t\tpopulate: [\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tpath: \"chasis\",\r\n\t\t\t\t\t\tselect: \"name\",\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tpath: \"model\",\r\n\t\t\t\t\t\tselect: \"name marca avatar\",\r\n\t\t\t\t\t\tpopulate: {\r\n\t\t\t\t\t\t\tpath: \"marca\",\r\n\t\t\t\t\t\t\tselect: \"name avatar\",\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t},\r\n\t\t\t\t],\r\n\t\t\t})\r\n\t\t\t.populate({\r\n\t\t\t\tpath: \"asesorAsignado\",\r\n\t\t\t\tselect: \"name tipo marca avatar\",\r\n\t\t\t\tpopulate: {\r\n\t\t\t\t\tpath: \"marca\",\r\n\t\t\t\t\tselect: \"name avatar\",\r\n\t\t\t\t},\r\n\t\t\t})\r\n\t\t\t.populate({\r\n\t\t\t\tpath: \"createdBy\",\r\n\t\t\t\tselect: \"name username\",\r\n\t\t\t});\r\n\r\n\t\tif (query.length > 0) {\r\n\t\t\tres.json({ total: query.length, all_leads: query });\r\n\t\t} else {\r\n\t\t\treturn res.status(404).json({ message: \"No existen leads\" });\r\n\t\t}\r\n\t} catch (err) {\r\n\t\tconsole.log(err);\r\n\t\treturn res.status(503).json({ message: err.message });\r\n\t}\r\n};\r\n\r\nleadCtrl.getOneById = async (req, res) => {\r\n\tconst { leadId } = req.params;\r\n\ttry {\r\n\t\tconst query = await Lead.findById(leadId)\r\n\t\t\t.populate({\r\n\t\t\t\tpath: \"sucursal_lead\",\r\n\t\t\t\tselect: \"name\",\r\n\t\t\t})\r\n\t\t\t.populate({\r\n\t\t\t\tpath: \"dataOrigin\",\r\n\t\t\t\tselect: \"name\",\r\n\t\t\t})\r\n\t\t\t.populate({\r\n\t\t\t\tpath: \"tipoFinanciamiento\",\r\n\t\t\t\tselect: \"name\",\r\n\t\t\t})\r\n\t\t\t.populate({\r\n\t\t\t\tpath: \"entidad_bancaria\",\r\n\t\t\t\tselect: \"name avatar\",\r\n\t\t\t})\r\n\t\t\t.populate({\r\n\t\t\t\tpath: \"estado_conversion\",\r\n\t\t\t\tselect: \"name\",\r\n\t\t\t})\r\n\t\t\t.populate({\r\n\t\t\t\tpath: \"auto\",\r\n\t\t\t\tselect: \"chasis model cod_tdp version\",\r\n\t\t\t\tpopulate: [\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tpath: \"chasis\",\r\n\t\t\t\t\t\tselect: \"name\",\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tpath: \"model\",\r\n\t\t\t\t\t\tselect: \"name marca avatar\",\r\n\t\t\t\t\t\tpopulate: {\r\n\t\t\t\t\t\t\tpath: \"marca\",\r\n\t\t\t\t\t\t\tselect: \"name avatar\",\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t},\r\n\t\t\t\t],\r\n\t\t\t})\r\n\t\t\t.populate({\r\n\t\t\t\tpath: \"asesorAsignado\",\r\n\t\t\t\tselect: \"name tipo marca avatar\",\r\n\t\t\t\tpopulate: {\r\n\t\t\t\t\tpath: \"marca\",\r\n\t\t\t\t\tselect: \"name avatar\",\r\n\t\t\t\t},\r\n\t\t\t})\r\n\t\t\t.populate({\r\n\t\t\t\tpath: \"createdBy\",\r\n\t\t\t\tselect: \"name username\",\r\n\t\t\t});\r\n\r\n\t\tif (query) {\r\n\t\t\tres.json({ lead: query });\r\n\t\t} else {\r\n\t\t\treturn res.status(404).json({ message: \"No existen el lead\" });\r\n\t\t}\r\n\t} catch (err) {\r\n\t\tconsole.log(err);\r\n\t\treturn res.status(503).json({ message: err.message });\r\n\t}\r\n};\r\n\r\nleadCtrl.createOne = async (req, res) => {\r\n\tconst { dataOrigin, customer_name, customer_document, customer_city, customer_cellphone, customer_cellphone2, customer_email, fecha_ingreso, createdBy } = req.body;\r\n\r\n\ttry {\r\n\t\tconst newObj = new Lead({\r\n\t\t\tcustomer_name,\r\n\t\t\tcustomer_document,\r\n\t\t\tcustomer_city,\r\n\t\t\tcustomer_cellphone,\r\n\t\t\tcustomer_cellphone2,\r\n\t\t\tcustomer_email,\r\n\t\t\tfecha_ingreso,\r\n\t\t});\r\n\r\n\t\tconst originFound = await OriginData.findOne({ name: dataOrigin });\r\n\t\tif (!originFound) return res.status(404).json({ message: `Origen ${dataOrigin} no encontrada` });\r\n\t\tnewObj.dataOrigin = originFound._id;\r\n\r\n\t\tconst userFound = await User.findOne({ username: createdBy });\r\n\t\tif (!userFound) return res.status(404).json({ message: `Empleado ${createdBy} no encontrado` });\r\n\t\tnewObj.createdBy = userFound._id;\r\n\r\n\t\tconst query = await newObj.save();\r\n\r\n\t\tif (query) {\r\n\t\t\tres.json({ message: \"Lead creado con éxito\" });\r\n\t\t}\r\n\t} catch (err) {\r\n\t\tconsole.log(err);\r\n\t\treturn res.status(503).json({ message: err.message });\r\n\t}\r\n};\r\n\r\nleadCtrl.isNoInteresado = async (req, res) => {\r\n\tconst { leadId } = req.params;\r\n\tconst { estado_lead, isNoInteresado, sucursal, fecha_noInteresado, motivo_rechazo } = req.body;\r\n\r\n\ttry {\r\n\t\tconst sucursalFound = await Sucursal.findOne({ name: sucursal });\r\n\r\n\t\tif (!sucursalFound) return res.status(404).json({ message: `Sucursal ${sucursal} no encontrada` });\r\n\r\n\t\tconst query = await Lead.findByIdAndUpdate(leadId, {\r\n\t\t\testado_lead,\r\n\t\t\tisNoInteresado,\r\n\t\t\tsucursal_lead: sucursalFound._id,\r\n\t\t\tfecha_noInteresado,\r\n\t\t\tmotivo_rechazo,\r\n\t\t});\r\n\r\n\t\tif (query) {\r\n\t\t\tres.json({ message: \"Lead actualizado con éxito\" });\r\n\t\t} else {\r\n\t\t\treturn res.status(404).json({ message: \"Lead no encontrado para actualizar\" });\r\n\t\t}\r\n\t} catch (err) {\r\n\t\tconsole.log(err);\r\n\t\treturn res.status(503).json({ message: err.message });\r\n\t}\r\n};\r\n\r\nleadCtrl.isAtendido = async (req, res) => {\r\n\tconst { leadId } = req.params;\r\n\tconst { estado_lead, isAtendido, fecha_atencion, comentario, observacion, sucursal, auto, financiamiento, entidad_bancaria, tentativa_inicial, precioUnidad } = req.body;\r\n\r\n\ttry {\r\n\t\tlet query = null;\r\n\r\n\t\tconst sucursalFound = await Sucursal.findOne({ name: sucursal });\r\n\t\tconst autoFound = await Vehicle.findOne({ cod_tdp: auto });\r\n\t\tconst financiamientoFound = await Financiamiento.findOne({ name: financiamiento });\r\n\r\n\t\tif (!sucursalFound) return res.status(404).json({ message: `Sucursal ${sucursal} no encontrada` });\r\n\t\tif (!autoFound) return res.status(404).json({ message: `Vehículo ${auto} no encontrado` });\r\n\t\tif (!financiamientoFound) return res.status(404).json({ message: `Tipo de financiamiento ${financiamiento} no encontrado` });\r\n\r\n\t\tif (entidad_bancaria == null || entidad_bancaria == undefined) {\r\n\t\t\tquery = await Lead.findByIdAndUpdate(leadId, {\r\n\t\t\t\tsucursal_lead: sucursalFound._id,\r\n\t\t\t\testado_lead,\r\n\t\t\t\tisAtendido,\r\n\t\t\t\tfecha_atencion,\r\n\t\t\t\tcomentario,\r\n\t\t\t\tobservacion,\r\n\t\t\t\tauto: autoFound._id,\r\n\t\t\t\ttipoFinanciamiento: financiamientoFound._id,\r\n\t\t\t\ttentativa_inicial,\r\n\t\t\t\tprecioUnidad,\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\tconst bancoFound = await Banco.findOne({ name: entidad_bancaria });\r\n\t\t\tif (!bancoFound) return res.status(404).json({ message: `Entidad ${entidad_bancaria} no encontrado` });\r\n\r\n\t\t\tquery = await Lead.findByIdAndUpdate(leadId, {\r\n\t\t\t\tsucursal_lead: sucursalFound._id,\r\n\t\t\t\testado_lead,\r\n\t\t\t\tisAtendido,\r\n\t\t\t\tfecha_atencion,\r\n\t\t\t\tcomentario,\r\n\t\t\t\tobservacion,\r\n\t\t\t\tauto: autoFound._id,\r\n\t\t\t\ttipoFinanciamiento: financiamientoFound._id,\r\n\t\t\t\tentidad_bancaria: bancoFound._id,\r\n\t\t\t\ttentativa_inicial,\r\n\t\t\t\tprecioUnidad,\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tif (query) {\r\n\t\t\tres.json({ message: \"Lead actualizado con éxito\" });\r\n\t\t} else {\r\n\t\t\treturn res.status(404).json({ message: \"Lead no encontrado para actualizar\" });\r\n\t\t}\r\n\t} catch (err) {\r\n\t\tconsole.log(err);\r\n\t\treturn res.status(503).json({ message: err.message });\r\n\t}\r\n};\r\n\r\nleadCtrl.isAsignacion = async (req, res) => {\r\n\tconst { leadId } = req.params;\r\n\tconst { estado_lead, isAsignado, fecha_asignacion, comentario, observacion, asesorAsignado, auto, financiamiento, entidad_bancaria, tentativa_inicial, precioUnidad } = req.body;\r\n\r\n\ttry {\r\n\t\tlet query = null;\r\n\r\n\t\tconst asesorFound = await Seller.findOne({ name: asesorAsignado });\r\n\t\tconst autoFound = await Vehicle.findOne({ cod_tdp: auto });\r\n\t\tconst financiamientoFound = await Financiamiento.findOne({ name: financiamiento });\r\n\r\n\t\tif (!asesorFound) return res.status(404).json({ message: `Asesor ${asesorAsignado} no encontrado` });\r\n\t\tif (!autoFound) return res.status(404).json({ message: `Vehículo ${auto} no encontrado` });\r\n\t\tif (!financiamientoFound) return res.status(404).json({ message: `Tipo de financiamiento ${financiamiento} no encontrado` });\r\n\r\n\t\tif (entidad_bancaria == null || entidad_bancaria == undefined) {\r\n\t\t\tquery = await Lead.findByIdAndUpdate(leadId, {\r\n\t\t\t\testado_lead,\r\n\t\t\t\tisAsignado,\r\n\t\t\t\tfecha_asignacion,\r\n\t\t\t\tcomentario,\r\n\t\t\t\tobservacion,\r\n\t\t\t\tasesorAsignado: asesorFound._id,\r\n\t\t\t\tauto: autoFound._id,\r\n\t\t\t\ttipoFinanciamiento: financiamientoFound._id,\r\n\t\t\t\ttentativa_inicial,\r\n\t\t\t\tprecioUnidad,\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\tconst bancoFound = await Banco.findOne({ name: entidad_bancaria });\r\n\t\t\tif (!bancoFound) return res.status(404).json({ message: `Entidad ${entidad_bancaria} no encontrado` });\r\n\r\n\t\t\tquery = await Lead.findByIdAndUpdate(leadId, {\r\n\t\t\t\testado_lead,\r\n\t\t\t\tisAsignado,\r\n\t\t\t\tfecha_asignacion,\r\n\t\t\t\tcomentario,\r\n\t\t\t\tobservacion,\r\n\t\t\t\tasesorAsignado: asesorFound._id,\r\n\t\t\t\tauto: autoFound._id,\r\n\t\t\t\ttipoFinanciamiento: financiamientoFound._id,\r\n\t\t\t\tentidad_bancaria: bancoFound._id,\r\n\t\t\t\ttentativa_inicial,\r\n\t\t\t\tprecioUnidad,\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tif (query) {\r\n\t\t\tres.json({ message: \"Lead actualizado con éxito\" });\r\n\t\t} else {\r\n\t\t\treturn res.status(404).json({ message: \"Lead no encontrado para actualizar\" });\r\n\t\t}\r\n\t} catch (err) {\r\n\t\tconsole.log(err);\r\n\t\treturn res.status(503).json({ message: err.message });\r\n\t}\r\n};\r\n\r\nleadCtrl.isCotizado = async (req, res) => {\r\n\tconst { leadId } = req.params;\r\n\tconst { financiamiento, entidad_bancaria, tentativa_inicial, precioUnidad, estado_lead, isCotizado, fecha_cotizacion, comentario, observacion } = req.body;\r\n\r\n\ttry {\r\n\t\tlet query = null;\r\n\r\n\t\tconst financiamientoFound = await Financiamiento.findOne({ name: financiamiento });\r\n\t\tif (!financiamientoFound) return res.status(404).json({ message: `Tipo de financiamiento ${financiamiento} no encontrado` });\r\n\r\n\t\tif (entidad_bancaria == null || entidad_bancaria == undefined) {\r\n\t\t\tquery = await Lead.findByIdAndUpdate(leadId, {\r\n\t\t\t\ttipoFinanciamiento: financiamientoFound._id,\r\n\t\t\t\ttentativa_inicial,\r\n\t\t\t\tprecioUnidad,\r\n\t\t\t\testado_lead,\r\n\t\t\t\tisCotizado,\r\n\t\t\t\tfecha_cotizacion,\r\n\t\t\t\tcomentario,\r\n\t\t\t\tobservacion,\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\tconst bancoFound = await Banco.findOne({ name: entidad_bancaria });\r\n\t\t\tif (!bancoFound) return res.status(404).json({ message: `Entidad ${entidad_bancaria} no encontrado` });\r\n\r\n\t\t\tquery = await Lead.findByIdAndUpdate(leadId, {\r\n\t\t\t\ttipoFinanciamiento: financiamientoFound._id,\r\n\t\t\t\tentidad_bancaria: bancoFound._id,\r\n\t\t\t\ttentativa_inicial,\r\n\t\t\t\tprecioUnidad,\r\n\t\t\t\testado_lead,\r\n\t\t\t\tisCotizado,\r\n\t\t\t\tfecha_cotizacion,\r\n\t\t\t\tcomentario,\r\n\t\t\t\tobservacion,\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tif (query) {\r\n\t\t\tres.json({ message: \"Lead actualizado con éxito\" });\r\n\t\t} else {\r\n\t\t\treturn res.status(404).json({ message: \"Lead no encontrado para actualizar\" });\r\n\t\t}\r\n\t} catch (err) {\r\n\t\tconsole.log(err);\r\n\t\treturn res.status(503).json({ message: err.message });\r\n\t}\r\n};\r\n\r\nleadCtrl.isDeclinado = async (req, res) => {\r\n\tconst { leadId } = req.params;\r\n\tconst { estado_lead, isDeclinado, fecha_declinado, motivo_desistencia, comentario, observacion } = req.body;\r\n\r\n\ttry {\r\n\t\tconst query = await Lead.findByIdAndUpdate(leadId, {\r\n\t\t\testado_lead,\r\n\t\t\tisDeclinado,\r\n\t\t\tfecha_declinado,\r\n\t\t\tmotivo_desistencia,\r\n\t\t\tcomentario,\r\n\t\t\tobservacion,\r\n\t\t});\r\n\r\n\t\tif (query) {\r\n\t\t\tres.json({ message: \"Lead actualizado con éxito\" });\r\n\t\t} else {\r\n\t\t\treturn res.status(404).json({ message: \"Lead no encontrado para actualizar\" });\r\n\t\t}\r\n\t} catch (err) {\r\n\t\tconsole.log(err);\r\n\t\treturn res.status(503).json({ message: err.message });\r\n\t}\r\n};\r\n\r\nleadCtrl.isConvertido = async (req, res) => {\r\n\tconst { leadId } = req.params;\r\n\tconst { estado_lead, estado_conversion, isConvertido, fecha_conversion } = req.body;\r\n\r\n\ttry {\r\n\t\tconst statusFound = await EstadoConversion.findOne({ name: estado_conversion });\r\n\t\tif (!statusFound) return res.status(404).json({ message: `Estado ${estado_conversion} no encontrado` });\r\n\r\n\t\tconst query = await Lead.findByIdAndUpdate(leadId, {\r\n\t\t\testado_lead,\r\n\t\t\testado_conversion: statusFound._id,\r\n\t\t\tisConvertido,\r\n\t\t\tfecha_conversion,\r\n\t\t});\r\n\r\n\t\tif (query) {\r\n\t\t\tres.json({ message: \"Lead actualizado con éxito\" });\r\n\t\t} else {\r\n\t\t\treturn res.status(404).json({ message: \"Lead no encontrado para actualizar\" });\r\n\t\t}\r\n\t} catch (err) {\r\n\t\tconsole.log(err);\r\n\t\treturn res.status(503).json({ message: err.message });\r\n\t}\r\n};\r\n\r\nleadCtrl.isBooking = async (req, res) => {\r\n\tconst { leadId } = req.params;\r\n\tconst { estado_conversion, isBooking, fecha_booking } = req.body;\r\n\r\n\ttry {\r\n\t\tconst statusFound = await EstadoConversion.findOne({ name: estado_conversion });\r\n\t\tif (!statusFound) return res.status(404).json({ message: `Estado ${estado_conversion} no encontrado` });\r\n\r\n\t\tconst query = await Lead.findByIdAndUpdate(leadId, {\r\n\t\t\testado_conversion: statusFound._id,\r\n\t\t\tisBooking,\r\n\t\t\tfecha_booking,\r\n\t\t});\r\n\r\n\t\tif (query) {\r\n\t\t\tres.json({ message: \"Lead actualizado con éxito\" });\r\n\t\t} else {\r\n\t\t\treturn res.status(404).json({ message: \"Lead no encontrado para actualizar\" });\r\n\t\t}\r\n\t} catch (err) {\r\n\t\tconsole.log(err);\r\n\t\treturn res.status(503).json({ message: err.message });\r\n\t}\r\n};\r\n\r\nleadCtrl.isDown = async (req, res) => {\r\n\tconst { leadId } = req.params;\r\n\tconst { estado_conversion, isDown, fecha_down } = req.body;\r\n\r\n\ttry {\r\n\t\tconst statusFound = await EstadoConversion.findOne({ name: estado_conversion });\r\n\t\tif (!statusFound) return res.status(404).json({ message: `Estado ${estado_conversion} no encontrado` });\r\n\r\n\t\tconst query = await Lead.findByIdAndUpdate(leadId, {\r\n\t\t\testado_conversion: statusFound._id,\r\n\t\t\tisDown,\r\n\t\t\tfecha_down,\r\n\t\t});\r\n\r\n\t\tif (query) {\r\n\t\t\tres.json({ message: \"Lead actualizado con éxito\" });\r\n\t\t} else {\r\n\t\t\treturn res.status(404).json({ message: \"Lead no encontrado para actualizar\" });\r\n\t\t}\r\n\t} catch (err) {\r\n\t\tconsole.log(err);\r\n\t\treturn res.status(503).json({ message: err.message });\r\n\t}\r\n};\r\n\r\nleadCtrl.isVenta = async (req, res) => {\r\n\tconst { leadId } = req.params;\r\n\tconst { estado_conversion, isVenta, fecha_venta } = req.body;\r\n\r\n\ttry {\r\n\t\tconst statusFound = await EstadoConversion.findOne({ name: estado_conversion });\r\n\t\tif (!statusFound) return res.status(404).json({ message: `Estado ${estado_conversion} no encontrado` });\r\n\r\n\t\tconst query = await Lead.findByIdAndUpdate(leadId, {\r\n\t\t\testado_conversion: statusFound._id,\r\n\t\t\tisVenta,\r\n\t\t\tfecha_venta,\r\n\t\t});\r\n\r\n\t\tif (query) {\r\n\t\t\tres.json({ message: \"Lead actualizado con éxito\" });\r\n\t\t} else {\r\n\t\t\treturn res.status(404).json({ message: \"Lead no encontrado para actualizar\" });\r\n\t\t}\r\n\t} catch (err) {\r\n\t\tconsole.log(err);\r\n\t\treturn res.status(503).json({ message: err.message });\r\n\t}\r\n};\r\n\r\nleadCtrl.deleteOneById = async (req, res) => {\r\n\tconst { leadId } = req.params;\r\n\r\n\ttry {\r\n\t\tconst query = await Lead.findByIdAndDelete(leadId);\r\n\r\n\t\tif (query) {\r\n\t\t\tres.json({ message: \"Lead eliminado con éxito\" });\r\n\t\t} else {\r\n\t\t\treturn res.status(404).json({ message: \"Lead no encontrado para eliminar\" });\r\n\t\t}\r\n\t} catch (err) {\r\n\t\tconsole.log(err);\r\n\t\treturn res.status(503).json({ message: err.message });\r\n\t}\r\n};\r\n\r\nleadCtrl.leadsBySucursalFecha = async (req, res) => {\r\n\tconst { start, end } = req.body;\r\n\r\n\ttry {\r\n\t\tconst query = await Lead.find({\r\n\t\t\tfecha_ingreso: {\r\n\t\t\t\t$gte: new Date(start),\r\n\t\t\t\t$lte: new Date(end),\r\n\t\t\t},\r\n\t\t})\r\n\t\t\t.sort({ fecha_ingreso: -1 })\r\n\t\t\t.populate({\r\n\t\t\t\tpath: \"sucursal_lead\",\r\n\t\t\t\tselect: \"name\",\r\n\t\t\t})\r\n\t\t\t.populate({\r\n\t\t\t\tpath: \"dataOrigin\",\r\n\t\t\t\tselect: \"name\",\r\n\t\t\t})\r\n\t\t\t.populate({\r\n\t\t\t\tpath: \"tipoFinanciamiento\",\r\n\t\t\t\tselect: \"tipo\",\r\n\t\t\t})\r\n\t\t\t.populate({\r\n\t\t\t\tpath: \"entidad_bancaria\",\r\n\t\t\t\tselect: \"name avatar\",\r\n\t\t\t})\r\n\t\t\t.populate({\r\n\t\t\t\tpath: \"estado_conversion\",\r\n\t\t\t\tselect: \"name\",\r\n\t\t\t})\r\n\t\t\t.populate({\r\n\t\t\t\tpath: \"auto\",\r\n\t\t\t\tselect: \"chasis model cod_tdp, version\",\r\n\t\t\t\tpopulate: [\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tpath: \"chasis\",\r\n\t\t\t\t\t\tselect: \"name\",\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tpath: \"model\",\r\n\t\t\t\t\t\tselect: \"name marca avatar\",\r\n\t\t\t\t\t\tpopulate: {\r\n\t\t\t\t\t\t\tpath: \"marca\",\r\n\t\t\t\t\t\t\tselect: \"name avatar\",\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t},\r\n\t\t\t\t],\r\n\t\t\t})\r\n\t\t\t.populate({\r\n\t\t\t\tpath: \"asesorAsignado\",\r\n\t\t\t\tselect: \"name tipo marca avatar\",\r\n\t\t\t\tpopulate: {\r\n\t\t\t\t\tpath: \"marca\",\r\n\t\t\t\t\tselect: \"name avatar\",\r\n\t\t\t\t},\r\n\t\t\t})\r\n\t\t\t.populate({\r\n\t\t\t\tpath: \"createdBy\",\r\n\t\t\t\tselect: \"name username\",\r\n\t\t\t});\r\n\r\n\t\tif (query.length > 0) {\r\n\t\t\tres.json({ total: query.length, leads: query });\r\n\t\t} else {\r\n\t\t\treturn res.status(404).json({ message: \"No existen leads\" });\r\n\t\t}\r\n\t} catch (err) {\r\n\t\tconsole.log(err);\r\n\t\treturn res.status(503).json({ message: err.message });\r\n\t}\r\n};\r\n\r\nleadCtrl.leadsByStatusFecha = async (req, res) => {\r\n\tconst { estado_lead, start, end } = req.body;\r\n\r\n\ttry {\r\n\t\tconst query = await Lead.find({\r\n\t\t\testado_lead,\r\n\t\t\tfecha_ingreso: {\r\n\t\t\t\t$gte: new Date(start),\r\n\t\t\t\t$lte: new Date(end),\r\n\t\t\t},\r\n\t\t})\r\n\t\t\t.sort({ fecha_ingreso: -1 })\r\n\t\t\t.populate({\r\n\t\t\t\tpath: \"sucursal_lead\",\r\n\t\t\t\tselect: \"name\",\r\n\t\t\t})\r\n\t\t\t.populate({\r\n\t\t\t\tpath: \"dataOrigin\",\r\n\t\t\t\tselect: \"name\",\r\n\t\t\t})\r\n\t\t\t.populate({\r\n\t\t\t\tpath: \"tipoFinanciamiento\",\r\n\t\t\t\tselect: \"tipo\",\r\n\t\t\t})\r\n\t\t\t.populate({\r\n\t\t\t\tpath: \"entidad_bancaria\",\r\n\t\t\t\tselect: \"name avatar\",\r\n\t\t\t})\r\n\t\t\t.populate({\r\n\t\t\t\tpath: \"estado_conversion\",\r\n\t\t\t\tselect: \"name\",\r\n\t\t\t})\r\n\t\t\t.populate({\r\n\t\t\t\tpath: \"auto\",\r\n\t\t\t\tselect: \"chasis model cod_tdp, version\",\r\n\t\t\t\tpopulate: [\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tpath: \"chasis\",\r\n\t\t\t\t\t\tselect: \"name\",\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tpath: \"model\",\r\n\t\t\t\t\t\tselect: \"name marca avatar\",\r\n\t\t\t\t\t\tpopulate: {\r\n\t\t\t\t\t\t\tpath: \"marca\",\r\n\t\t\t\t\t\t\tselect: \"name avatar\",\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t},\r\n\t\t\t\t],\r\n\t\t\t})\r\n\t\t\t.populate({\r\n\t\t\t\tpath: \"asesorAsignado\",\r\n\t\t\t\tselect: \"name tipo marca avatar\",\r\n\t\t\t\tpopulate: {\r\n\t\t\t\t\tpath: \"marca\",\r\n\t\t\t\t\tselect: \"name avatar\",\r\n\t\t\t\t},\r\n\t\t\t})\r\n\t\t\t.populate({\r\n\t\t\t\tpath: \"createdBy\",\r\n\t\t\t\tselect: \"name username\",\r\n\t\t\t});\r\n\r\n\t\tif (query.length > 0) {\r\n\t\t\tres.json({ total: query.length, leads: query });\r\n\t\t} else {\r\n\t\t\treturn res.status(404).json({ message: \"No existen leads\" });\r\n\t\t}\r\n\t} catch (err) {\r\n\t\tconsole.log(err);\r\n\t\treturn res.status(503).json({ message: err.message });\r\n\t}\r\n};\r\n\r\nleadCtrl.rankingLeadsConversionByDates = async (req, res) => {\r\n\tconst { start, end } = req.body;\r\n\r\n\ttry {\r\n\t\tconst filter = { fecha_ingreso: { $gte: new Date(start), $lte: new Date(end) } };\r\n\t\tconst query = await Lead.aggregate([\r\n\t\t\t{\r\n\t\t\t\t$match: filter,\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t$group: {\r\n\t\t\t\t\t_id: \"$estado_conversion\",\r\n\t\t\t\t\tnum_leads: { $sum: 1 },\r\n\t\t\t\t},\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t$sort: { num_leads: -1 },\r\n\t\t\t},\r\n\t\t]);\r\n\r\n\t\tif (query.length > 0) {\r\n\t\t\tres.json({ total: query.length, ranking: query });\r\n\t\t} else {\r\n\t\t\treturn res.status(201).json({ message: \"No existen leads aún\" });\r\n\t\t}\r\n\t} catch (err) {\r\n\t\tconsole.log(err);\r\n\t\treturn res.status(503).json({ message: err.message });\r\n\t}\r\n};\r\n\r\nleadCtrl.countLeadsByDates = async (req, res) => {\r\n\tconst { estado, start, end } = req.body;\r\n\r\n\ttry {\r\n\t\tconst query = await Lead.find({ \r\n\t\t\testado_lead: {$regex: '.*' + estado + '.*'},\r\n\t\t\tfecha_ingreso: { $gte: new Date(start), $lte: new Date(end) } \r\n\t\t}).countDocuments();\r\n\t\tif (query >= 0) {\r\n\t\t\tres.json({ qty: query });\r\n\t\t}\r\n\t} catch (err) {\r\n\t\tconsole.log(err);\r\n\t\treturn res.status(503).json({ message: err.message });\r\n\t}\r\n};\r\n\r\nleadCtrl.countLeadsConversionyDates = async (req, res) => {\r\n\tconst { estado, start, end } = req.body;\r\n\r\n\ttry {\r\n\t\tconst conversionState = await EstadoConversion.findOne({name: estado});\r\n\r\n\t\tconst query = await Lead.find({ \r\n\t\t\testado_conversion: conversionState._id,\r\n\t\t\tfecha_ingreso: { $gte: new Date(start), $lte: new Date(end) } \r\n\t\t}).countDocuments();\r\n\t\tif (query >= 0) {\r\n\t\t\tres.json({ qty: query });\r\n\t\t}\r\n\t} catch (err) {\r\n\t\tconsole.log(err);\r\n\t\treturn res.status(503).json({ message: err.message });\r\n\t}\r\n};\r\n\r\nexport default leadCtrl;\r\n"],"file":"lead.controller.js"}