{"version":3,"sources":["../../src/models/User.js"],"names":["userSchema","Schema","name","type","String","require","username","password","email","cellphone","description","avatar","status","Boolean","online","sucursal","Types","ObjectId","ref","roles","createdBy","timestamps","versionKey","statics","encryptPassword","clave","bcrypt","genSalt","salto","hash","matchPassword","claveRecibida","compare"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AAEA,IAAMA,UAAU,GAAG,IAAIC,gBAAJ,CAAW;AAC1BC,EAAAA,IAAI,EAAE;AAAEC,IAAAA,IAAI,EAAEC,MAAR;AAAgBC,IAAAA,OAAO,EAAE;AAAzB,GADoB;AAE1BC,EAAAA,QAAQ,EAAE;AAAEH,IAAAA,IAAI,EAAEC,MAAR;AAAgBC,IAAAA,OAAO,EAAE;AAAzB,GAFgB;AAG1BE,EAAAA,QAAQ,EAAE;AAAEJ,IAAAA,IAAI,EAAEC,MAAR;AAAgBC,IAAAA,OAAO,EAAE;AAAzB,GAHgB;AAI1BG,EAAAA,KAAK,EAAE;AAAEL,IAAAA,IAAI,EAAEC;AAAR,GAJmB;AAK1BK,EAAAA,SAAS,EAAE;AAAEN,IAAAA,IAAI,EAAEC;AAAR,GALe;AAM1BM,EAAAA,WAAW,EAAE;AAAEP,IAAAA,IAAI,EAAEC;AAAR,GANa;AAO1BO,EAAAA,MAAM,EAAE;AAAER,IAAAA,IAAI,EAAEC;AAAR,GAPkB;AAQ1BQ,EAAAA,MAAM,EAAE;AAAET,IAAAA,IAAI,EAAEU,OAAR;AAAiB,eAAS;AAA1B,GARkB;AAS1BC,EAAAA,MAAM,EAAE;AAAEX,IAAAA,IAAI,EAAEU,OAAR;AAAiB,eAAS;AAA1B,GATkB;AAU1BE,EAAAA,QAAQ,EAAE;AAAEZ,IAAAA,IAAI,EAAEF,iBAAOe,KAAP,CAAaC,QAArB;AAA+BC,IAAAA,GAAG,EAAE;AAApC,GAVgB;AAW1BC,EAAAA,KAAK,EAAE,CAAC;AAAED,IAAAA,GAAG,EAAE,MAAP;AAAef,IAAAA,IAAI,EAAEF,iBAAOe,KAAP,CAAaC;AAAlC,GAAD,CAXmB;AAY1BG,EAAAA,SAAS,EAAE;AAAEF,IAAAA,GAAG,EAAE,MAAP;AAAef,IAAAA,IAAI,EAAEF,iBAAOe,KAAP,CAAaC;AAAlC;AAZe,CAAX,EAahB;AACCI,EAAAA,UAAU,EAAE,IADb;AAECC,EAAAA,UAAU,EAAE;AAFb,CAbgB,CAAnB;;AAkBAtB,UAAU,CAACuB,OAAX,CAAmBC,eAAnB;AAAA,2FAAqC,iBAAMC,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACbC,qBAAOC,OAAP,CAAe,EAAf,CADa;;AAAA;AAC3BC,YAAAA,KAD2B;AAAA;AAAA,mBAEpBF,qBAAOG,IAAP,CAAYJ,KAAZ,EAAmBG,KAAnB,CAFoB;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAArC;;AAAA;AAAA;AAAA;AAAA;;AAKA5B,UAAU,CAACuB,OAAX,CAAmBO,aAAnB;AAAA,4FAAmC,kBAAML,KAAN,EAAaM,aAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAClBL,qBAAOM,OAAP,CAAeP,KAAf,EAAsBM,aAAtB,CADkB;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAnC;;AAAA;AAAA;AAAA;AAAA;;eAIe,qBAAM,MAAN,EAAc/B,UAAd,C","sourcesContent":["import { Schema, model } from \"mongoose\";\r\nimport bcrypt from 'bcryptjs'\r\n\r\nconst userSchema = new Schema({\r\n    name: { type: String, require: true },\r\n    username: { type: String, require: true },\r\n    password: { type: String, require: true },\r\n    email: { type: String },\r\n    cellphone: { type: String },\r\n    description: { type: String },\r\n    avatar: { type: String },\r\n    status: { type: Boolean, default: true },\r\n    online: { type: Boolean, default: false },\r\n    sucursal: { type: Schema.Types.ObjectId, ref: 'Sucursal' },\r\n    roles: [{ ref: 'Role', type: Schema.Types.ObjectId }],\r\n    createdBy: { ref: 'User', type: Schema.Types.ObjectId }\r\n}, {\r\n    timestamps: true,\r\n    versionKey: false\r\n})\r\n\r\nuserSchema.statics.encryptPassword = async(clave) => {\r\n    const salto = await bcrypt.genSalt(10)\r\n    return await bcrypt.hash(clave, salto)\r\n}\r\n\r\nuserSchema.statics.matchPassword = async(clave, claveRecibida) => {\r\n    return await bcrypt.compare(clave, claveRecibida)\r\n}\r\n\r\nexport default model('User', userSchema)"],"file":"User.js"}